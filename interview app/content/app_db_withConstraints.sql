/*
SQLyog Ultimate v10.00 Beta1
MySQL - 5.6.44-log : Database - interview_questions_app
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`interview_questions_app` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `interview_questions_app`;

/*Table structure for table `address` */

DROP TABLE IF EXISTS `address`;

CREATE TABLE `address` (
  `id` bigint(20) NOT NULL,
  `address_line1` varchar(255) DEFAULT NULL,
  `address_line2` varchar(255) DEFAULT NULL,
  `city` varchar(255) DEFAULT NULL,
  `country` varchar(255) DEFAULT NULL,
  `postal_code` varchar(255) DEFAULT NULL,
  `state` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `address` */

/*Table structure for table `file_upload` */

DROP TABLE IF EXISTS `file_upload`;

CREATE TABLE `file_upload` (
  `id` bigint(20) NOT NULL,
  `file_name` varchar(255) DEFAULT NULL,
  `file_type` varchar(255) DEFAULT NULL,
  `path` varchar(255) DEFAULT NULL,
  `size` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `file_upload` */

/*Table structure for table `hibernate_sequence` */

DROP TABLE IF EXISTS `hibernate_sequence`;

CREATE TABLE `hibernate_sequence` (
  `next_val` bigint(20) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `hibernate_sequence` */

insert  into `hibernate_sequence`(`next_val`) values (2),(2),(2);

/*Table structure for table `interview_questions` */

DROP TABLE IF EXISTS `interview_questions`;

CREATE TABLE `interview_questions` (
  `iqid` bigint(20) NOT NULL AUTO_INCREMENT,
  `answer` longtext,
  `question` longtext,
  `topic_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`iqid`),
  KEY `FKdyjtqhkq3a5b1har2s8bbojbc` (`topic_id`),
  CONSTRAINT `FKdyjtqhkq3a5b1har2s8bbojbc` FOREIGN KEY (`topic_id`) REFERENCES `topics` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=868 DEFAULT CHARSET=latin1;

/*Data for the table `interview_questions` */

insert  into `interview_questions`(`iqid`,`answer`,`question`,`topic_id`) values (1,'Java Servlets are programs that run on a Web or Application server and act as a middle layer between a request coming from a Web browser or other HTTP client and databases or applications on the HTTP server.','What are Servlets?',1),(2,'Servlets offer several advantages in comparison with the CGI.<br/>1) Performance is significantly better.<br/>2) Servlets execute within the address space of a Web server. It is not necessary to create a separate process to handle each client request.<br/>3) Servlets are platform-independent because they are written in Java.<br/>4) Java security manager on the server enforces a set of restrictions to protect the resources on a server machine. So servlets are trusted.<br/>5) The full functionality of the Java class libraries is available to a servlet. It can communicate with applets, databases, or other software via the sockets and RMI mechanisms that you have seen already.','What are the advantages of servlets over CGI?',1),(3,'Only one object at the time of first request by servlet or web container.','How many objects of a servlet is created?',1),(4,'1) Servlet is loaded<br/>2) servlet is instantiated<br/>3) servlet is initialized<br/>4) service the request<br/>5) servlet is destroyed','What is the life-cycle of a servlet?',1),(5,'1) public void init(ServletConfig config)<br/>It is invoked only once when first request comes for the servlet. It is used to initialize the servlet.<br/><br/>2) public void service(ServletRequest request,ServletResponse)throws ServletException,IOException<br/>It is invoked at each request.The service() method is used to service the request.<br/><br/>3) public void destroy()<br/>It is invoked only once when servlet is unloaded.','What are the life-cycle methods for a servlet?',1),(6,'The web container or servlet container.','Who is responsible to create the object of servlet?',1),(7,'At the time of first request.','When servlet object is created?',1),(8,'1) GET Limited amount of data can be sent because data is sent in header where POST large amount of data can be sent because data is sent in body.<br/>2) GET Not Secured because data is exposed in URL bar where POST is secured because data is not exposed in URL bar.<br/>3) GET Can be bookmarked where cannot be bookmarked.<br/>4) GET Idempotent where POST is Non-Idempotent.<br/>5) GET It is more efficient and used than Post where POST It is less efficient and used.<br/>6) GET is the default HTTP method whereas we need to specify method as POST to send request with POST method.<br/>','What is difference between Get and Post method?',1),(9,'PrintWriter is a character-stream class where as ServletOutputStream is a byte-stream class. The PrintWriter class can be used to write only character-based information whereas ServletOutputStream class can be used to write primitive values as well as character-based information.','What is difference between PrintWriter and ServletOutputStream?',1),(10,'The GenericServlet is protocol independent whereas HttpServlet is HTTP protocol specific. HttpServlet provides additional functionalities such as state management etc.','What is difference between GenericServlet and HttpServlet?',1),(11,'When one servlet communicates to another servlet, it is known as servlet collaboration. There are many ways of servlet collaboration:<br/><br/>RequestDispacher interface<br/>sendRedirect() method etc.<br/>','What is servlet collaboration?',1),(12,'The RequestDispacher interface provides the facility of dispatching the request to another resource it may be html, servlet or jsp. This interceptor can also be used to include the content of antoher resource.','What is the purpose of RequestDispatcher Interface?',1),(13,'Yes, one of the way is RequestDispatcher interface for example:<br/><br/>RequestDispatcher rd=request.getRequestDispatcher(\"/login.jsp\");<br/>rd.forward(request,response);','Can you call a jsp from the servlet?',1),(14,'Servlets handles form data parsing automatically using the following methods depending on the situation:<br/>1) getParameter(): You call request.getParameter() method to get the value of a form parameter.<br/>2) getParameterValues(): Call this method if the parameter appears more than once and returns multiple values, for example checkbox.<br/>3) getParameterNames(): Call this method if you want a complete list of all parameters in the current request.','How to read form data in servlet?',1),(15,'When a browser requests for a web page, it sends lot of information to the web server which can not be read directly because this information travel as a part of header of HTTP request. HTTPServletRequest represents this HTTP Request.','What is HTTPServletRequest class?',1),(16,'when a Web server responds to a HTTP request to the browser, the response typically consists of a status line, some response headers, a blank line, and the document. HTTPServletResponse represents this HTTP Response.','What is HTTPServletResponse class?',1),(17,'We can use setStatus(statuscode) method of HttpServletResponse to send an authentication error.<br/><br/>// Set error code and reason.<br/>response.sendError(407, \"Need authentication!!!\" );','How to send an authentication error from a servlet?',1),(18,'forward(): sends the same request to another resource.<br/>sendRedirect(): method sends new request always because it uses the URL bar of the browser.<br/><br/>forward() method works at server side.<br/>sendRedirect() method works at client side.<br/><br/>forward() method works within the server only. <br/>sendRedirect() method works within and outside the server.<br/>','Difference between forward() method and sendRedirect() method ?',1),(19,'An object of ServletConfig is created by the web container for each servlet. This object can be used to get configuration information from web.xml file.<br/>If the configuration information is modified from the web.xml file, we don\'t need to change the servlet. So it is easier to manage the web application if any specific content is modified from time to time.','What is ServletConfig object?',1),(20,'An object of ServletContext is created by the web container at time of deploying the project. This object can be used to get configuration information from web.xml file. There is only one ServletContext object per web application.<br/>If any information is shared to many servlet, it is better to provide it from the web.xml file using the <context-param> element.','What is ServletContext object?',1),(21,'The container creates object of ServletConfig for each servlet whereas object of ServletContext is created for each web application.','What is difference between ServletConfig and ServletContext?',1),(22,'Session simply means a particular interval of time.<br/><br/>Session Tracking is a way to maintain state of an user.Http protocol is a stateless protocol.Each time user requests to the server, server treats the request as the new request.So we need to maintain the state of an user to recognize to particular user.','What is Session Tracking?',1),(23,'A cookie is a small piece of information that is persisted between the multiple client requests. A cookie has a name, a single value, and optional attributes such as a comment, path and domain qualifiers, a maximum age, and a version number.','What are Cookies?',1),(24,'Setting cookies with servlet involves three steps:<br/>(1) Creating a Cookie object: You call the Cookie constructor with a cookie name and a cookie value, both of which are strings.<br/><br/>Cookie cookie = new Cookie(\"key\",\"value\");<br/>Keep in mind, neither the name nor the value should contain white space or any of the following characters: [ ] ( ) = , \" / ? @ : ;<br/><br/>(2) Setting the maximum age: You use setMaxAge to specify how long (in seconds) the cookie should be valid. Following would set up a cookie for 24 hours.<br/><br/>cookie.setMaxAge(60*60*24); <br/>(3) Sending the Cookie into the HTTP response headers: You use response.addCookie to add cookies in the HTTP response header as follows:<br/><br/>response.addCookie(cookie);','How to create a cookie using servlet?',1),(25,'To read cookies, you need to create an array of javax.servlet.http.Cookie objects by calling the getCookies( ) method of HttpServletRequest. Then cycle through the array, and use getName() and getValue() methods to access each cookie and associated value.','How to read a cookie using servlet?',1),(26,'To delete cookies is very simple. If you want to delete a cookie then you simply need to follow up following three steps:<br/>1) Read an already exsiting cookie and store it in Cookie object.<br/>2) Set cookie age as zero using setMaxAge() method to delete an existing cookie.<br/>3) Add this cookie back into response header.<br/>','How to delete a cookie using servlet?',1),(27,'You can append some extra data on the end of each URL that identifies the session, and the server can associate that session identifier with data it has stored about that session. For example, with http://aqubeinfotech.com/file.htm;sessionid=12345, the session identifier is attached as sessionid=12345 which can be accessed at the web server to identify the client.','What is URL rewriting?',1),(28,'You would get HttpSession object by calling the public method getSession() of HttpServletRequest, as below:<br/><br/>// Create a session object if it is already not  created.<br/>HttpSession session = request.getSession();','How to create a session in servlet?',1),(29,'When you are done with a user\'s session data, you have several options:<br/>1) <b>Remove a particular attribute:</b> You can call public void removeAttribute(String name) method to delete the value associated with a particular key.<br/>2) <b>Delete the whole session:</b> You can call public void invalidate() method to discard an entire session. Setting Session timeout: You can call public void setMaxInactiveInterval(int interval) method to set the timeout for a session individually.<br/>3) <b>Log the user out:</b> The servers that support servlets 2.4, you can call logout to log the client out of the Web server and invalidate all sessions belonging to all the users.','How to delete a session in servlet?',1),(30,'setAttribute(String name, Object value) of HTTPSession object binds an object to this session, using the name specified and can be used to update an attribute in session.','How to update an attribute in session in servlet?',1),(31,'setMaxInactiveInterval(int interval) of HTTPSession object specifies the time, in seconds, between client requests before the servlet container will invalidate this session.','How to set session timeout in servlet?',1),(32,'Cookie works at client side whereas HttpSession works at server side.','What is difference between Cookies and HttpSession?',1),(33,'The simplest way of refreshing a web page is using method setIntHeader() of response object.','How to set auto page refresh in servlet?',1),(34,'A filter is an object that is invoked either at the preprocessing or postprocessing of a request. It is pluggable.','What is filter?',1),(35,'Filters are deployed in the deployment descriptor file web.xml and then map to either servlet names or URL patterns in your application\'s deployment descriptor.','How to do servlet filter mapping?',1),(36,'By the help of ServletContextListener interface.','How can we perform any action at the time of deploying the project?',1),(37,'It will not work if cookie is disabled from the browser.','What is the disadvantage of cookies?',1),(38,'One of the way is by MultipartRequest class provided by third party.','How can we upload the file to the server using servlet?',1),(39,'The load-on-startup element of servlet in web.xml is used to load the servlet at the time of deploying the project or server start. So it saves time for the response of first request.','What is load-on-startup in servlet?',1),(40,'It will not affect the container, now servlet will be loaded at first request.','What if we pass negative value in load-on-startup?',1),(41,'A war (web archive) file specifies the web elements. A servlet or jsp project can be converted into a war file. Moving one servlet project from one place to another will be fast as it is combined into a single file.','What is war file?',1),(42,'The war file can be created using jar tool found in jdk/bin directory. If you are using Eclipse or Netbeans IDE, you can export your project as a war file.<br/><br/>To create war file from console, you can write following code.<br/><br/>jar -cvf abc.war *  <br/><br/>Now all the files of current directory will be converted into abc.war file.','How to create war file?',1),(43,'There are mainly 3 annotations used for the servlet.<br/>1) @WebServlet : for servlet class.<br/>2) @WebListener : for listener class.<br/>3) @WebFilter : for filter class.<br/>','What are the annotations used in Servlet-3?',1),(44,'ServletContextEvent.','Which event is fired at the time of project deployment and undeployment?',1),(45,'HttpSessionEvent.','Which event is fired at the time of session creation and destroy?',1),(46,'ServletContextAttributeEvent.','Which event is fired at the time of setting, getting or removing attribute from application scope?',1),(47,'It is used to specify the welcome file for the project.','What is the use of welcome-file-list?',1),(48,'Attribute is a map object that can be used to set, get or remove in request, session or application scope. It is mainly used to share information between one servlet to another.','What is the use of attribute in servlets?',1),(49,'This means enabling a web site to provide different versions of content translated into the visitor\'s language or nationality.','What is internalization?',1),(50,'This means adding resources to a web site to adapt it to a particular geographical or cultural region for example Hindi translation to a web site.','What is localization?',1),(51,'This is a particular cultural or geographical region. It is usually referred to as a language symbol followed by a country symbol which is separated by an underscore. For example \"en_US\" represents english locale for US.','What is locale?',1),(52,'Java Server Pages technology (JSP) is used to create dynamic web page. It is an extension to the servlet technology. A JSP page is internally converted into servlet.','What is JSP?',2),(53,'<b>public void jspInit():</b> It is invoked only once, same as init method of servlet.<br/><b>public void _jspService(ServletRequest request,ServletResponse)throws ServletException,IOException:</b> It is invoked at each request, same as service() method of servlet.<br/><b>public void jspDestroy():</b> It is invoked only once, same as destroy() method of servlet.','What are the life-cycle methods for a jsp?',2),(54,'The jsp comment is called hide comment whereas html comment is called output comment. If user views the source of the page, the jsp comment will not be shown whereas html comment will be shown.','What is difference between hide comment and output comment?',2),(55,'JSP provides 9 implicit objects by default. They are as follows:<br/>1) out: JspWriter<br/>2) request: HttpServletRequest<br/>3) response: HttpServletResponse<br/>4) config: ServletConfig<br/>5) session: HttpSession<br/>6) application: ServletContext<br/>7) pageContext: PageContext<br/>8) page: Object<br/>9) exception: Throwable','What are the JSP implicit objects?',2),(56,'The include directive includes the content at page translation time.<br/>The include action includes the content at request time.<br/><br/>The include directive includes the original content of the page so page size increases at runtime.<br/>The include action doesn\'t include the original content rather invokes the include() method of Vendor provided class.<br/><br/>It\'s better for static pages.<br/>It\'s better for dynamic pages.','What is difference between include directive and include action?',2),(57,'Yes. JSP technology is extensible through the development of custom actions, or tags, which are encapsulated in tag libraries.','Is JSP technology extensible?',2),(58,'You can make your JSPs thread-safe by having them implement the SingleThreadModel interface. This is done by adding the directive &lt;%@ page isThreadSafe=\"false\" %&gt; within your JSP page.','How can I implement a thread-safe JSP page? What are the advantages and Disadvantages of using it?',2),(59,'&lt;% <br/>response.setHeader(\"Cache-Control\",\"no-store\");   <br/>response.setHeader(\"Pragma\",\"no-cache\");   <br/>response.setHeader (\"Expires\", \"0\"); <br/>//prevents caching at the proxy server  <br/>%&gt;','How can I prevent the output of my JSP or Servlet pages from being cached by the browser?<br/>(OR) How to disable caching on back button of the browser?',2),(60,'There are two ways to perform exception handling, one is by the errorPage element of page directive, and second is by the error-page element of web.xml file.','How can we handle the exceptions in JSP ?',2),(61,'There are two ways to include the result of another page:<br/>By include directive<br/>By include action<br/>','What are the two ways to include the result of another page. ?',2),(62,'Yes ofcourse! With the help of forward action tag, but we need to give the url-pattern of the servlet.','How can we forward the request from jsp page to the servlet ?',2),(63,'No. The exception implicit object can only be used in the error page which defines it with the isErrorPage attribute of page directive.','Can we use the exception implicit object in any jsp page ?',2),(64,'JSP is usually used for presentation in the MVC pattern (Model View Controller ) i.e. it plays the role of the view. The controller deals with calling the model and the business classes which in turn get the data, this data is then presented to the JSP for rendering on to the client.','How is JSP used in the MVC model?',2),(65,'Context initialization parameters are specified by the <context-param> in the web.xml file, these are initialization parameter for the whole application and not specific to any servlet or JSP.','What are context initialization parameters?',2),(66,'There are 4 values:<br/>1) page<br/>2) request<br/>3) session<br/>4) application','What are the different scope values for the <jsp:useBean> tag?',2),(67,'ServletContext gives the information about the container whereas PageContext gives the information about the Request.','What is the difference between ServletContext and PageContext?',2),(68,'request.getRequestDispatcher(path) is used in order to create it we need to give the relative path of the resource whereas context.getRequestDispatcher(path) in order to create it we need to give the absolute path of the resource.','What is the difference in using request.getRequestDispatcher() and context.getRequestDispatcher()?',2),(69,'The Expression Language(EL) is used in JSP to simplify the accessibility of objects. It provides many objects that can be used directly like param, requestScope, sessionScope, applicationScope, request, session etc.','What is EL in JSP?',2),(70,'1) Custom tags can manipulate JSP content whereas beans cannot.<br/>2) Complex operations can be reduced to a significantly simpler form with custom tags than with beans.<br/>3) Custom tags require quite a bit more work to set up than do beans.<br/>4) Custom tags are available only in JSP 1.1 and later, but beans can be used in all JSP 1.x versions.','What is basic differences between the JSP custom tags and java beans?',2),(71,'No.','Can an interface be implemented in the jsp file ?',2),(72,'JSP Standard Tag Library is library of predefined tags that ease the development of JSP.','What is JSTL?',2),(73,'There are 5 type of JSTL tags.<br/>1) core tags<br/>2) sql tags<br/>3) xml tags<br/>4) internationalization tags<br/>5) functions tags','How many tags are provided in JSTL?',2),(74,'The jsp taglib directive.','Which directive is used in jsp custom tag?',2),(75,'jsp:useBean<br/>jsp:setProperty<br/>jsp:getProperty','What are the 3 tags used in JSP bean development?',2),(76,'1. &lt;%@ page session=\"false\" %&gt;','How to disable session in JSP?',2),(77,'JSP page automatically create sessions for requests. By typing the following, it can be avoided.<br/>&lt;%@ page session=\"false\"  %&gt;','How can Automatic creation of session be prevented in a JSP page?',2),(78,'JavaBeans or Custom Tags can be used instead of scriptlet code.','How can you avoid scriptlet code in JSP?',2),(79,'A static method is of the class and not the object of a class. It can be invoked without instance of a class. Static members can also access the static data and change its value.','Explain static method.',2),(80,'Scripting can be easily disabled by setting scripting-invalid element of the deployment descriptor to true. It is a sub-element of property group. Its can be false as well.','How to disable scripting?',2),(81,'JSP is a technology on the server\'s side to make content generation simple. They are document centric, whereas servlets are programs. A Java server page can contain fragments of Java program, which execute and instantiate Java classes. However, they occur inside HTML template file. It provides the framework for development of a Web Application.','How is JSP better than Servlet technology?',2),(82,'&lt;% - JSP Comment - %&gt;<br/>&lt;!- HTML comment -&gt;','Show the 2 types of comments in JSP.',2),(83,'JDBC is a Java API that is used to connect and execute query to the database. JDBC API uses jdbc drivers to connects to the database.','What is JDBC?',3),(84,'JDBC Driver is a software component that enables java application to interact with the database.There are 4 types of JDBC drivers:<br/>1) JDBC-ODBC bridge driver<br/>2) Native-API driver (partially java driver)<br/>3) Network Protocol driver (fully java driver)<br/>4) Thin driver (fully java driver)','What is JDBC Driver?',3),(85,'1) Registering the driver class<br/>2) Creating connection<br/>3) Creating statement<br/>4) Executing queries<br/>5) Closing connection<br/>','What are the steps to connect to the database in java?',3),(86,'The java.sql package contains interfaces and classes for JDBC API.<br/>Interfaces:<br/><br/>1) Connection<br/>2) Statement<br/>3) PreparedStatement<br/>4) ResultSet<br/>5) ResultSetMetaData<br/>6) DatabaseMetaData<br/>7) CallableStatement etc.<br/><br/>Classes:<br/><br/>1) DriverManager<br/>2) Blob<br/>3) Clob<br/>4) Types<br/>5) SQLException etc.','What are the JDBC API components?',3),(87,'There are 3 JDBC statements.<br/>1) Statement<br/>2) PreparedStatement<br/>3) CallableStatement','What are the JDBC statements?',3),(88,'Statement acts like a vehicle through which SQL commands can be sent. Through the connection object we create statement kind of objects.Through the connection object we create statement kind of objects.','What is Statement?',3),(89,'A prepared statement is an SQL statement that is precompiled by the database. Through precompilation, prepared statements improve the performance of SQL commands that are executed multiple times (given that the database supports prepared statements). Once compiled, prepared statements can be customized prior to each execution by altering predefined SQL parameters.','What is PreparedStatement?',3),(90,'Callable statements are used from JDBC application to invoke stored procedures and functions.','What are callable statements ?',3),(91,'In case of Statement, query is complied each time whereas in case of PreparedStatement, query is complied only once. So performance of PreparedStatement is better than Statement.','What is the difference between Statement and PreparedStatement interface?',3),(92,'By using Callable statement interface, we can execute procedures and functions.','How can we execute stored procedures and functions?',3),(93,'The DriverManager class manages the registered drivers. It can be used to register and unregister drivers. It provides factory method that returns the instance of Connection.','What is the role of JDBC DriverManager class?',3),(94,'The Connection interface maintains a session with the database. It can be used for transaction management. It provides factory methods that returns the instance of Statement, PreparedStatement, CallableStatement and DatabaseMetaData.','What does the JDBC Connection interface?',3),(95,'The ResultSet object represents a row of a table. It can be used to change the cursor pointer and get the information from the database.','What does the JDBC ResultSet interface?',3),(96,'The ResultSetMetaData interface returns the information of table such as total number of columns, column name, column type etc.','What does the JDBC ResultSetMetaData interface?',3),(97,'The DatabaseMetaData interface returns the information of the database such as username, driver name, driver version, number of tables, number of views etc.','What does the JDBC DatabaseMetaData interface?',3),(98,'The Connection interface provides methods for transaction management such as commit(), rollback() etc.','Which interface is responsible for transaction management in JDBC?',3),(99,'By using batch processing technique in JDBC, we can execute multiple queries. It makes the performance fast.','What is batch processing and how to perform batch processing in JDBC?',3),(100,'By using PreparedStatement interface, we can store and retrieve images.','How can we store and retrieve images from the database?',3),(101,'Connection Pooling is a technique used for reuse of physical connections and reduced overhead for your application. Connection pooling functionality minimizes expensive operations in the creation and closing of sessions.Database vendor\'s help multiple clients to share a cached set of connection objects that provides access to a database. Clients need not create a new connection everytime to interact with the database.','What is Connection Pooling?',3),(102,'If you use an application server like WebLogic, WebSphere, jBoss, Tomcat. , then your application server provides the facilities to configure for connection pooling. If you are not using an application server then components like Apache Commons DBCP Component can be used.','How do you implement connection pooling?',3),(103,'Class.forName(\"MyClass\")<br/>1) Loads the class MyClass.<br/>2) Execute any static block code of MyClass.<br/>3) Returns an instance of MyClass.<br/>','What does the Class.forName(\"MyClass\") do?',3),(104,'A JDBC RowSet object holds tabular data in a way that makes it more flexible and easier to use than a result set. A RowSet objects are JavaBeans components.','What is a RowSet?',3),(105,'There are two types of RowSet<br/><b>1) Connected</b> A connected RowSet Object is permanent in nature. It doesn\'t terminate until the application is terminated.<br/><b>2) Disconnected</b> A disconnected RowSet object is ad-hoc in nature. Whenever it requires retrieving data from the database, it establishes the connection and closes it upon finishing the required task. The data that is modified during disconnected state is updated after the connection is re-established.','What are different types of RowSet objects?',3),(106,'These are used to store large amount of data into database like images, movie etc which are extremely large in size.','What is the use of blob, clob datatypes in JDBC?',3),(107,'You need to close the resultset, the statement and the connection. If the connection has come from a pool, closing it actually sends it back to the pool for reuse. We can do this in the finally{} block, such that if an exception is thrown, you still get the chance to close this.','Why do you have to close database connections in Java?',3),(108,'<b>1) boolean execute() -</b> Executes the any kind of SQL statement.<br/><b>2) ResultSet executeQuery() -</b> This is used generally for reading the content of the database. The output will be in the form of ResultSet. Generally SELECT statement is used.<br/><b>3) int executeUpdate() -</b> This is generally used for altering the databases. Generally DROP TABLE or DATABASE, INSERT into TABLE, UPDATE TABLE, DELETE from TABLE statements will be used in this. The output will be in the form of int which denotes the number of rows affected by the query.','What is the difference between execute, executeQuery, executeUpdate?',3),(109,'When a Connection request is issued, the DriverManager asks each loaded driver if it understands the URL sent. When the URL passed is not properly constructed, then the \"No Suitable Driver\" message is returned.','When will you get the message \"No Suitable Driver\"?',3),(110,'A transaction is a logical unit of work. To complete a logical unit of work, several actions may need to be taken against a database. Transactions are used to provide data integrity, correct application semantics, and a consistent view of data during concurrent access.','What is a transaction?',3),(111,'Batch Processing allows you to group related SQL statements into a batch and submit them with one call to the database.','Why would you use a batch process?',3),(112,'When a connection is created, it is in auto-commit mode. This means that each individual SQL statement is treated as a transaction and will be automatically committed right after it is executed. By setting auto-commit to false no SQL statements will be committed until you explicitly call the commit method.','What does setAutoCommit do?',3),(113,'Following are the reasons:<br/>1) To increase performance.<br/>2) To maintain the integrity of business processes.<br/>3) To use distributed transactions.<br/>','Why will you set auto commit mode to false?',3),(114,'The JDBC driver converts the Java data type to the appropriate JDBC type before sending it to the database. It uses a default mapping for most data types. For example, a Java int is converted to an SQL INTEGER.','How does JDBC handle the data types of Java and database?',3),(115,'Here are few advantages of JDBC 4.0<br/>1) Auto loading of JDBC driver class. In the earlier versions we had to manually register and load drivers using class.forName.<br/>2) Connection management enhancements. New methods added to javax.sql.PooledConnection.<br/>3) DataSet Implementation of SQL using annotations.<br/>4) SQL XML support.','What are the benefits of JDBC 4.0?',3),(116,'JDBC Net pure Java driver(Type 4) is the fastest driver because it converts the JDBC calls into vendor specific protocol calls and it directly interacts with the database.','Which type of JDBC driver is the fastest one?',3),(117,'Struts is a framework for developing MVC-based framework. Struts2 is the combination of Webwork and struts1 frameworks','What is Struts?',4),(118,'<b>Struts 1:</b> Action class is not POJO. You need to inherit abstract class.<br/><b>Struts 2:</b> Action class is POJO. You don\'t need to inherit any class or implement any interface.<br/><br/><b>Struts 1:</b> Front controller is ActionServlet.<br/><b>Struts 2:</b> Front Controller is StrutsPrepareAndExecuteFilter.<br/><br/><b>Struts 1:</b> It uses the concept of RequestProcessor class while processing request.<br/><b>Struts 2:</b> It uses the concept of Interceptors while processing the request.<br/><br/><b>Struts 1:</b> It has only JSP for the view component.<br/><b>Struts 2:</b> It has JSP, Freemarker, Valocity etc. for the view component.<br/><br/><b>Struts 1:</b> Configuration file name can be [anyname].xml and placed inside WEB-INF directory.<br/><b>Struts 2:</b> Configuration file must be struts.xml and placed inside classes directory.<br/><br/><b>Struts 1:</b> Action and Model are separate.<br/><b>Struts 2:</b>Action and Model are combined within action class.<br/>','What is the difference between struts1 and struts2?',4),(119,'1) Configuration MVC components<br/>2) POJO based action<br/>3) AJAX Support<br/>4) Various Tag Support<br/>5) Various Result Types<br/>5) Integration Support<br/>','What are the features of Struts?',4),(120,'Struts framework is comprised of following components:<br/><br/>1) Java Servlets<br/>2) JSP (Java Server Pages)<br/>3) Custom Tags<br/>4) Message Resources<br/>','What are the components of Struts Framework?',4),(121,'Struts based applications use MVC design pattern. The flow of requests is as follows:<br/><br/>1) User interacts with View by clicking any link or by submitting any form.<br/>2) Upon user\'s interaction, the request is passed towards the controller.<br/>3) Controller is responsible for passing the request to appropriate action.<br/>4) Action is responsible for calling a function in Model which has all business logic implemented.<br/>5) Response from the model layer is received back by the action which then passes it towards the view where user is able to see the response.<br/>','What\'s the flow of requests in Struts based applications?',4),(122,'Controller uses a configuration file \"struts-config.xml\" file to get all mapping information to decide which action to use for routing of user\'s request','Which file is used by controller to get mapping information for request routing?',4),(123,'In Struts, Action Class acts as a controller and performs following key tasks:<br/><br/>1) After receiving user request, it processes the user\'s request.<br/>2) Uses appropriate model and pulls data from model (if required).<br/>3) Selects proper view to show the response to the user.<br/>','What\'s the role of Action Class in Struts?',4),(124,'Validator Framework is used for form data validation. This framework provides two types of validations:<br/><br/>1) Client Side validation on user\'s browser<br/>2) Server side validation<br/>','What are the two types of validations supported by Validator FrameWork?',4),(125,'In order to use Struts framework, we only need to add Struts.Jar file in our development environment. Once jar file is available in the CLASSPATH, we can use the framework and develop Strut based applications.','What are the steps of Struts Installation?',4),(126,'n Struts, action class provides two important methods which can be used to avoid duplicate form submissions.</br/>saveToken() method of action class generates a unique token and saves it in the user\'s session. isTokenValid() method is used then used to check uniqueness of tokens.','How duplicate form submission can be controlled in Struts?',4),(127,'Bean Tag Library is a Struts library which can be used for accessing Java beans.','In Struts, how can we access Java beans and their properties?',4),(128,'For JSP configuration details, Web.xml file is used.','Which configuration file is used for storing JSP configuration information in Struts?',4),(129,'In Validation.xml, we define validation rules for any specific Java bean while in validator-rules.xml file, standard and generic validation rules are defined.','What\'s the difference between validation.xml and validator-rules.xml files in Struts Validation framework?',4),(130,'To display all validation errors based on the validation rules defined in validation.xml file, we use &lt;html:errors /&gt; tag in our JSP file.','How can we display all validation errors to user on JSP page?',4),(131,'DynaActionForm is a special type of actionForm class (sub-class of ActionForm Class) that\'s used for dynamically creating form beans. It uses configuration files for form bean creation.','What is DynaActionForm?',4),(132,'Both are same and there is no difference between them.','What is the difference between Jakarta Struts and Apache Struts? Which one is better to use?',4),(133,'Struts.xml file is one the key configuration files of Struts framework which is used to define mapping between URL and action. When a user\'s request is received by the controller, controller uses mapping information from this file to select appropriate action class.','What is the use of Struts.xml configuration file?',4),(134,'Use of logic tags in Struts helps in writing a clean and efficient code at presentation layer without use of scriptlets.','What is the significance of logic tags in Struts?',4),(135,'1. Request Scope: Formbean values are available in the current request only<br/>2. Session Scope: Formbean values are available for all requests in the current session.','What are the two scope types for formbeans?',4),(136,'To group multiple related actions in one group, we can use DispatcherAction class.','How can we group related actions in one group in Struts?',4),(137,'The best scenario to use SwitchAction class is when we have a modular application with multiple modules working separately. Using SwitchAction class we can switch from a resource in one module to another resource in some different module of the application.','When should we use SwtichAction?',4),(138,'Following Steps are required for Struts1 to Struts2 migration:<br/><br/>1) Move Struts1 actionForm to Struts2 POJO.<br/>2) Convert Struts1 configuration file (struts-config.xml) to Struts2 configuration file (struts.xml)','What steps are required to for an application migration from Struts1 to Struts2?',4),(139,'For validation of populated properties, validate() method of ActionForm class is used before handling the control of formbean to Action class.','How properties of a form are validated in Struts?',4),(140,'reset method of actionForm class is used to clear the values of a form before initiation of a new request.','What is the use of reset method of ActionForm class?',4),(141,'resourcebundle.properties file is used to define specific error messages in key value pairs for any possible errors that may occur in the code.<br/>This approach helps to keep the code clean as developer doesn\'t need to embed all error messages inside code.','What is the use of resourcebundle.properties file in Struts Validation framework?',4),(142,'Struts framework works on the concept of centralized control approach and the whole application is controlled by a single servlet controller. Hence, we require only one servlet controller in a servlet application.','How many servlet controllers are used in a Struts Application?',4),(143,'Struts support all types of models including Java beans, EJB, CORBA. However, Struts doesn\'t have any in-built support for any specific model and it\'s the developer\'s choice to opt for any model.','Which model components are supported by Struts?',4),(144,'IncludeAction is action class provided by Struts which is useful when an integration is required between Struts and Servlet based application.','When it\'s useful to use IncludeAction?',4),(145,'Yes Struts are thread safe. In Struts, a new servlet object is not required to handle each request; rather a new thread of action class object is used for each new request.','Is Struts thread safe?',4),(146,'Resource files (.properties files) can be used in Struts by adding following configuration entry in struts-config.xml file:<br/><br/>&lt;message-resources parameter=\"com.login.struts.ApplicationResources\"/&gt;','What configuration changes are required to use resource files in Struts?',4),(147,'Struts provide a separate tag library (Nested Tag Library) for this purpose. Using this library, we can nest the beans in any Struts based application.','How nested beans can be used in Struts applications?',4),(148,'Following are the core classes provided by Struts Framework:<br/><br/>1) Action Class<br/>2) ActionForm Class<br/>3) ActionMapping Class<br/>4) ActionForward Class<br/>5) ActionServlet Class','What are the Core classes of Struts Framework?',4),(149,'Although Struts framework is based on J2EE technologies like JSP, Java Beans, Servlets etc but it\'s not a part of J2EE standards.','Is Struts Framework part of J2EE?',4),(150,'In Struts framework, actionServlet acts as a controller and all the requests made by users are controlled by this controller. ActionServlet is based on singleton design patter as only one object needs to be created for this controller class. Multiple threads are created later for each user request.','Why ActionServlet is singleton in Struts?',4),(151,'In Struts, we can use any of the following technologies in view layer:<br/><br/>1) JSP<br/>2) HTML<br/>3) XML/XSLT<br/>4) WML Files<br/>5) Velocity Templates<br/>6) Servlets<br/>','Which technologies can be used at View Layer in Struts?',4),(152,'MVC is a design pattern. MVC stands for Model, View and Controller. Model represents data, view represents presentation and controller acts as an interface between model and view.<br/><br/>1) <b>Model</b> The model represents the state (data) and business logic of the application.<br/>2) <b>View</b> The view module is responsible to display data i.e. it represents the presentation.<br/>3) <b>Controller</b> The controller module acts as an interface between view and model. It intercepts all the requests i.e. receives input and commands to Model / View to change accordingly.','What is MVC?',4),(153,'It\'s the job of handlers to transfer the requests to appropriate models as they are bound to the model layer of MVC architecture. Handlers use mapping information from configuration files for request transfer.','What is the role of a handler in MVC based applications?',4),(154,'Interceptor is an object i.e. invoked at preprocessing and postprocessing of a request. It is pluggable.','What is interceptor?',4),(155,'1) public void init()<br/>2) public void intercept(ActionInvocation ai)<br/>3) public void destroy()<br/>','What are the life cycle methods of interceptor?',4),(156,'ValueStack is a stack that contains application specific object such as action and other model.','What is ValueStack?',4),(157,'ActionContext is a container in which action is executed. It is unique per thread.','What is ActionContext?',4),(158,'ActionInvocation is responsible to invoke action. It holds action and interceptor objects.','What is ActionInvocation?',4),(159,'OGNL is an expression language of struts2. It stands for Object Graph Navigation Language.','What is OGNL?',4),(160,'1) SUCCESS<br/>2) ERROR<br/>3) INPUT<br/>4) LOGIN<br/>5) NONE','What are the 5 constants of Action interface?',4),(161,'The params (also known as parameters) interceptor sets all parameters on the ValueStack.','What does params interceptor?',4),(162,'The execAndWait (also known as ExecuteAndWait) interceptor is used to display intermediate or wait result.','What does execAndWait interceptor?',4),(163,'The modelDriven interceptor makes other model as the default object of ValueStack. By default, action is the default object of ValueStack.','What does modelDriven interceptor?',4),(164,'The validation interceptor performs validation checks and adds field-level and action-level error messages.','What does validation interceptor?',4),(165,'1) requiredstring<br/>2) stringlength<br/>3) email<br/>4) date<br/>5) int<br/>6) double<br/>7) url<br/>8) regex','What are the bundled validators?',4),(166,'In plain-validator one validator can be applied to many fields. In field-validator many validators can be applied to single field.','What is the difference between plain-validator and field-validator?',4),(167,'The jsonValidation interceptor is used to perform asynchronous validation. It works with validation and workflow interceptors.','What is the use of jsonValidation?',4),(168,'Aware interfaces are used to store information in request, session, application and response objects. The 4 aware interfaces are given below:<br/><br/>1) ServletRequestAware<br/>2) ServletResponseAware<br/>3) SessionAware<br/>4) ServletContextAware<br/>','What are the aware interfaces in struts2?',4),(169,'The i18n interceptor is used to provide multi lingual support for struts application.','What does i18n interceptor?',4),(170,'ORM stands for object/relational mapping. ORM is the automated persistence of objects in a Java application to the tables in a relational database.','What is ORM?',5),(171,'An ORM solution consists of the followig four pieces:<br/>1) API for performing basic CRUD operations<br/>2) API to express queries refering to classes<br/>3) Facilities to specify metadata<br/>4) Optimization facilities : dirty checking,lazy associations fetching<br/>','What does ORM consists of?',5),(172,'The ORM levels are:<br/>1) Pure relational (stored procedure.)<br/>2) Light objects mapping (JDBC)<br/>3) Medium object mapping<br/>4) Full object Mapping (composition,inheritance, polymorphism, persistence by reachability)<br/>','What are the ORM levels?',5),(173,'Hibernate is a pure Java object-relational mapping (ORM) and persistence framework that allows you to map plain old Java objects to relational database tables using (XML) configuration files.Its purpose is to relieve the developer from a significant amount of relational data persistence-related programming tasks.','What is Hibernate?',5),(174,'The main advantage of ORM like hibernate is that it shields developers from messy SQL. Apart from this, ORM provides following benefits:<br/><b>1) Improved productivity:</b> High-level object-oriented API, Less Java code to write, No SQL to write<br/><b>2) Improved performance:</b> Sophisticated caching, Lazy loading, Eager loading<br/><b>3) Improved maintainability:</b> A lot less code to write<br/><b>4) Improved portability:</b> ORM framework generates database-specific SQL for you','Why do you need ORM tools like hibernate?',5),(175,'Hibernate simplifies:<br/>1) Saving and retrieving your domain objects<br/>2) Making database column and table name changes<br/>3) Centralizing pre save and post retrieve logic<br/>4) Complex joins for retrieving related items<br/>5) Schema creation from object model','What Does Hibernate Simplify?',5),(176,'The most common methods of Hibernate configuration are:<br/>1) Programmatic configuration<br/>2) XML configuration (hibernate.cfg.xml)','What are the most common methods of Hibernate configuration?',5),(177,'The core interfaces of Hibernate framework are:<br/>1) Configuration<br/>2) SessionFactory<br/>3) Session<br/>4) Query<br/>5) Criteria<br/>6) Transaction','What are the core interfaces of Hibernate?',5),(178,'The Session interface is the primary interface used by Hibernate applications. It is a single-threaded, short-lived object representing a conversation between the application and the persistent store. It allows you to create query objects to retrieve persistent objects.<br/><br/><b>Session session = sessionFactory.openSession();</b><br/><br/>Session interface role:<br/>Wraps a JDBC connection<br/>Factory for Transaction<br/>Holds a mandatory (first-level) cache of persistent objects, used when navigating the object graph or looking up objects by identifier','What role does the Session interface play in Hibernate?',5),(179,'It maintains a connection between hibernate application and database.<br/>It provides methods to store, update, delete or fetch data from the database such as persist(), update(), delete(), load(), get() etc.<br/>It is a factory of Query, Criteria and Transaction i.e. it provides factory methods to return these instances.<br/>','What is Session?',5),(180,'No, Session is not a thread-safe object, many threads can access it simultaneously. In other words, you can share it between threads.','Is Session a thread-safe object?',5),(181,'<b>save():</b> returns the identifier (Serializable) of the instance.<br/><b>persist():</b> return nothing because its return type is void.<br/><br/><b>save():</b> Syn: public Serializable save(Object o)<br/><b>persist():</b> Syn: public void persist(Object o)<br/>','What is the difference between session.save() and session.persist() method?',5),(182,'The application obtains Session instances from a SessionFactory. There is typically a single SessionFactory for the whole application?reated during application initialization. The SessionFactory caches generate SQL statements and other mapping metadata that Hibernate uses at runtime. It also holds cached data that has been read in one unit of work and may be reused in a future unit of work<br/><br/>SessionFactory sessionFactory = configuration.buildSessionFactory();','What role does the SessionFactory interface play in Hibernate?',5),(183,'Yes, SessionFactory is a thread-safe object, many threads cannot access it simultaneously.','Is SessionFactory a thread-safe object?',5),(184,'The general flow of Hibernate communication with RDBMS is :<br/>1) Load the Hibernate configuration file and create configuration object. It will automatically load all hbm mapping files<br/>2) Create session factory from configuration object<br/>3) Get one session from this session factory<br/>4) Create HQL Query<br/>5) Execute query to get list containing Java objects<br/>','What is the general flow of Hibernate communication with RDBMS?',5),(185,'Hibernate offers a query language that embodies a very powerful and flexible mechanism to query, store, update, and retrieve objects from a database. This language, the Hibernate query Language (HQL), is an object-oriented extension to SQL.','What is Hibernate Query Language (HQL)?',5),(186,'1) First we need to write Java domain objects (beans with setter and getter).<br/>2) Write hbm.xml, where we map java class to table and database columns to Java class variables.<br/>','How do you map Java Objects with Database tables?',5),(187,'The differences between get() and load() methods are given below.<br/><br/><b>get():</b> Returns null if object is not found.<br/><b>load():</b> Throws ObjectNotFoundException if object is not found.<br/><br/><b>get():</b> get() method always hit the database.<br/><b>load():</b> load() method doesn\'t hit the database.<br/><br/><b>get():</b> It returns real object not proxy.<br/><b>load():</b> It returns proxy object.<br/><br/><b>get():</b> It should be used if you are not sure about the existence of instance.<br/><b>load():</b> It should be used if you are sure that instance exists.<br/>','What is the difference between get and load method?',5),(188,'Use update() if you are sure that the session does not contain an already persistent instance with the same identifier, and merge() if you want to merge your modifications at any time without consideration of the state of the session.','What is the difference between and merge and update ?',5),(189,'There are 3 states of object (instance) in hibernate.<br/><br/><b>Transient:</b> The object is in transient state if it is just created but has no primary key (identifier) and not associated with session.<br/><b>Persistent:</b> The object is in persistent state if session is open, and you just saved the instance in the database or retrieved the instance from the database.<br/><b>Detached:</b> The object is in detached state if session is closed. After detached state, object comes to persistent state if you call lock() or update() method.<br/>','What are the states of object in hibernate?',5),(190,'There are 3 ways of inheritance mapping in hibernate.<br/>1) Table per hierarchy<br/>2) Table per concrete class<br/>3) Table per subclass<br/>','What are the inheritance mapping strategies?',5),(191,'If you mark a class as mutable=\"false\", class will be treated as an immutable class. By default, it is mutable=\"true\".','How to make a immutable class in hibernate?',5),(192,'There can be 4 types of association mapping in hibernate.1) One to One<br/>2) One to Many<br/>3) Many to One<br/>4) Many to Many','How many types of association mapping are possible in hibernate?',5),(193,'No, collection mapping can only be performed with One-to-Many and Many-to-Many','Is it possible to perform collection mapping with One-to-One and Many-to-One?',5),(194,'Lazy loading in hibernate improves the performance. It loads the child objects on demand.<br/><br/>Since Hibernate 3, lazy loading is enabled by default, you don\'t need to do lazy=\"true\". It means not to load the child objects when parent is loaded.','What is lazy loading in hibernate?',5),(195,'Hibernate Query Language is known as an object oriented query language. It is like structured query language (SQL).<br/><br/>The main advantage of HQL over SQL is:<br/><br/>1) You don\'t need to learn SQL<br/>2) Database independent<br/>3) Simple to write query<br/>','What is HQL (Hibernate Query Language)?',5),(196,'First Level Cache is associated with Session.<br/>Second Level Cache is associated with SessionFactory.<br/><br/>It is enabled by default.<br/>It is not enabled by default.<br/>','What is the difference between first level cache and second level cache?',5),(197,'cascade - enable operations to cascade to child entities.<br/>cascade=\"all|none|save-update|delete|all-delete-orphan\"<br/>inverse - mark this collection as the \"inverse\" end of a bidirectional association.<br/>inverse=\"true|false\" <br/>Essentially \"inverse\" indicates which end of a relationship should be ignored, so when persisting a parent who has a collection of children, should you ask the parent for its list of children, or ask the children who the parents are?','Define cascade and inverse option in one-many mapping?',5),(198,'org.springframework.orm.hibernate.HibernateTemplate is a helper class which provides different methods for querying/retrieving data from the database. It also converts checked HibernateExceptions into unchecked DataAccessExceptions.','Define HibernateTemplate?',5),(199,'The benefits of HibernateTemplate are :<br/>1) HibernateTemplate, a Spring Template class simplifies interactions with Hibernate Session.<br/>2) Common functions are simplified to single method calls.<br/>3) Sessions are automatically closed.<br/>4) Exceptions are automatically caught and converted to runtime exceptions.<br/>','What are the benefits does HibernateTemplate provide?',5),(200,'Using Hibernate SQL Dialects , we can switch databases. Hibernate will generate appropriate hql queries based on the dialect defined.','How do you switch between relational databases without code changes?',5),(201,'In Hibernate configuration file set as follows: <br/>&lt;property name=\"show_sql\"&gt;true&lt;/property&gt;','If you want to see the Hibernate generated SQL statements on console, what should we do?',5),(202,'The properties that are not mapped to a column, but calculated at runtime by evaluation of an expression are called derived properties. The expression can be defined using the formula attribute of the element.','What are derived properties?',5),(203,'<b>Sorted collection</b> A sorted collection is sorting a collection by utilizing the sorting features provided by the Java collections framework. The sorting occurs in the memory of JVM which running Hibernate, after the data being read from database using java comparator.<br/><b>Order collection</b> Order collection is sorting a collection by specifying the order-by clause for sorting this collection when retrieval.<br/><br/><b>Sorted collection</b> If your collection is not large, it will be more efficient way to sort it.<br/><b>Order collection</b> If your collection is very large, it will be more efficient way to sort it.<br/>','What is the difference between sorted and ordered collection in hibernate?',5),(204,'1) Bag<br/>2) Set<br/>3) List<br/>4) Array<br/>5) Map','What are the Collection types in Hibernate ?',5),(205,'The proxy attribute enables lazy initialization of persistent instances of the class. Hibernate will initially return CGLIB proxies which implement the named interface. The actual persistent object will be loaded when a method of the proxy is invoked.','What is Hibernate proxy?',5),(206,'By mapping the property with access=\"field\" in Hibernate metadata. This forces hibernate to bypass the setter method and access the instance variable directly while initializing a newly loaded object.','How can Hibernate be configured to access an instance variable directly and not through a setter method ?',5),(207,'A fetching strategy is the strategy Hibernate will use for retrieving associated objects if the application needs to navigate the association. Fetch strategies may be declared in the O/R mapping metadata, or over-ridden by a particular HQL or Criteria query.','What do you mean by fetching strategy ?',5),(208,'Automatic dirty checking is a feature that saves us the effort of explicitly asking Hibernate to update the database when we modify the state of an object inside a transaction.','What is automatic dirty checking?',5),(209,'Hibernate uses a sophisticated algorithm to determine an efficient ordering that avoids database foreign key constraint violations but is still sufficiently predictable to the user. This feature is called transactional write-behind.','What is transactional write-behind?',5),(210,'Callback interfaces allow the application to receive a notification when something interesting happens to an object for example, when an object is loaded, saved, or deleted. Hibernate applications don\'t need to implement these callbacks, but they\'re useful for implementing certain kinds of generic functionality.','What are Callback interfaces?',5),(211,'Spring is set to be a framework which helps Java programmer for development of code and it provides IOC container, Dependency Injector, MVC flow and many other APIs for the java programmer.','What is Spring?',6),(212,'Following are the advantages of spring framework:<br/><br/>&#8226; Predefined Templates<br/>&#8226; Loose Coupling<br/>&#8226; Easy to test<br/>&#8226; Lightweight<br/>&#8226; Fast Development<br/>&#8226; Powerful Abstraction<br/>&#8226; Declarative support<br/>','What are the advantages of spring framework?',6),(213,'Following are the benefits of Spring framework:<br/><br/>&#8226; Extensive usage of Components<br/>&#8226; Reusability<br/>&#8226; Decoupling<br/>&#8226; Reduces coding effort by using pattern implementations such as singleton, factory, service locator etc.<br/>&#8226; Removal of leaking connections<br/>&#8226; Declarative transaction management<br/>&#8226; Easy to integrate with third party tools and technologies.<br/>','What are the benefits of Spring Framework?',6),(214,'&#8226; AOP module (Aspect Oriented Programming)<br/>&#8226; JDBC abstraction and DAO module<br/>&#8226; The Core container module<br/>&#8226; MVC framework module<br/>&#8226; Application context module<br/>&#8226; O/R mapping integration module (Object/Relational)<br/>&#8226; Web module<br/>','Name the various modules used in spring framework?',6),(215,'Spring framework is needed because it is -<br/><br/>&#8226; A light weight framework for building Java applications. This means any type of Java application: standalone java, JEE applications, Web applications etc.<br/>&#8226; Spring provides IOC  (Inversion of Control) <br/>&#8226; Spring provides DI (Dependency Injection) Capabilities<br/>&#8226; Spring provides declarative programming with AOP (Aspect Oriented Programming)<br/>','Why Spring framework is needed?',6),(216,'IOC (Inversion of Control pattern) is also known as dependency injection. IOC a design pattern by which Loose coupling is achieved in Spring, with the Inversion of Control technique.It removes the dependency from the program.The objects give their dependencies instead of creating or looking for dependent objects.','What is IOC or Dependency Injection?',6),(217,'The major benefits of dependency injection or IOC are that it reduces the amount of coding required for the application. This allows the testing of the application to be done quickly and easily as no JNDI lookup mechanism or singletons are required. IOC containers also support lazy loading and eager installation of services.','Write the benefits of using IOC?',6),(218,'There are two types of IOC containers in spring framework:<br/><br/>&#8226; <b>Constructor-based dependency injection:</b> Constructor-based DI is accomplished when the container invokes a class constructor with a number of arguments, each representing a dependency on other class.<br/><br/>&#8226; <b>Setter-based dependency injection:</b> Setter-based DI is accomplished by the container calling setter methods on your beans after invoking a no-argument constructor or no-argument static factory method to instantiate your bean.','What are the different types of IOC?',6),(219,'The Spring IOC is responsible for creating the objects, managing them (with dependency injection (DI)), wiring them together, configuring them, as also managing their complete lifecycle.','What is IOC Container?',6),(220,'The role of IOC container in spring is to instantiate, configure and assemble the objects.','What is the role of IOC container in spring?',6),(221,'The types of IOC containers are:<br/><br/>&#8226; <b>BeanFactory Container:</b> This is the simplest container providing basic support for DI. It is a Lightweight container which loads bean definitions and manages your beans. The BeanFactory is usually preferred where the resources are limited like mobile devices or applet based applications. Beans are configured using XML file and manage singleton defined bean. It also removes adhoc singletons and factories. It is also responsible for life cycle methods and injects dependencies.<br/><br/>&#8226; <b>ApplicationContext Container:</b> This container adds more enterprise-specific functionality such as the ability to resolve textual messages from a properties file and the ability to publish application events to interested event listeners.','What are the types of IOC containers?',6),(222,'The difference between ApplicationContext and BeanFactory:<br/><br/>1. ApplicationContext is the advanced container.<br/>1. BeanFactory is the basic container.<br/><br/>2. ApplicationContext extends the BeanFactory interface<br/>2. BeanFactory does not extends the BeanFactory interface<br/><br/>3. ApplicationContext allows more than one config files to exist.<br/>3. BeanFactory only permits one config files to exist.<br/><br/>4. ApplicationContext can print events to beans registered as listeners.<br/>4. BeanFactory cannot print events to beans registered as listeners.','What is the difference between ApplicationContext and BeanFactory?',6),(223,'Bean Factory is core of the spring framework and, it is a Lightweight container which loads bean definitions and manages your beans. Beans are configured using XML file and manage singleton defined bean. It is also responsible for life cycle methods and injects dependencies. It also removes adhoc singletons and factories.','What is BeanFactory?',6),(224,'The most commonly used BeanFactory implementation is the XmlBeanFactory class. This container reads the configuration metadata from an XML file and uses it to create a fully configured system or application.','Give an example of BeanFactory implementation?',6),(225,'The common implementations of the ApplicationContext are:<br/><br/>1. FileSystemXmlApplicationContext<br/>2. ClassPathXmlApplicationContext<br/>3. WebXmlApplicationContext<br/>','What are the common implementations of the ApplicationContext?',6),(226,'There are two important methods of Bean life cycle:<br/><br/> &#8226; Setup:  called when bean is loaded into container<br/>&#8226; Teardown:  called when bean is unloaded into container<br/>','What are the methods of bean life cycle?',6),(227,'<blockquote>&lt;?xml version=\'1.0\' encoding=\'UTF-8\'?&gt;<br/>&lt;!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN//EN\"&gt;<br/>&lt;beans&gt;<br/>&lt;bean iqid=\"foo\"/&gt;br/>&lt;bean iqid=\"bar\"/&gt;<br/>&lt;/beans&gt;<br/></blockquote><br/>The bean tag has an iqid attribute which stores the bean name and a class attributes which specifies the full class name.','How is a bean added to a Spring application?',6),(228,'The different bean scopes in spring are:<br/><br/><b>Singleton:</b> The bean instance will be only once and same instance will be returned by the IOC container.<br/><b>Prototype:</b> The bean instance will be created each time when requested.<br/><b>Request:</b> The bean instance will be created per HTTP request.<br/><b>Session:</b> The bean instance will be created per HTTP session.<br/><b>GlobalSession:</b> The bean instance will be created per HTTP global session.<br/>','What are the different bean scopes in spring?',6),(229,'No, singleton beans are not thread-safe in Spring framework.','Is Singleton beans are thread safe in Spring Framework?',6),(230,'The default scope of bean is Singleton for Spring framework.','What is the default scope of bean in Spring framework?',6),(231,'1. Instantiate<br/>2. Populate properties<br/>3. Set Bean Name<br/>4. Set Bean factory<br/>5. Pre Initialization<br/>6. Initialize beans<br/>7. Post Initialization<br/>8. Ready to use<br/>9. Destroy<br/>','What is the lifecycle of bean in Spring framework?',6),(232,'Core container module is responsible for the basic functionality of the spring framework. The whole Spring framework is built with this module as a base.','Write about Core container module?',6),(233,'The Spring web module is built on the application context module, providing a context that is appropriate for web-based applications. This module also contains support for several web-oriented tasks such as transparently handling multipart requests for file uploads and programmatic binding of request parameters to your business objects. This group comprises of Web, Web-Servlet, Web-Struts and Web-Portlet. These modules provide support to create web application.','Explain the web module?',6),(234,'The Spring web MVC framework provides model-view-controller architecture and ready components that can be used to develop flexible and loosely coupled web applications. The MVC pattern results in separating the different aspects of the application (input logic, business logic, and UI logic), while providing a loose coupling between these elements.','Explain Spring MVC module?',6),(235,'Autowiring is used to build relationships between the collaborating beans. Spring container can automatically resolve collaborators for beans.','What is Auto Wiring?',6),(236,'Autowiring has five different modes:<br/><br/>&#8226; no: no autowire<br/>&#8226; byName : Autowiring that can be done by property name<br/>&#8226; byType : property type as autowired<br/> &#8226; constructor: It is similar to byType and it is property is in constructor<br/>&#8226; autodetect : Spring is allowed to select autowiring from byType or constructor','What are the different Modes of Autowiring?',6),(237,'The <b>@Controller</b> annotation marks the class as controller class. It is applied on the class.','What does @Controller annotation?',6),(238,'The <b>@Autowired</b> annotation annotation provides more fine-grained control over where and how autowiring should be accomplished. The <b>@Autowired</b> annotation can be used to autowire bean on the setter method just like <b>@Required</b> annotation, constructor, a property or methods with arbitrary names and/or multiple arguments.','What does @Autowired annotation?',6),(239,'There may be a situation when you create more than one bean of the same type and want to wire only one of them with a property, in such case you can use <b>@Qualifier</b> annotation along with<b>@Autowired</b> to remove the confusion by specifying which exact bean will be wired.','What does @Qualifier annotation mean?',6),(240,'The <b>@RequestMapping</b> annotation maps the request with the method. It is applied on the method','What does @RequestMapping annotation mean?',6),(241,'The <b>@Required</b> annotation simply indicates that the affected bean property must be populated at configuration time, through an explicit property value in a bean definition or through autowiring. The container throws BeanInitializationException if the affected bean property has not been populated.','What does @Required annotation mean?',6),(242,'The WebApplicationContext is an extension of the plain ApplicationContext that has some extra features necessary for web applications. It differs from a normal ApplicationContext in that it is capable of resolving themes, and that it knows which servlet it is associated with.','What is WebApplicationContext ?',6),(243,'AOP is an acronym for <b>Aspect Oriented Programming</b>. It is a methodology that divides the program logic into pieces or parts or concerns.','What is AOP module?',6),(244,'There are 3 AOP implementation:<br/><br/>1. Spring AOP<br/>2. Apache AspectJ<br/>3. JBoss AOP<br/>','What are the AOP implementation?',6),(245,'The advantages of spring AOP are:<br/><br/>1. It increases the modularity and the key unit is Aspect.<br/><br/>2. AOP breaks the program logic into distinct parts<br/><br/>3. It provides the pluggable way to dynamically add the additional concern before, after or around the actual logic.','What are the advantages of spring AOP?',6),(246,'The AOP terminology are:<br/><br/>1. JoinPoint<br/>2. Advice<br/>3. Pointcut<br/>4. Aspect<br/>5. Introduction<br/>6. Target Object<br/>7. Interceptor<br/>8. AOP Proxy<br/>9. Weaving<br/>','What are the AOP terminology?',6),(247,'The point where an aspect can be introduced in the application is known as a joinpoint. This point could be a field being modified, a method being called or even an exception being thrown. At these points, the new aspect\'s code can be added to introduce a new behavior to the application.<br/><br/>Aspect code can be inserted at this point into normal flow of application to change the current behavior.','What is a Joinpoint?',6),(248,'This is the actual action to be taken either before or after the method execution. This is actual piece of code that is invoked during program execution by Spring AOP framework.Advice represents action taken by aspect','What is Advice?',6),(249,'There are 5 types of advices in spring AOP.<br/><br/>&#8226; <b>Before Advice:</b> Run advice before the a method execution.<br/><br/>&#8226; <b>After Advice:</b> Run advice after the a method execution regardless of its outcome.<br/><br/>&#8226; <b>After Returning Advice:</b> Run advice after the a method execution only if method completes successfully.<br/><br/>&#8226; <b>Throws Advice:</b> Run advice after the a method execution only if method exits by throwing an exception.<br/><br/>&#8226; <b>Around Advice:</b> Run advice before and after the advised method is invoked.','What are the types of advice in AOP?',6),(250,'This is a set of one or more joinpoints where an advice should be executed.','What is Pointcut?',6),(251,'Aspect is a class in spring AOP that contains advices and joinpoints','What is Aspect?',6),(252,'An introduction allows you to add new methods or attributes to existing classes.','What is Introduction?',6),(253,'Target Object is a proxy object that is advised by one or more aspects.','What is Target Object?',6),(254,'Interceptor is a class like aspect that contains one advice only.','What is interceptor?',6),(255,'Weaving is a process of linking aspect with other application.','What is weaving?',6),(256,'Autoproxying is used to create proxy automatically for the spring users. It provides following two classes to support this automatic proxy creation:<br/><br/>&#8226; BeanNameAutoProxyCreator<br/>&#8226; DefaultAdvisorAutoProxyCreator<br/>','What is Autoproxying?',6),(257,'Following are the different types of AutoProxying:<br/><br/>&#8226; BeanNameAutoProxyCreator<br/>&#8226; DefaultAdvisorAutoProxyCreator<br/>&#8226; Metadata autoproxying<br/>','What are the different types of AutoProxying?',6),(258,'Following are the points where weaving can be applied:<br/><br/>&#8226; Compile Time<br/>&#8226; Class load Time<br/>&#8226; Runtime','In what points, can weaving be applied?',6),(259,'PreparedStatementCreator is one of the most commonly used interfaces for writing data to the database.  createPreparedStatement() is a method that can be used to create and return PreparedStatement from the Connection argument, and exception handling is automatically taken care of. When this interface is implemented, a different interface SqlProvider can also be implemented which has a method called getSql(). This method is useful for providing sql strings to the JdbcTemplate. It does not handle SQLExceptions.','What is called PreparedStatementCreator?',6),(260,'SQLProvider has only one method called getSql()and it is implemented using PreparedStatementCreator implementers. It is mainly used for debugging.','What is SQLProvider?',6),(261,'BatchPreparedStatementSetter is used to update more than a single row in one go, they can use BatchPreparedStatementSetter. This interface provides two methods they are<br/><blockquote>&#8226; setValues( PreparedStatement ps, int i) throws SOL exception</blockquote><blockquote>&#8226; int getBatchSize</blockquote><br/>','Write about BatchPreparedStatementSetter?',6),(262,'If JDBC is used with the template class called JdbcTemplate, it gives a better performance.','What is the better method of using JDBC in Spring?',6),(263,'DAO is used to provide integration of Java database connectivity and Object relational mapping objects. DAO is spring framework provides connection for JDBC, hibernate, JDO, JPA, Common client interface and Oracle.','Describe about DAO in Spring framework?',6),(264,'In spring DAO classes only throws SQLException.','What exceptions do the DAO classes, use in Spring throw?',6),(265,'The database code can be kept clean and simple by using the DAO module. This helps in preventing problems that rise because of poor handling of closures of database resources. Also, the DAO module utilizes the AOP module to enable objects in the Spring application to use transaction management services.','Explain the advantages of using DAO module?',6),(266,'DataAccessException is a RuntimeException. It is an Unchecked Exception. The user cannot be forced to handle these kinds of exceptions.','What is DataAccessException?',6),(267,'Spring includes several applications of Bean factory. Out of these, <blockquote>org.springframework.beans.factory.xml.XmlBeanFactory</blockquote> is a very important one. It loads the beans on the basis of the definitions stored in an XML file. For the creation of an XmlBeanFactory, a java.io.InputStream is passed to the constructor. The InputStream provides the XML to the factory. For example, for retrieval of the bean, the <b>getBean()</b> method is called by passing the name of the desired bean.<br/><br/><blockquote>MyBean helloBean = (MyBean) factory.getBean(\"helloBean\");</blockquote>','What is XMLBeanFactory?',6),(268,'It is the <b>DataAccessException</b> given by <blockquote>org.springframework.dao.DataAccessException</blockquote>','Name the Exception class which is connected to the exceptions thrown by the applications?',6),(269,'The tag, bean, has two useful attributes which can be used to define special initialization and destruction methods.<br/><br/>For Example, two new methods forSetup and forTeardown can be added to the Foo class in the following way:<br/><blockquote>&lt;beans&gt;<br/>&lt;bean iqid=\"bar\" init-method=\"forSetup\" destroy=\"forTeardown\"/&gt;<br/>&lt;/beans&gt;<blockquote>','How can the default lifecycle methods of beans be nullified?',6),(270,'Cross cutting concern: It is a concern which is applicable throughout the application and it affects the entire application. E.g Security, logging and data transfer are the concerns which are needed in almost every module of an application.<br/><br/>Concern: Concern is a behavior that we want to have in a module of an application. Issues in which we are interested defines our concern.','What is cross cutting concern and concern in spring AOP?',6),(271,'Following are the classes that are used to control database connection:<br/><br/>&#8226; Data Source Utils<br/>&#8226; SmartData Source<br/>&#8226; AbstractData Source<br/>&#8226; SingleConnection DataSource<br/>&#8226; DriverManager DataSource<br/>&#8226; TransactionAware DataSourceProxy<br/>&#8226; DataSource TransactionManager<br/>','What classes are used to Control the database connection?',6),(272,'The RowCallbackHandler is called for each row in ResultSet and is used to read values from the ResultSet.','Explain the RowCallbackHandler in Spring?',6),(273,'Transaction management supported by Spring are:<br/><br/>&#8226; Declarative transaction management.<br/>&#8226; Programmatic transaction management.<br/>','Name the types of transaction management that are supported by Spring?',6),(274,'When only a small amount of transactional operations is there, it is advised to use Programmatic transaction management. But if there is a big amount of transactional operations to be taken care of, declarative transaction management is preferred.','When are declarative and programmatic transaction management used?',6),(275,'Declarative transaction management has minimum impact on the application code and, therefore, is an idealistic lightweight container.','Why is declarative transaction management preferred in Spring?',6),(276,'Spring configuration file is an XML file and it contains class information. It also describes how these classes are configured and interact with each other.','What is called spring configuration file?',6),(277,'<b>Singleton Bean</b> - Single bean definition to a single object instance per Spring IOC container<br/><br/><b>Prototype Bean</b> - Single bean definition to any number of object instances per Spring IOC Container','What is difference between singleton and prototype bean?',6),(278,'The bean tag has an attribute called <b>\"singleton\"</b>. The bean is singleton if its value is <b>\"TRUE\"</b>, otherwise the bean is a prototype.','How can beans be made singleton or prototype?',6),(279,'Metadata Autoproxying can be performed inspiring which can be driven by metadata. This is determined by source level attributes and keeps metadata inside the source code.<br/><br/>This maintains metadata in one place and mainly used for declarative transaction support.','What is Metadata Autoproxying?',6),(280,'\'Throws Advice\' define the behavior when an exception occurs. It is an interface and it has no methods which need to be implemented.<br/><br/>A class that implements this interface should have method with this signature:<br/><br/><blockquote>&#8226; Void samplethrow (Throw table t)<br/><br/></blockquote><blockquote>&#8226; Void samplethrow(Method m, Object[] o, Object target, Throw tablet)</blockquote>','What is \'Throws advice\' in Spring?',6),(281,'The various custom editors provided by the Spring Framework are:<br/><br/>&#8226; PropertyEditor<br/>&#8226; URLEditor<br/>&#8226; ClassEditor<br/>&#8226; CustomDateEditor<br/>&#8226; FileEditor<br/>&#8226; LocaleEditor<br/>&#8226; StringArrayPropertyEditor<br/>&#8226; StringTrimmerEditor<br/>','What are the various editors used in spring work?',6),(282,'Hibernate can be accessed in the following two ways:<br/><br/>&#8226; By IOC with a Callback and HibernateTemplate.<br/>&#8226; By applying an AOP Interceptor and broadening the HibernateDaoSupport.<br/>','How is Hibernate accessed using the Spring framework?',6),(283,'Following are the channels supported by spring version 2.0:<br/><br/>&#8226; Pollable Channel<br/>&#8226; Subscribable Channel<br/>&#8226; PublishSubscribe Channel<br/>&#8226; Queue Channel<br/>&#8226; Priority Channel<br/>&#8226; Rendezvous Channel<br/>&#8226; Direct Channel<br/>&#8226; Executor Channel<br/>&#8226; Scoped Channel<br/>','What are the various Channels supported by Spring 2.0?',6),(284,'There are two ways to access hibernate using spring:<br/><br/>&#8226; Inversion of Control with a Hibernate Template and Callback<br/>&#8226; Extending HibernateDAOSupport and Applying an AOP Interceptor node.<br/>','What are all the ways to access Hibernate by using Spring?',6),(285,'There are two options for struts application that can be integrated with spring:<br/><br/>Configuration of Spring to manage beans using ContextLoader plugin and set their dependencies in a spring context file<br/><br/>Grab spring managed beans explicitly using agetwebapplicationcontext()<br/>','How struts application can be integrated with spring?',6),(286,'If a bean element is directly embedded in a property tag while wiring beans, then the bean is called Inner Bean. Its drawback is that it cannot be reprocessed.','What is Inner bean? What is the drawback of inner bean?',6),(287,'There are three types of Injection in spring:<br/><br/>&#8226; Setter Injection<br/>&#8226; Constructor Injection<br/>&#8226; Getter or Method Injection<br/>','What are the different types of Injection in spring?',6),(288,'Angular 2 is written entirely in Typescript and meets the ECMAScript 6 specification.\n \nComponent-Based- Angular 2 is entirely component based. Controllers and $scope are no longer used. They have been replaced by components and directives.\n \nDirectives- The specification for directives is considerably simplified, although they are still subject to change. With the @Directive annotation, a directive can be declared.\n \nDependency Injection- Because of the improved dependency injection model in Angular2 there are more opportunities for component / object-based work.\nUse of TypeScript-TypeScript is a typed super set of JavaScript which has been built and maintained by Microsoft and chosen by the AngularJS team for development.\n \nThe presence of types makes the code written in TypeScript less prone to run-time errors. In recent times, the support for ES6 has been greatly improved and a few features from ES7 have been added as well.\n \nGenerics- TypeScript has generics which can be used in the frontend.\nLambdas with TypeScript- In TypeScript, lambdas are available.\nForms and Validations- Forms and validations are an important aspect of frontend development. Within Angular 2 the Form Builder and Control Group are defined.\n \n \n','What are the new features of Angular2?',7),(289,'It can be achieved using the directive i18n. Internationalization (or i18n, which stands for i--n) is the process of adapting software and web applications to multiple languages, allowing their application to be used by multiple language-speaking users.\n \nBy ensuring that your application supports multiple languages, you can reach a broader audience and ensure a smooth user experience for multilingual users.\n \n \n \n','How can we achieve Internationalization using Angular 2 ?',7),(290,'The HTTP Interceptors are used to Set Http Headers Request in Angular 4 using the import from â€œ@angular/common/httpâ€?. The HTTP Interceptors are available in Angular 4.x versions.\n \nThe HTTP Interceptors are not supported in Angular 2. We are creating the HttpClient Injectable class to achieve this. You can see the below examples for set http headers request with and without HTTP interceptors.\n \n \n','HOW TO SET HTTP REQUEST HEADER IN ANGULAR 4 AND ANGULAR 2?',7),(291,'The Interceptors is a common used to set default headers for all responses.\n \n \n','WHAT IS THE USE OF INTERCEPTORS IN ANGULAR 4?',7),(292,'The forRoot is a static method and itâ€™s very easy for developers to configure the modules and the best example is â€“ RouterModule.forRoot.\n \nThe RouterModule also offers a forChild. Itâ€™s also a static method and use to configure the routes of lazy-loaded modules. The forRoot and forChild are the traditional names for methods that configure services in root.\n \n \n','WHAT IS THE FORROOT METHOD?',7),(293,'Angular 2 â€“ ngFor vs. ngForOf\n \nThe [ngFor] is not a type safe\nThe [NgForOf] is a type Safe\nThe [NgFor] directive instantiates a template once per item from iterate\nThe [ngFor] and [ngForOf] are actually the selectors of the [NgForOf] directive and it is not two distinct things\nThe [ngFor] will be works like as collections\nThe [ngForOf] will be works like as generics\n \n \n','WHAT IS THE DIFFERENCE BETWEEN `{`NGFOR`}` AND `{`NGFOROF`}` IN ANGULAR 2?',7),(294,'We can add the declarable classes like components, directives and pipes in the moduleâ€™s declarations list and we can add only â€“ components, directives and pipes classes in the @NgModule.\n \n \n','WHAT CLASSES SHOULD I ADD TO MODULE\'S DECLARATIONS?',7),(295,'We do not declare â€“ Module, Service, objects, strings, numbers, functions, entity models, configurations, business logic, and helper classes in the moduleâ€™s declarations.\n \n \n','WHAT CLASSES SHOULD I NOT ADD TO MODULE\'S DECLARATIONS?',7),(296,'No problem! We can import the same module twice but Angular does not like modules with circular references.\n \nSo do not let Module â€œXâ€? import Module â€œYâ€? which already imports Module â€œXâ€?.\n \nWhen four modules all import Module â€œXâ€?, Angular estimate Module â€œXâ€? once, the first time face it and does not do again. Actually, the modules help us to organize an application into associative blocks of functionality.\n \n \n','WHAT HAPPEN WHEN I IMPORT THE SAME MODULE TWICE IN ANGULAR 4?',7),(297,'Two types of errors â€“\n \nIf the backend returns an unsuccessful response like â€“ 404, 500 and so on\nIf something goes wrong in the client side like -network error etc.\nIn the both cases â€“ We are using HttpErrorResponse and return the useful information on what went wrong in this call!\n \n \n \n','HOW TO GET AND LOG AN ERROR IN ANGULAR 4?',7),(298,'In Annular, the following Steps are used to building authentication and authorization for RESTful APIs and applications. It might help you â€“\n \nThe users send their credentials to the server which is verified by the database credentials. If everything is verified successfully, the JWT is sent back to them.\nThe JWT is saved in the userâ€™s browser in local storage or in a cookie and so on.\nThe presence of a JWT saved in the browser is used as an indicator that a user is currently logged in.\nThe expiry time of JWT is continually checked to maintain an authenticated state in the Angular applications.\nThe client side routes are protected and access by authenticated users only.\nWhen user sends the XHR requests for APIs, the JWT gets sent an Authorization header using your cookies or Bearer.\n \nWhen XHR requests coming on the server, before send back the responses itâ€™s validated first with configured appâ€™s secret keys. If everything is looking good then returns successfully responses other send the back to the bad request.\n \nThere are several open source libraries are available for angular which are helps with JWTs and has the ability to Decode the JWT, Authorization header to XHR requests and so on.\n \n \n \n','HOW ARE JWTS USED TO AUTHENTICATE ANGULAR 4 APPLICATIONS?',7),(299,'JSON Web Token (JWT) is an open standard which used for securely transmitting information between parties as a JSON object.\n \nThe JWTs can be signed with â€“\n \nHMAC algorithm\nRSA algorithm\n \n \n','WHAT IS JSON WEB TOKEN?',7),(300,'In Angular, a Component is a special kind of directive that uses a simpler configuration which is suitable for a component-based application structure.\n \n \n','What is component in Angular 2 ?',7),(301,'There are some scenarios where we can used JSON Web Tokens â€“\n \nAuthentication\nInformation Exchange\n \n \n','WHEN SHOULD YOU USE JSON WEB TOKENS?',7),(302,'The JSON Web Tokens consist of three parts separated by dots (.), which are:\n \nHeader\nPayload\nSignature\n \n \n','WHAT IS THE JSON WEB TOKEN STRUCTURE?',7),(303,'@Input allows you to pass data into your controller and templates through html and defining custom properties.\n \nThis allows you to easily reuse components and have them display different values for each instance of the renderer.\n \n \n','What is @Inputs in Angular 2? ?',7),(304,'Components push out events using a combination of an @Output and an EventEmitter.\n \nThis allows a clean separation between reusable Components and application logic.\n \n \n',' What is @Outputs in Angular?',7),(305,'Components :\n \nFor register component we use @Component meta-data annotation.\n \nComponent is a directive which use shadow DOM to create encapsulate visual behavior called components. Components are typically used to create UI widgets.\n \nComponent is used to break up the application into smaller components.\n \nOnly one component can be present per DOM element.\n \n \n@View decorator or templateurl template are mandatory in the component.\n \nDirectives :\n \nFor register directives we use @Directive meta-data annotation.\n \nDirectives is used to add behavior to an existing DOM element.\n \nDirective is use to design re-usable components.\n \nMany directive can be used in a per DOM element.\n \nDirective donâ€™t have View.\n \n \n','What are differences between Components and Directives?',7),(306,'PrimeNG is a collection of rich UI components for Angular 2.\n \nPrimeNG is a sibling of the popular JavaServer Faces Component Suite, PrimeFaces.\n \nAll widgets are open source and free to use under Apache License 2.0, a commercial friendly license. PrimeNG is developed by PrimeTek Informatics, a company with years of expertise in developing open source UI components.\n \nAngularJS makes it possible to use predefined components for development like tables etc. This helps developers save time and efforts. Using PrimeNG developers can create awesome applications in no time.\n \n \n','What is primeng? How can it be used with angular2?',7),(307,'Angular 2 is a JavaScript framework for developing web applications.\nIt is a complete rewrite of Angular 1.0 ,so learning AngularJS 1.0 is not required for creating Angular 2 applications.\n \nIt is well suited for developing mobile applications unlike AngularJS 1.0 which was suitable for building desktop applications.It is also much faster than Angular 1.0.\n \nIt supports the modern browsers as well as the older browsers.Applications are better structured than previous versions of Angular.It supports server side rendering for faster rendering of views even on slow devices such as mobile.\n \nThe size of Angular 2 library is smaller compared to previous versions.Also Angular 2 applications use ahead of time compilation which makes them faster.\n \n \n','What is Angular 2',7),(308,'Angular 2 applications can be written in any of the following languages:\n \nTypescript   Prefered Language for developing Angular 2 applications.\nJavascript\nDart\nWe donâ€™t have to worry about the JavaScript or ECMAScript version as its the compilerâ€™s responsibility to manage the version issues.\n \nAs Angular 2 is written in TypeScript so it is preferable to write Angular 2 applications in TypeScript or ECMA6. Typescript is the prefered language to use for developing Angular 2 applications.\n \n \n','Which languages are used to write Angular 2 applications',7),(309,'A component is a building block of Angular 2 application.Angular 2 application is created as a tree of components.A component is declared by using @Component() decorator function.\n \n \n@Component({\nselector: \'first-component\',\ntemplate: `<p>Hello from first component</p>`\n})\nexport class FirstComponent {\n}\n \nWhen we declare Component we define metadata for component.In this example we have defined selector and template metadata for the FirstComponent component.\n \n \n','Components',7),(310,'Angular apps consists of different modules.Modules consists of collection of components,directives and services.\n \nAngular modules are created using the NgModules() decorator function.\nEvery Angular application consists of a root module apart from other feature modules.Every modules is created using NgModule decorator function.\n \n \n','Modules',7),(311,'Angular 2 is not just a typical upgrade but a totally new development. The whole framework is rewritten from the ground. Angular 2 got rid of many things like $scope, controllers, DDO, jqLite, angular.module etc.\n \nIt uses components for almost everything. Imagine that even the whole app is now a component.\n \nAlso it takes advantage of ES6 / TypeScript syntax. Developing Angular 2 apps in TypeScript has made it even more powerful. . Apart from that, many things have evolved and re-designed like the template engine and many more.\n \n','What is the need of Angular2?',7),(312,'View of a component is declared by using the template.It is the template which is rendered.\n \nWe can define template in line in the component template metadata property:\n \n \n@Component({\nselector: \'hello-component\',\ntemplate: \'{{Hello}}\'\n})\nWe can also define templates in separate html file and use the templateUrl property in component:\n \n \n@Component({\nselector: \'hello-component\',\ntemplateUrl: \'./hello.html\'\n})\n \n \n','Template',7),(313,'Interpolation   In interpolation binding we specify the binding using expressions\n \n \n<h2>{{employee.name}}</h2>\nProperty Binding  In property binding we bind the custom property using square brackets\n \n \n<h2 [innerText]=\"employee.name\"></h2>\nEvent Binding   In event binding we enclose the event name in parenthesis and assign the event handler method to the event:\n \n \n<button (click)=\"gotoDetail()\">View Details</button>\nTwo-way Binding  In Angular 2 we define two way binding as:\n \n \n<input [(ngModel)]=\"employee.name\"/>\n \n \n','Data bindings which are supported in Angular 2',7),(314,'There is a single root module in every Angular application.Angular application is launched by bootstrapping this root module.\n \n \n','How Angular 2 application is launched',7),(315,'The route which is matched by the router is used display the component.The template defined by the component is displayed in an area defined by the router-outlet.\n \n \n','What is router-outlet',7),(316,'Angular module is class decorated with the @NgModule decorator function.\n \nIts a decorator function which has one argument ,a metadata object with properties describing the module.\nSome of its important properties are:\n \ndeclarations views which belong to this module.\nexports declarations which are visible in the components of other modules.\nimports other modules whose classes are needed in this module.\nproviders services which are provided by this module\nbootstrap This property is set by the root module\n \n@NgModule({\nproviders: list of providers,\nexports:list of components,\nimports:list of components })\n \n \n','NgModule',7),(317,'Better performance because of these reasons\n \nBetter change detection.\nAhead of Time compilation (AOT) improves rendering speed.\nLazy Loading.\nTypeScript can be used for developing Angular 2 applications.\nBetter syntax and application structure.\n \n \n','What are the advantages of Angular 2 over Angular 1',7),(318,'Angular 2 application is a collection of modules and components.There are two ways we can load Modules:\n \nEager Module loading  Loading module at application startup\nLazy loading  Loading Module only when required\nModule which is required can be loaded instead of loading all the modules at application initialization.This has the obvious advantage of improving the application startup time.\n \nWe enable lazy loading in Angular 2 by using the loadChildren property in route\n \n1\n{ path: \'URL\', loadChildren: \'modulePath#ClassName\' }\n \n \n \n \n','What is lazy loading in Angular2',7),(319,'AOT compilation stands for  Ahead Of Time compilation, in it angular compiles  components to native JavaScript and HTML during the build time instead of runtime.\n \nThis drastically improves the performance of the Angular 2 application.With Just in time compilation ,the compilation happens on the users browser at runtime.\n \nIn the case of Ahead of time compilation ,the application is compiled and optimized at the build time instead of run time.So this improves the rendering of the application UI.This approach should be used in production builds.\n \n \n','AOT compilation',7),(320,'Angular 2 is simpler and faster than Angular 1.\nYou can update the large data sets with minimal memory overhead.\nIt will speed up the initial load through server side rendering.\n \n \n','Why AngualrJS2 over AngualrJS1?',7),(321,'1) Create an folder and go inside that folder using command line.\n2) Create en empty file package.json and add following contents.\n \n{\n  \"name\": \"angular2-demo\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"start\": \"concurrent \"npm run tsc:w\" \"npm run lite\" \",\n    \"tsc\": \"tsc\",\n    \"tsc:w\": \"tsc -w\",\n    \"lite\": \"lite-server\",\n    \"typings\": \"typings\",\n    \"postinstall\": \"typings install\"\n  },\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"angular2\": \"2.0.0-beta.7\",\n    \"systemjs\": \"0.19.22\",\n    \"es6-promise\": \"^3.0.2\",\n    \"es6-shim\": \"^0.33.3\",\n    \"reflect-metadata\": \"0.1.2\",\n    \"rxjs\": \"5.0.0-beta.2\",\n    \"zone.js\": \"0.5.15\"\n  },\n  \"devDependencies\": {\n    \"concurrently\": \"^2.0.0\",\n    \"lite-server\": \"^2.1.0\",\n    \"typescript\": \"^1.7.5\",\n    \"typings\":\"^0.6.8\"\n  }\n}\n \n3) Create an empty file tsconfig.json and add following contents\n \n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"system\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"removeComments\": false,\n    \"noImplicitAny\": false\n  },\n  \"exclude\": [\n    \"node_modules\",\n    \"typings/main\",\n    \"typings/main.d.ts\"\n  ]\n}\n \n4) Create an empty file typings.json and add following contents.\n \n \n{\n  \"globalDependencies\": {\n    \"core-js\": \"registry:dt/core-js\",\n    \"jasmine\": \"registry:dt/jasmine\",\n    \"node\": \"registry:dt/node\"\n  }\n}\n \n5) Execute following command from command line.\n \nnpm install\n \n \n \n \n \n','How to install AngualrJS2 in NodeJS?',7),(322,' TypeScript is a typed super set of JavaScript which has been built and maintained by Microsoft and chosen by the AngularJS team for development.\n \n \n','What is TypeScript ? What is the need for it in Angular2',7),(323,'AOT stands for Ahead of Time, There is no different compiler used in AOT just the sequence of process is changed.\nInstead of compiling at runtime in the browser like JIT compilation.\nThe components and templates are compiled at built time and converted to native JavaScript and html.\nSo the browser does not have compile the application so it can directly render it and save time and system resources.\n \nAdvantages:AOT provides build time error detection so many compile type errors are detected before it running the application.\nFaster download times as the application is compiled and bundled at build time, which eliminates the need of loading the angular compiler and its libraries leading to a lesser runtime.\nFaster Rendering time as the application is already compiled and only needs to be rendered on the browser.\n \nDisadvantages: Angular version lower than 4 produces large JavaScript bundles after compilation, which defeats the purpose of AOT.\nIt only works only with HTML and CSS, other file types need to be built previously.\nIt needs a clean-up step before compiling.\n \n \n \n','What is AOT Compilation? Explain its advantages and disadvantages?',7),(324,'Change detection basically is the process of detecting the changes in the internal state of our application which might be caused due to Events, XHR and Timers and make it visible in the user interface.\n \nChange detection work on the principle of zone.js in Angular 2/4.\n \n \n','What is Change detection?',7),(325,'Directives in Angular are used to add behavior to our existing DOM elements.\nWe use @Directive meta-data annotation to register directives.\nDirectives in angular are used to design reusable components.\nDirectives do not have their own views.\n \n \n \n','What are Directives in Angular 2/4?',7),(326,'If the change in one of the child components needs to be reflected to any of its parent component, we can emit the event by using Event Emitter API in Angular.\n \n \nEventEmitter is class present in @angular/core module, which is used by components and directives to emit custom events.\n \n \n','What Are Event Emitters in Angular 2/4?',7),(327,' In Angular 2/4, dependency injection gives us the ability to add functionality of a component at runtime.\n \nIt also provides us a way to create a service that is a reusable piece of code, which can be used across our application to perform a particular function.\n \n \n','What is dependency injection in angular 2/4?',7),(328,'Typings is a way of installing the Typescript definitions using typings.json file, as it is necessary as the browser does not understand typescript natively and hence it must be transpiled first before rendering.\n \n \n','What are typings in Angular 2/4?',7),(329,'Module loaders in Angular are used to bundle different modules that contain their dependencies along with angular components into one bundle or multiple bundles (For lazy loading) and load them in the browser.\n \n \n','What are module loaders in Angular 2/4?',7),(330,' Systemjs is a client side module bundler in angular as it loads modules (components and other files) on demand instead of loading an entire application at startup.\n \nThis largely reduces load times while starting up the app.\nThe up side of Webpack over Systemjs is that it bundles and creates a single file called bundle.js, which contains HTML, CSS and JS etc.\n \nWhile the initial load time might take a few seconds once the app is cached it becomes lightning fast and will lead to a large boost in performance.\n \n \n \n ','What is the use of systemjs? How is webpack better to use in Angular 2/4?',7),(331,'In Angular 2/4 services are reusable function which include their properties used to perform some common functionality which can be used by different components instead of writing the same code again and again for different components a data service can be used by multiple components (via dependency injection).\n \n \n','What are services in Angular 2/4?',7),(332,'Steps to enable lazy loading in Angular 2/4 are as follows:\nAdd loadChildren in place of components in the routes in the exported class in the Main Routing module of your application.\n \nNow change forRoot to forChild in the module or feature level router config module and you are done.\n \n \n','How to enable lazy loading in Angular 2/4?',7),(333,'ECMAScript is a subset of JavaScript. JavaScript is basically ECMAScript at its core but builds upon it. Languages such as ActionScript, JavaScript, JScript all use ECMAScript as its core.\n \nAs a comparison, AS/JS/JScript are 3 different cars, but they all use the same engine... each of their exteriors is different though, and there have been several modifications done to each to make it unique. Angular2 supports ES6 and higher versions.\n \n \n',' What is ECMA Script ?',7),(334,'Angular 2/4 and JQuery at its core are very different concept all together.\nJQuery deals with manipulating DOM directly while Angular is used primarily for binding data.\n \nIn some scenarios, using JQuery libraries can be used as quick solutions but doing this we might face problems in the future in terms of pre-rendering.\n \n \n','Is it good to use JQuery in Angular 2/4?',7),(335,'Steps to add and use jQuery in Angular 2/4 are as follows:\nIn your node.js terminal type npm install --save jQuery and hit enter.\nThen install jQuery Declaration files by typing npm install -D @types/jquery and hitting enter.\n \nNext Import into your component and then provide a typed reference for jQuery.\n \n \n','How can you use JQuery in Angular 2/4?',7),(336,'@ViewChild decorator is used when a parent component needs to communicate with and pass data to the child component.\n \nWe need to pass the class name of the child component to @Viewchild decorator function.\n \n \n','What is viewchild?',7),(337,' In Angular 2/4, services are used to communicate data between different components.\n \nAs one component could pass, the data to the service while another component could read from it.\n \nTherefore, this data service could pass the data from one components to multiple components.\n \n \n','How to share global data across components?',7),(338,'Angular has used 6th Edition â€“ ECMAScript 2015 (Es6). However, there are configuration available to try some experimental feature from  7th Edition â€“ ECMAScript 2016 (Es7).\n \nInheritance of component has become so easy. Now Angular 2.0 can be developed using  Object oriented thinking. Inheritance has been possible for javascript.\n \nA number of libraries has been developed to support this concept. However, with ES2015 all those  nonstandard abstractions can be got rid of. As  ES2015 defines an easier inheritance.\n \n \n','Which version is supported by Angular2?',7),(339,'Traceur compiler compiles ECMAScript Edition 6 (ES6) (including classes, generators and so on) code on the fly to regular Javascript (ECMAScript Edition 5 [ES5]) to make it compatible for the browser.\n \nTraceur itself is written in ES6, compiled to ES5. Details can be found here.\n \n \n','What is Traceur compiler?',7),(340,'In this section, the development environment setup has been described. Angularjs 2.0 application can be developed using:\n \nangular-cli: This is a command line tool for Angularjs 2.0 application development which support live coding and deployment instantly. This is much easier and much straight forward.\n \nsystemjs: This is the traditional way of developing angularjs application.\n \n \n \n \n \n','How to setup development environment for Angular2? Please follow the step by step approach with code configuration/screenshots?',7),(341,'Angular2 provides 3 different components for routing configuration:\n \nRoutes is the configuration to describe applicationâ€™s different routes\nRouterOutlet is a â€œplaceholderâ€? component that holds the view for each route\nRouterLink is a directive to link to routes\nRoutes:\nRoutes is an object to describe the routes of the application. For instance, here is an example for our previously specified goal.\n \n \nconst routes: Routes  = [\n { path: \'\', redirectTo: \'login\', pathMatch:\'full\' },\n { path: \'login\', component: LoginComponent },\n { path: \'home\', component: HomeComponent ,\n  children: [\n   { path: \'\', component: DashBoardComponent },\n   {path: \'events\', component: EventsComponent}\n  ]},\n { path: \'register\', component: RegisterComponent },\n { path: \'about\', component: AboutComponent },\n { path: \'**\', component: p404Component },\n];\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nconst routes: Routes  = [\n { path: \'\', redirectTo: \'login\', pathMatch:\'full\' },\n { path: \'login\', component: LoginComponent },\n { path: \'home\', component: HomeComponent ,\n  children: [\n   { path: \'\', component: DashBoardComponent },\n   {path: \'events\', component: EventsComponent}\n  ]},\n { path: \'register\', component: RegisterComponent },\n { path: \'about\', component: AboutComponent },\n { path: \'**\', component: p404Component },\n];\nWe have configure routes which is an array of Route. Each entry of the array is  The complete list of possible fields used in this configuration are as following:\n \npath â€“ url of the route used by the matcher DSL.\ncomponent â€“name of the target component.\npathMatch â€“ specifies the matching strategy, example : full.\nredirectTo -url that will replace the current matched segment in case of redirection.\noutlet â€“ name of the outlet used as a placeholder for the component. If there is no outlet it would be placed in <router-outlet>\ncanActivate â€“ array of DI tokens used to find CanActivate handlers.\ncanActivateChild â€“ array of DI tokens used to find CanActivateChild handlers.\ncanDeactivate â€“ array of DI tokens used to find CanDeactivate handlers.\ndata is additional data provided to the component via ActivatedRoute.\nresolve is a map of DI tokens used to look up data resolvers.\nchildren is an array used to define nested routes.\nRouter Directives\nAngular RouterModule has 3 different directives. Such as:\n \nrouter-outlet\nrouter-link\nrouterLinkActive\nrouter-outlet:\n \nrouter-outlet is a component from angular/router library. The router is the placeholder to display views inside  <router-outlet> tags. As the routes changes, the view inside the <router-outlet> tags also change accordingly.\n \n \n<div class=\"container-fluid\">\n        <router-outlet></router-outlet>\n</div>\n1\n2\n3\n<div class=\"container-fluid\">\n        <router-outlet></router-outlet>\n</div>\nrouter-link:\n \nrouter-link directive is an alternative of HTML href property. The syntax is as following:\n \n \n<a [routerLink]=\"[\'/url\']\">Url Title</a>\n1\n<a [routerLink]=\"[\'/url\']\">Url Title</a>\nrouter-link directive can also handle query parameter. For example, once we land in /hoem/events page, it shows a list of events , if we want to go to directly one of the events page, we can just put the iid of that specific event and can land of the event details page for event 01. For this purpose, we use [queryParams] binding. [queryParams] takes an object such as {â€˜idâ€™:01} and can\n \nFirstly, We have bound router-link directive to events array as following:\n \n \n<a [routerLink]=\"[\'/home/events]\">Events</a>\n1\n<a [routerLink]=\"[\'/home/events]\">Events</a>\nNow inside app.router.ts we have configure the queryParams binding as following:\n \n \nthis.router.navigate([\'/home/events\', event.id]);\n1\nthis.router.navigate([\'/home/events\', event.id]);\nOtherwise, if we want to pass the queryParams in an object , we can also do that as following:\n \n \n<a [routerLink]=\"[\'/home/events, { id: \'event01\' }]\">Event 01 </a>\n \n<a [routerLink]=\"[\'/home/events, { id: \'event01\' }]\">Event 01 </a>\nOR\n \n \n<a [routerLink]=\"[\'/home/events, 1]\">Event 1</a>\n \n<a [routerLink]=\"[\'/home/events, 1]\">Event 1</a>\n \nrouterLinkActive:\n \nThe RouterLinkActive directive toggles css classes for active RouterLinks based on the current RouterState. This cascades down through each level in our route tree, so parent and child router links can be active at the same time. To override this behavior, we can bind to the [routerLinkActiveOptions] input binding with the { exact: true } expression. By using { exact: true }, a given RouterLink will only be active if its URL is an exact match to the current URL.\n \n \n \n','What are the main routing COMPONENTS?',7),(342,'In Angular2.0, different decorators are used to pass variables to class. Such as @NgModules decorator is used for Modules. @Component decorator is used to pass variables to class. Decorators uses metadata to attach variable to component or module class.\n \n \n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [],\n  exports:[\n      AppComponent\n  ],\n  bootstrap: [AppComponent]\n})\n \n \n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [],\n  exports:[\n      AppComponent\n  ],\n  bootstrap: [AppComponent]\n})\n \nHere @NgModule pass a metadata, which is kind of json variable with properties such as declaration, imports, providers, export and bootstrap.\n \nSimilarly, @Component decorator also used metadata.\n \n \n@Component({\n  selector: \'app-root\',\n  templateUrl: \'./app.component.html\',\n  styleUrls: [\'./app.component.css\']\n})\n \n@Component({\n  selector: \'app-root\',\n  templateUrl: \'./app.component.html\',\n  styleUrls: [\'./app.component.css\']\n})\n \n \n \n','Metadata in Angularjs 2:',7),(343,'Data Binding in Angularjs 2:\nFrom angular 1.x to angular 2.0, the data binding has not been changed in template way. However, from performance point of view this has been changed dramatically.\n \nThere are two types of data binding available in angular 2.0\n \nOne way\nTwo way\nHowever, any variable is available within the scope of the component and they can be passed from one component to another component. This way, one of the significant concentration that developed used to give in case of variable declaration in angular 1.x has become much simpler.\n \n \n','Briefly explain Data Binding in Angularjs 2.0?',7),(344,'@NgModule is a decorator function. A decorator function allows users to mark something as Angular 2 thing (could be a module or component or something else) and it enables you to provide additional data that determines how this Angular 2 thing will be processed, instantiated and used at the runtime. So, whenever user writes @NgModule, it tells the Angular 2 module, whatâ€™s going to be included and used in and using this module.\n \n \n',' What is @NgModule?',7),(345,'Angular 2 has been developed to be more synchronized with modern HTML5. Therefore, events has been changed to bind to the DOM API Events with similar syntax.\n \nFor example, ng-click has been replaced with (click). Same as ng-submit has been changed to  (submit). () parenthesis has been used as the sytax for event emitter.\n \n//Angularjs 1.x\n<div ng-click=\"eventName()\"></div>\n//Angular 2.0\n<div (click)=\" eventName ()\"></div>\n \nRespective event object can also be passed as HTML5. Such as\n \n<div (mousedown)=\"eventName($event)\"></button>\n \nAnd then in component\n \n@Component(...)\n \nclass AppComponent {\n \n  eventName(event) {\n \n    event.preventDefault();\n \n  }\n \n}\n \nThere is another way of binding event to DOM element is as following\n \n<input type=\"text\" on-keypress=\"onKeyPress($event)\">\n \nThe details has been described in later interview questions series.\n \n \n \n','Briefly explain Event Binding in Angular 2?',7),(346,'\nAngular 4 contains some additional Enhancement and Improvement. Consider the following enhancements.\n \n1.    Smaller & Faster Apps\n2.    View Engine Size Reduce\n3.    Animation Package\n4.    NgIf and ngFor Improvement\n5.    Template\n6.    NgIf with Else\n7.    Use of AS keyword\n8.    Pipes\n9.    HTTP Request Simplified\n10. Apps Testing Simplified\n11. Introduce Meta Tags\n12. Added some Forms Validators Attributes\n13. Added Compare Select Options\n14. Enhancement in Router\n15. Added Optional Parameter\n16. Improvement Internationalization\n \n1. Smaller & Faster Apps - Angular 4 applications is smaller & faster in comparison with Angular 2.\n \n2. View Engine Size Reduce - Some changes under to hood to what AOT generated code compilation that means in Angular 4, improved the compilation time. These changes reduce around 60% size in most cases.\n \n \n \n3. Animation Package- Animations now have their own package i.e. @angular/platform-browser/animations\n \n4. Improvement - Some Improvement on *ngIf and *ngFor.\n \nStayed Informed â€“ Angular 2 vs. Angular 1\n \n5. Template - The template is now ng-template. You should use the â€œng-templateâ€? tag instead of â€œtemplateâ€?. Now Angular has its own template tag that is called â€œng-templateâ€?.\n \n6. NgIf with Else â€“ Now in Angular 4, possible to use an else syntax as,\n \n<div *ngIf=\"user.length > 0; else empty\"><h2>Users</h2></div>\n<ng-template #empty><h2>No users.</h2></ng-template>\n \n7. AS keyword â€“ A new addition to the template syntax is the â€œas keywordâ€? is use to simplify to the â€œletâ€? syntax.\n \nUse of as keyword,\n<div *ngFor=\"let user of users | slice:0:2 as total; index as = i\">\n    {{i+1}}/{{total.length}}: {{user.name}}\n</div>\n \nTo subscribe only once to a pipe â€œ|â€? with â€œasyncâ€? and If a user is an observable, you can now use to write,\n \n<div *ngIf=\"users | async as usersModel\">\n    <h2>{{ usersModel.name }}</h2> <small>{{ usersModel.age }}</small>\n</div>\n \n \n8. Pipes - Angular 4 introduced a new â€œtitlecaseâ€? pipe â€œ|â€? and use to changes the first letter of each word into the uppercase.\n \nThe example as,\n<h2>{{ \'anil singh\' | titlecase }}</h2>\n<!-- OUPPUT - It will display \'Anil Singh\' -->\n \n9. Http - Adding search parameters to an â€œHTTP requestâ€? has been simplified as,\n \n//Angular 4 -\nhttp.get(`NULL/api/users`, { params: { sort: \'ascending\' } });\n \n//Angular 2-\nconst params = new URLSearchParams();\nparams.append(\'sort\', \'ascending\');\nhttp.get(`NULL/api/users`, { search: params });\n \n10. Test- Angular 4, overriding a template in a test has also been simplified as,\n \n//Angular 4 -\nTestBed.overrideTemplate(UsersComponent, \'<h2>{{users.name}}</h2>\');\n \n//Angular 2 -\nTestBed.overrideComponent(UsersComponent, {\n    set: { template: \'<h2>{{users.name}}</h2>\' }\n});\n \n11. Service- A new service has been introduced to easily get or update â€œMeta Tagsâ€? i.e.\n@Component({\n    selector: \'users-app\',\n    template: `<h1>Users</h1>`\n})\nexport class UsersAppComponent {\n    constructor(meta: Meta) {\n        meta.addTag({ name: \'Blogger\', content: \'Anil Singh\' });\n    }\n}\n \n12. Forms Validators - One new validator joins the existing â€œrequiredâ€?, â€œminLengthâ€?, â€œmaxLengthâ€? and â€œpatternâ€?. An email helps you validate that the input is a valid email.\n \n13. Compare Select Options - A new â€œcompareWithâ€? directive has been added and it used to help you compare options from a select.\n \n<select [compareWith]=\"byUId\" [(ngModel)]=\"selectedUsers\">\n    <option *ngFor=\"let user of users\" [ngValue]=\"user.UId\">{{user.name}}</option>\n</select>\n \n14. Router - A new interface â€œparamMapâ€? and â€œqueryParamMapâ€? has been added and it introduced to represent the parameters of a URL.\n \nconst uid = this.route.snapshot.paramMap.get(\'UId\');\nthis.userService.get(uid).subscribe(user => this.name = name);\n \n15. CanDeactivate - This â€œCanDeactivateâ€? interface now has an extra (optional) parameter and it is containing the next state.\n \n16. I18n - The internationalization is tiny improvement.\n \n//Angular 4-\n<div [ngPlural]=\"value\">\n    <ng-template ngPluralCase=\"0\">there is nothing</ng-template>\n    <ng-template ngPluralCase=\"1\">there is one</ng-template>\n</div>\n \n//Angular 2-\n<div [ngPlural]=\"value\">\n    <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n    <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n</div>\n \n \n \n','Whatâ€™s New in Angular 4? AND what are the New Improvements in Angular 4?',7),(347,'Angular 4 Setup Guide  -\n \nStep 1. Setup the Development Environment\n1.     Install Node.js and NPM  -If you are not already have on your machine!\n2.     Then you Install the Angular CLI globally!\n \nnpm install -g @angular/cli\n \nStep 2 - Navigate to project directory and Create a new project!\n$ cd ~/Dev/\n$ mkdir appDir && cd appDir\n$ ng new my-app\n \nNote - ng new takes time to run!\n \nStep 3 - Navigate to project & Run Local Server!\n$ cd /path/to/your/newly/created/app/\n \nlike\n$ cd ~/Dev/appDir/my-app/\n$ ng serve\n \nOpen local host - http://localhost:53865/\n \nNote â€“The ng serve command is used to launches the server, watches your files and rebuilds the app as you make changes to those files!\n \nStep 4 -Edit Project and Save files\n \n - Open file in appDir/my-app/src/app/app.component.ts, EDIT and SAVE\nimport { Component } from \'@angular/core\';\n \n @Component({\n   selector: \'app-root\',\n   templateUrl: \'./app.component.html\',\n   styleUrls: [\'./app.component.css\']\n })\n export class AppComponent {\n   title = \'Welcome you in Angular 4!\';\n }\n \nStep 5. Test build\nng build\n \n \n \n','Angular 4 Setup Guide for Development Environment!',7),(348,'Angular 4 contains some additional Enhancement and Improvement. Consider the following enhancements.\n \n1.      Smaller & Faster Apps\n2.      View Engine Size Reduce\n3.      Animation Package\n4.      NgIf and ngFor Improvement\n5.      Template\n6.      NgIf with Else\n7.      Use of AS keyword\n8.      Pipes\n9.      HTTP Request Simplified\n10.   Apps Testing Simplified\n11.   Introduce Meta Tags\n12.   Added some Forms Validators Attributes\n13.   Added Compare Select Options\n14.   Enhancement in Router\n15.   Added Optional Parameter\n16.   Improvement Internationalization\n \n1. Smaller & Faster Apps - Angular 4 applications is smaller & faster in comparison with Angular 2.\n \n2. View Engine Size Reduce - Some changes under to hood to what AOT generated code compilation that means in Angular 4, improved the compilation time. These changes reduce around 60% size in most cases.\n \n3. Animation Package- Animations now have their own package i.e. @angular/platform-browser/animations\n \n4. Improvement - Some Improvement on *ngIf and *ngFor.\n \n \n \n \n5. Template - The template is now ng-template. You should use the â€œng-templateâ€? tag instead of â€œtemplateâ€?. Now Angular has its own template tag that is called â€œng-templateâ€?.\n \n6. NgIf with Else â€“ Now in Angular 4, possible to use an else syntax as,\n \n<div *ngIf=\"user.length > 0; else empty\"><h2>Users</h2></div>\n<ng-template #empty><h2>No users.</h2></ng-template>\n \n7. AS keyword â€“ A new addition to the template syntax is the â€œas keywordâ€? is use to simplify to the â€œletâ€? syntax.\n \nUse of as keyword,\n<div *ngFor=\"let user of users | slice:0:2 as total; index as = i\">\n    {{i+1}}/{{total.length}}: {{user.name}}\n</div>\n \nTo subscribe only once to a pipe â€œ|â€? with â€œasyncâ€? and If a user is an observable, you can now use to write,\n \n<div *ngIf=\"users | async as usersModel\">\n    <h2>{{ usersModel.name }}</h2> <small>{{ usersModel.age }}</small>\n</div>\n \n \n8. Pipes - Angular 4 introduced a new â€œtitlecaseâ€? pipe â€œ|â€? and use to changes the first letter of each word into the uppercase.\n \nThe example as,\n<h2>{{ \'anil singh\' | titlecase }}</h2>\n<!-- OUPPUT - It will display \'Anil Singh\' -->\n \n9. Http - Adding search parameters to an â€œHTTP requestâ€? has been simplified as,\n \n//Angular 4 -\nhttp.get(`NULL/api/users`, { params: { sort: \'ascending\' } });\n \n//Angular 2-\nconst params = new URLSearchParams();\nparams.append(\'sort\', \'ascending\');\nhttp.get(`NULL/api/users`, { search: params });\n \n10. Test- Angular 4, overriding a template in a test has also been simplified as,\n \n//Angular 4 -\nTestBed.overrideTemplate(UsersComponent, \'<h2>{{users.name}}</h2>\');\n \n//Angular 2 -\nTestBed.overrideComponent(UsersComponent, {\n    set: { template: \'<h2>{{users.name}}</h2>\' }\n});\n \n11. Service- A new service has been introduced to easily get or update â€œMeta Tagsâ€? i.e.\n@Component({\n    selector: \'users-app\',\n    template: `<h1>Users</h1>`\n})\nexport class UsersAppComponent {\n    constructor(meta: Meta) {\n        meta.addTag({ name: \'Blogger\', content: \'Anil Singh\' });\n    }\n}\n \n12. Forms Validators - One new validator joins the existing â€œrequiredâ€?, â€œminLengthâ€?, â€œmaxLengthâ€? and â€œpatternâ€?. An email helps you validate that the input is a valid email.\n \n13. Compare Select Options - A new â€œcompareWithâ€? directive has been added and it used to help you compare options from a select.\n \n<select [compareWith]=\"byUId\" [(ngModel)]=\"selectedUsers\">\n    <option *ngFor=\"let user of users\" [ngValue]=\"user.UId\">{{user.name}}</option>\n</select>\n \n14. Router - A new interface â€œparamMapâ€? and â€œqueryParamMapâ€? has been added and it introduced to represent the parameters of a URL.\n \nconst uid = this.route.snapshot.paramMap.get(\'UId\');\nthis.userService.get(uid).subscribe(user => this.name = name);\n \n15. CanDeactivate - This â€œCanDeactivateâ€? interface now has an extra (optional) parameter and it is containing the next state.\n \n16. I18n - The internationalization is tiny improvement.\n \n//Angular 4-\n<div [ngPlural]=\"value\">\n    <ng-template ngPluralCase=\"0\">there is nothing</ng-template>\n    <ng-template ngPluralCase=\"1\">there is one</ng-template>\n</div>\n \n//Angular 2-\n<div [ngPlural]=\"value\">\n    <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n    <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n</div>\n \n \n \n','What\'s New in Angular 4? [Angular 4 New Features]',7),(349,'\nAngular 2 apps will work using Angular 4 without changing anything. Angular 4 offers lots-of enhancements i.e.\n \n1.     Angular 4 is smaller than Angular 2\n2.     Angular 4 is faster than Angular 2\n3.     Angular 4 has enhanced *ngFor and *ngIf\n4.     Angular 4 has more meaningful errors\n5.     Overriding a template in Angular v4\n6.     Angular 4 has great Animations\n \nAngular 4 Installation Process on Windows -\n \nnpm install @angular/common@latest @angular/compiler@latest @angular/compiler-cli@latest @angular/core@latest @angular/forms@latest @angular/http@latest @angular/platform-browser@latest @angular/platform-browser-dynamic@latest @angular/platform-server@latest @angular/router@latest @angular/animations@latest typescript@latest --save\n \nAngular 4 Installation Process on Linux/Mac-\n \nnpm install @angular/{common,compiler,compiler-cli,core,forms,http,platform-browser,platform-browser-dynamic,platform-server,router,animations}@latest typescript@latest â€“save\n \n \n','How to Upgrade Web Applications from Angular 2 to Angular 4?',7),(350,'\nThe HTTP Interceptors are used to Set Http Headers Request in Angular 4 using the import from â€œ@angular/common/httpâ€?. The HTTP Interceptors are available in Angular 4.x versions.\n \nThe HTTP Interceptors are not supported in Angular 2. We are creating the HttpClient Injectable class to achieve this. You can see the below examples for set http headers request with and without HTTP interceptors.\n \nWhat Is the Use of Interceptors in Angular 4?\nThe Interceptors is a common used to set default headers for all responses.\n \nExample 1 â€“  For Angular 4\n \nSet Headers Http Request Using Http Interceptors -\nThe HTTP Interceptors are now available via using the new HttpClient from angular/common/http in the Angular 4.x versions.\n \nSteps 1 - Writing an interceptor for adds a header for every request!\nimport {HttpEvent, HttpInterceptor, HttpHandler, HttpRequest} from \'@angular/common/http\';\n \nexport class AddHttpHeaderInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Get the auth header from the service.\n    const authHeader = \'token_value\';\n    const clonedReq = req.clone({headers: req.headers.set(\'Authorization\', authHeader)});\n \n    return next.handle(clonedReq);\n  }\n}\n \nSteps 2 - Providing your interceptor!\n- After creating the interceptor, we need to register it using the HTTP_INTERCEPTORS in the @NgModule()\n \nimport { HTTP_INTERCEPTORS } from \'@angular/common/http\';\n \n@NgModule({\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: AddHttpHeaderInterceptor,\n    multi: true,\n  }],\n})\n \nexport class AppModule {}\n \nExample 2-  For Angular 2\n \nSet Headers Http Request without HTTP Interceptors  -\n \nSteps 1 â€“ We are creating the HttpClient Injectable class.\nimport {Injectable} from \'@angular/core\';\nimport {Http, Headers} from \'@angular/http\';\n \n@Injectable()\nexport class HttpClient {\n  constructor(private http: Http) {}\n \n  createAuthHeader(headers: Headers) {\n    headers.append(\'Content-Type\', \'application/json\');\n    headers.append(\'Authorization\', \'Basic \' + btoa(\'user-name:password\'));\n  }\n \n  get(url) {\n    let headers = new Headers();\n    this.createAuthHeader(headers);\n \n    return this.http.get(url, {headers: headers});\n  }\n \n  post(url, data) {\n    let headers = new Headers();\n    this.createAuthHeader(headers);\n \n    return this.http.post(url, data, {headers: headers});\n  }\n \n  put(url, data) {\n    let headers = new Headers();\n    this.createAuthHeader(headers);\n \n    return this.http.put(url, data, {headers: headers});\n  }\n}\n \nSteps 2 - Injecting the HttpClient object in the Component\nimport { HttpClient } from \'../http-client\';\n \nexport class userComponent {\n  constructor(http: HttpClient) {\n    this.http = httpClient;\n  }\n \n  getUsers() {\n    this.http.get(url).subscribe(data =>{console.log(data); });\n  }\n \n  addUsers(user) {\n    this.http.post(url, user).subscribe(data =>{console.log(data); });\n  }\n}\n \n \n \n','How to Set Http Request Header in Angular 4 and Angular 2?',7),(351,'Angular 4 contains some additional Enhancement and Improvement. Consider the following enhancements.\n \n1.    Smaller & Faster Apps\n2.    View Engine Size Reduce\n3.    Animation Package\n4.    NgIf and ngFor Improvement\n5.    Template\n6.    NgIf with Else\n7.    Use of AS keyword\n8.    Pipes\n9.    HTTP Request Simplified\n10. Apps Testing Simplified\n11. Introduce Meta Tags\n12. Added some Forms Validators Attributes\n13. Added Compare Select Options\n14. Enhancement in Router\n15. Added Optional Parameter\n16. Improvement Internationalization\n \n1. Smaller & Faster Apps - Angular 4 applications is smaller & faster in comparison with Angular 2.\n \n2. View Engine Size Reduce - Some changes under to hood to what AOT generated code compilation that means in Angular 4, improved the compilation time. These changes reduce around 60% size in most cases.\n \n \n \n3. Animation Package- Animations now have their own package i.e. @angular/platform-browser/animations\n \n4. Improvement - Some Improvement on *ngIf and *ngFor.\n \nStayed Informed â€“ Angular 2 vs. Angular 1\n \n5. Template - The template is now ng-template. You should use the â€œng-templateâ€? tag instead of â€œtemplateâ€?. Now Angular has its own template tag that is called â€œng-templateâ€?.\n \n6. NgIf with Else â€“ Now in Angular 4, possible to use an else syntax as,\n \n<div *ngIf=\"user.length > 0; else empty\"><h2>Users</h2></div>\n<ng-template #empty><h2>No users.</h2></ng-template>\n \n7. AS keyword â€“ A new addition to the template syntax is the â€œas keywordâ€? is use to simplify to the â€œletâ€? syntax.\n \nUse of as keyword,\n<div *ngFor=\"let user of users | slice:0:2 as total; index as = i\">\n    {{i+1}}/{{total.length}}: {{user.name}}\n</div>\n \nTo subscribe only once to a pipe â€œ|â€? with â€œasyncâ€? and If a user is an observable, you can now use to write,\n \n<div *ngIf=\"users | async as usersModel\">\n    <h2>{{ usersModel.name }}</h2> <small>{{ usersModel.age }}</small>\n</div>\n \n \n8. Pipes - Angular 4 introduced a new â€œtitlecaseâ€? pipe â€œ|â€? and use to changes the first letter of each word into the uppercase.\n \nThe example as,\n<h2>{{ \'anil singh\' | titlecase }}</h2>\n<!-- OUPPUT - It will display \'Anil Singh\' -->\n \n9. Http - Adding search parameters to an â€œHTTP requestâ€? has been simplified as,\n \n//Angular 4 -\nhttp.get(`NULL/api/users`, { params: { sort: \'ascending\' } });\n \n//Angular 2-\nconst params = new URLSearchParams();\nparams.append(\'sort\', \'ascending\');\nhttp.get(`NULL/api/users`, { search: params });\n \n10. Test- Angular 4, overriding a template in a test has also been simplified as,\n \n//Angular 4 -\nTestBed.overrideTemplate(UsersComponent, \'<h2>{{users.name}}</h2>\');\n \n//Angular 2 -\nTestBed.overrideComponent(UsersComponent, {\n    set: { template: \'<h2>{{users.name}}</h2>\' }\n});\n \n11. Service- A new service has been introduced to easily get or update â€œMeta Tagsâ€? i.e.\n@Component({\n    selector: \'users-app\',\n    template: `<h1>Users</h1>`\n})\nexport class UsersAppComponent {\n    constructor(meta: Meta) {\n        meta.addTag({ name: \'Blogger\', content: \'Anil Singh\' });\n    }\n}\n \n12. Forms Validators - One new validator joins the existing â€œrequiredâ€?, â€œminLengthâ€?, â€œmaxLengthâ€? and â€œpatternâ€?. An email helps you validate that the input is a valid email.\n \n13. Compare Select Options - A new â€œcompareWithâ€? directive has been added and it used to help you compare options from a select.\n \n<select [compareWith]=\"byUId\" [(ngModel)]=\"selectedUsers\">\n    <option *ngFor=\"let user of users\" [ngValue]=\"user.UId\">{{user.name}}</option>\n</select>\n \n14. Router - A new interface â€œparamMapâ€? and â€œqueryParamMapâ€? has been added and it introduced to represent the parameters of a URL.\n \nconst uid = this.route.snapshot.paramMap.get(\'UId\');\nthis.userService.get(uid).subscribe(user => this.name = name);\n \n15. CanDeactivate - This â€œCanDeactivateâ€? interface now has an extra (optional) parameter and it is containing the next state.\n \n16. I18n - The internationalization is tiny improvement.\n \n//Angular 4-\n<div [ngPlural]=\"value\">\n    <ng-template ngPluralCase=\"0\">there is nothing</ng-template>\n    <ng-template ngPluralCase=\"1\">there is one</ng-template>\n</div>\n \n//Angular 2-\n<div [ngPlural]=\"value\">\n    <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n    <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n</div>\n \n \n \n \n','Whatâ€™s New in Angular 4? AND what are the Improvements in Angular 4?',7),(352,'\nThe forRoot is a static method and itâ€™s very easy for developers to configure the modules and the best example is - RouterModule.forRoot.\n \nThe RouterModule also offers a forChild. Itâ€™s also a static method and use to configure the routes of lazy-loaded modules. The forRoot and forChild are the traditional names for methods that configure services in root.\n \nStayed Informed â€“ Angular4 Documentations with Example\n \nExample â€“\nimport { NgModule } from \'@angular/core\';\nimport { RouterModule, Routes  } from \'@angular/router\';\nimport { HttpModule } from \'@angular/http\';\nimport { FormsModule, ReactiveFormsModule } from \'@angular/forms\';\nimport { AppComponent } from \'./components/app/app.component\'\nimport { NavMenuComponent } from \'./components/navmenu/navmenu.component\';\nimport { HomeComponent } from \'./components/home/home.component\';\nimport { UserComponent } from \'./components/user/user.component\';\nimport { UserService } from \'./components/service/user.service\';\nimport { BarCodePipe } from \'./components/pipe/custom.pipe\';\n \n \nexport const sharedConfig: NgModule = {\n    bootstrap: [ AppComponent ],\n    declarations: [\n        AppComponent,\n        NavMenuComponent,\n        HomeComponent,\n        UserComponent,\n        BarCodePipe\n    ],\n    imports: [\n        RouterModule.forRoot([\n            { path: \'\', redirectTo: \'home\', pathMatch: \'full\'},\n            { path: \'home\', component: HomeComponent },\n            { path: \'user\', component: UserComponent },\n            { path: \'**\', redirectTo: \'home\' }\n        ])\n    ],\n    providers: [UserService]\n};\n \n \n \n','What Is the forRoot Method in Angular 4?',7),(353,'\nThe â€œIfâ€? evaluates expression and then renders the â€œelseâ€? or â€œthenâ€? template in its place when expression is â€œtruthyâ€? or â€œfalsyâ€? respectively.\n \nStayed Informed â€“ Angular 4 vs. Angular 2\nStayed Informed â€“ Angular 2 if else examples\n \nThen: - This template is the inline template of â€œIfâ€? unless bound to a different value.\nElse: - This template is blank unless it is bound.\n \nSelectors: -\n1.      If\n2.      If then\n3.      If else\n \nThe multiple examples for Angular 4 if else and then as given bellows,\n \nSyntax:-\n<element *ngIf=\"[condition expression]; else [else template]\"> </element>\n \nSyntax:-\n<div *ngIf=\"users | async; else loadingGrid; let user\">\n  <p>{{user.Id}}</p>\n  <p>{{user.name}}</p>\n  <p>{{user.Age}}</p>\n</div>\n \n<ng-template #loadingGrid>loading...</ng-template>\n \nSyntax :- We can also use \'then else\'\n<div *ngIf=\"isValid;then then_content else other_content\">If IsValid then display other</div>\n \n<ng-template #then_content>content here...</ng-template>\n<ng-template #other_content>other content here...</ng-template>\n \nExample 1 as,\n<div *ngIf=\"isValid;else other_content\">\n    <p>Display valid content here ...</p>\n</div>\n \n<ng-template #other_content>\n     <p>Other content here...</p>\n</ng-template>\n \nExample 2 as,\n<div *ngIf=\"title; then logout else login\"></div>\n \n<ng-template #login>Please login to continue.</ng-template>\n<ng-template #logout>Hi Anil!<button>Logout</button>.</ng-template>\n \nExample 3 as,\n//our root app component\nimport {Component, NgModule} from \'@angular/core\'\nimport {BrowserModule} from \'@angular/platform-browser\'\n \n@Component({\n  selector: \'else-cmp\',\n  template: `<button (click)=\"isValid = !isValid\">update</button>\n    <div *ngIf=\"isValid; else other_content\">\n       content here ...\n    </div>\n    <ng-template #other_content>other content here...</ng-template>`,\n})\nexport class ElseComponent {\n  isValid:boolean = true;\n  constructor() {\n  }\n}\n@Component({\n  selector: \'else-then-cmp\',\n  template: `\n      <button (click)=\"isValid = !isValid\">update</button>\n       <div *ngIf=\"isValid;then content else other_content\"></div>\n       <ng-template #content>content here...</ng-template>\n       <ng-template #other_content>other content here...</ng-template>\n  `,\n})\nexport class ElseThenComponent {\n  isValid:boolean = true;\n  constructor() {\n  }\n}\n \n@Component({\n  selector: \'my-app\',\n  template: `\n    <h4>Using else :</h4>\n    <else-cmp></else-cmp>\n    <h4>Using else then:</h4>\n    <else-then-cmp></else-then-cmp>\n  `,\n})\nexport class App {\n  isValid:boolean = true;\n  constructor() {\n  }\n}\n \n@NgModule({\n  imports: [ BrowserModule ],\n  declarations: [ App , ElseComponent, ElseThenComponent],\n  bootstrap: [ App ]\n})\nexport class AppModule {}\n \n \n \n','Angular 4 If Else and Then Conditions [7 Best Examples]',7),(354,' There are three main components that we use to configure routing in Angular 2-\nRoutes describes the applicationâ€™s routes\n \nRouterOutlet is a â€œplaceholderâ€? component that gets expanded to each routeâ€™s content\n \nRouterLink is used to link to routes\n \n \n','Which components are used to configure routing in Angular 2?',7),(355,'\nAngular 2 - ngFor vs. ngForOf\n \n1.     The [ngFor] is not a type safe\n2.     The [NgForOf] is a type Safe\n3.     The [NgFor] directive instantiates a template once per item from iterate\n4.     The [ngFor] and [ngForOf] are actually the selectors of the [NgForOf] directive and it is not two distinct things\n5.     The [ngFor] will be works like as collections\n6.     The [ngForOf] will be works like as generics\n \n \n \nExample - ngFor\n \n<div *ngFor=\"let user of users\" let i=index;>{{i}} - {{user.name}}</div>\n \nOR\n \n<template>\n     <div [ngFor]=\"let user of users\" let i=index;>{{i}} - {{user.name}}</div>\n</template>\n \nExample - ngForOf\n \n<div ngFor let-user=\"$implicit\" [ngForOf]=\"users\" let-i=\"index\">{{i}} - {{user.name}} </div>\n \n \n \n','What Is the Difference Between [ngFor] and [ngForOf] in Angular 2?',7),(356,'\nThe Isolated unit tests check-up an instance of a class itself without using any Angular dependence or any injected values.\n \nMostly application tester creates a test instance of the class with new keyword and supplying test doubles for the constructor parameters and then investigation the test instance.\n \nThe isolated unit tests don\'t realize how components interact with Angular and also don\'t realize how a component class interacts with its own template or components.\n \nFor testing Angular Pipes and Services - we should write isolated unit tests!\n \nThe isolated unit tests don\'t realize how components interact with Angular and also don\'t realize how a component class interacts with its own template or components.\n \nStayed Informed - Angular 2 Docs with Examples\nStayed Informed - Angular 4 Docs with Examples\n \nThe most familiar Unit Test for the Tester and Developers as following -\n1.     Create an Instances directly with new keyword\n2.     Angular Agnostic Testing Techniques\n3.     Exhibit Standard\n4.     Substitute Test\n \nThe Most of the Tester and Developers are tried to avoid Unit Testing following methodology-\n1.     Import from the Angular Test Libraries - @angular/core/testing\n2.     Configure Angular module\n3.     Prepare Dependency Injection Providers\n4.     Call Inject or (async/fakeAsync)\n \nExample as â€“ This example is used to display Credit Card Number with a custom formatted in the user templates.\nimport { Pipe, PipeTransform } from \'@angular/core\';\n \n@Pipe({\n    name: \'barcode\',\n    pure: false\n})\nexport class BarCodePipe implements PipeTransform {\n    transform(value: string, args: any[]): string {\n        if (!value) {\n            return \'\';\n        }\n        return \"****-****_\" + (value.length > 8 ? (value.length - 8): \'\')\n    }\n}\n \nUnit Testing to the Pipe - BarCodePipe\n \ndescribe(\'BarCodePipe\', () => {\n  let pipe = new BarCodePipe();\n \n  //Todo tests ...\n});\n \n \n \n','What Are Isolated Unit Tests? [Angular 4 and Angular 2]',7),(357,'\nThe Angular Testing utilities include the TestBed class and helper functions from the test libraries - @angular/core/testing.\n \nThe TestBed class is one of the principal Angular testing utilities!\n \nThe TestBed class is responsible for configuring and initializing the environment that we are going to write our tests in by calling TestBed.configureTestingModule.\n \n \nThe TestBed.configureTestingModule is used to define the environment that we want our component under test to live in.\n \nThe Angular Testing utility APIs are â€“\n1.     getTestBed\n2.     async\n3.     fakeAsync\n4.     tick\n5.     inject\n6.     discardPeriodicTasks\n7.     flushMicrotasks\n8.     ComponentFixtureAutoDetect    \n \nThe most important static methods are â€“\n1.     configureTestingModule\n2.     compileComponents\n3.     createComponent\n4.     overrideModule\n5.     overrideComponent\n6.     overrideDirective\n7.     overridePipe\n8.     get\n9.     initTestEnvironment\n10.  resetTestEnvironment\n \nExample As â€“\n \nbeforeEach(() => {\n  fixture = TestBed.configureTestingModule({\n    declarations: [YourComponent ]\n  })\n  .createComponent(YourComponent);\n});\n \n \n \n','What Are Angular Testing Utilities? [Angular 4 and Angular 2]',7),(358,'\nThe Isolated unit tests check-up an instance of a class itself without using any Angular dependence or any injected values.\n \nMostly application tester creates a test instance of the class with new keyword and supplying test doubles for the constructor parameters and then investigation the test instance.\n \nThe isolated unit tests don\'t realize how components interact with Angular and also don\'t realize how a component class interacts with its own template or components.\n \nFor testing Angular Pipes and Services - we should write isolated unit tests!\n \nThe isolated unit tests don\'t realize how components interact with Angular and also don\'t realize how a component class interacts with its own template or components.\n \nStayed Informed - Angular 4 Docs with Examples\n \nThe most familiar Unit Test for the Tester and Developers as following -\n1.     Create an Instances directly with new keyword\n2.     Angular Agnostic Testing Techniques\n3.     Exhibit Standard\n4.     Substitute Test\n \nThe Most of the Tester and Developers are tried to avoid Unit Testing following methodology-\n1.     Import from the Angular Test Libraries - @angular/core/testing\n2.     Configure Angular module\n3.     Prepare Dependency Injection Providers\n4.     Call Inject or (async/fakeAsync)\n \nExample as â€“ This example is used to display Credit Card Number with a custom formatted in the user templates.\nimport { Pipe, PipeTransform } from \'@angular/core\';\n \n@Pipe({\n    name: \'barcode\',\n    pure: false\n})\nexport class BarCodePipe implements PipeTransform {\n    transform(value: string, args: any[]): string {\n        if (!value) {\n            return \'\';\n        }\n        return \"****-****_\" + (value.length > 8 ? (value.length - 8): \'\')\n    }\n}\n \nUnit Testing to the Pipe - BarCodePipe\ndescribe(\'BarCodePipe\', () => {\n  let pipe = new BarCodePipe();\n \n  //Todo tests ...\n});\n \n \n \nThe Angular Testing utilities include the TestBed class and helper functions from the test libraries - @angular/core/testing.\n \nStayed Informed - Angular 2 Docs with Examples\n \nThe TestBed class is one of the principal Angular testing utilities!\n \nThe TestBed class is responsible for configuring and initializing the environment that we are going to write our tests in by calling TestBed.configureTestingModule.\n \nThe TestBed.configureTestingModule is used to define the environment that we want our component under test to live in.\n \nThe Angular testing utility APIs are â€“\n1.     getTestBed\n2.     async\n3.     fakeAsync\n4.     tick\n5.     inject\n6.     discardPeriodicTasks\n7.     flushMicrotasks\n8.     ComponentFixtureAutoDetect    \n \nThe most important static methods are â€“\n1.     configureTestingModule\n2.     compileComponents\n3.     createComponent\n4.     overrideModule\n5.     overrideComponent\n6.     overrideDirective\n7.     overridePipe\n8.     get\n9.     initTestEnvironment\n10.  resetTestEnvironment\n \nExample As â€“\n \nbeforeEach(() => {\n  fixture = TestBed.configureTestingModule({\n    declarations: [YourComponent ]\n  })\n  .createComponent(YourComponent);\n});\n \n \n \n \n \n','Isolated Unit Tests vs. Angular Testing Utilities - [Angular 4 and Angular 2]',7),(359,'We can add the declarable classes like components, directives and pipes in the module\'s declarations list and we can add only - components, directives and pipes classes in the @NgModule.\n \n \nWe do not declare - Module, Service, objects, strings, numbers, functions, entity models, configurations, business logic, and helper classes in the module\'s declarations.\n \nExample â€“\nexport const sharedConfig: NgModule = {\n    bootstrap: [ AppComponent ],\n    declarations: [\n        AppComponent,\n        NavMenuComponent,\n        HomeComponent,\n        UserComponent,\n        AccountDetailComponent,\n        BarCodePipe\n    ],\n    imports: [\n        RouterModule.forRoot([\n            { path: \'\', redirectTo: \'home\', pathMatch: \'full\'},\n            { path: \'home\', component: HomeComponent },\n            { path: \'user\', component: UserComponent },\n            { path: \'**\', redirectTo: \'home\' }\n        ])\n    ],\n    providers: [UserService]\n};\n \n \n \n','What classes should I add to module\'s declarations in Angular 4?',7),(360,'\nNo problem! We can import the same module twice but Angular does not like modules with circular references.\n \nStayed Informed - Angular 4 Docs\n \nSo do not let Module â€œXâ€? import Module â€œYâ€? which already imports Module â€œXâ€?.\n \nWhen four modules all import Module â€œXâ€?, Angular estimate Module â€œXâ€? once, the first time face it and does not do again.\n \n \nActually, the modules help us to organize an application into associative blocks of functionality.\n \n \n \n \n','What Happen when I Import the same Module Twice in Angular 4?',7),(361,'\nAngular 4 Grid with CRUD operations -\n \nStep 1 -\nÂ·       Installed NPM\nÂ·       Installed Visual Studio 2017.\nÂ·       Installed TypeScript 2.0 for Visual Studio 2017.\nStep 2 -\nÂ·       Create ASP.NET MVC Web Application\nÂ·       Go to Visual Studioâ€™s File New Project menu, expand the Web category and pick ASP.NET Web Application.\nStep 3 -\nÂ·       Configure Angular 4 and We need to prepare our frontend to run Angular 4.\nStep 4-\nÂ·       Creating an Angular Service.\nStep 5 â€“\nÂ·       Configure Service in NgModule.\nimport {NgModule } from \'@angular/core\';\nimport {BrowserModule} from \'@angular/platform-browser\';\nimport {FormsModule} from \'@angular/forms\';\nimport {HttpModule} from \'@angular/http\';\nimport {platformBrowserDynamic} from \'@angular/platform-browser-dynamic\';\nimport {AppComponent } from \'./app.component\';\nimport {UserService} from \'./app.service\';\n \n@NgModule({\n    imports: [BrowserModule, FormsModule, HttpModule],\n    declarations: [AppComponent],\n    providers: [UserService],\n    bootstrap: [AppComponent]\n})\n \nclass AppModule { }\nplatformBrowserDynamic().bootstrapModule(AppModule);\n \nStep 6 -\n \nÂ·       Calling an Angular Service in the Angular Component class.\n \n \n \n','Angular 4 Grid with CRUD operations\n',7),(362,'\nThe Angular Router enables navigation from one view to the next as users perform application tasks.\n \nAngular 4 comes with some useful changes in the router. Letâ€™s take a look in the detail changes!  Stayed Informed â€“ Angular 4 Q/A\n \nThe Components of Routing and Navigation -\n1.     Router Imports\n2.     Router Configuration\n3.     Router Outlet\n4.     Router Link\n5.     Router State\n6.     Router Events\n \nAngular Routing Overview -\n1.     Enter the URL in your address bar for your browser navigations.\n2.     Click on your navigations links on the page and the browser navigates to a new page which you have entered in the navigations URL.\n3.     Click the browsers back and forward buttons. The browser navigates backward and forward through the history of pages.\n \nRouter Imports- Angular Router is an optional service that presents a particular component view for a given URL i.e.\nimport { RouterModule, Routes } from \'@angular/router\';\n \nRouter Configuration -\nconst appRoutes: Routes = [\n  { path: \'\', redirectTo: \'home\', pathMatch: \'full\' },\n  { path: \'registration\', component: RegistrationComponent},\n  { path: \'login\', component: LoginComponent},\n  { path: \'\'home/:id\',      component: HomeComponent, data: { title: \'Home\' }},\n  { path: \'users\',    component: UserListComponent, data: { title: \'User List\' }},\n  { path: \'dashboard\', component: DashboardComponent, data: { title: \'Dashboard\' }}\n  { path: \'**\', component: PageNotFoundComponent }\n];\n \n@NgModule({\n  imports: [\n    UniversalModule, // MUST BE FIRST IMPORT. THIS AUTOMATICALLY IMPORTS BROWSERMODULE, HTTPMODULE, AND JSONPMODULE TOO.\n    RouterModule.forRoot(appRoutes), // Installs Router routes, components and services\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  ...\n})\nexport class AppModule { }\n \nRouter Outlet- It is a placeholder component and use to get expanded to each route\'s content.\n \nRouter-outlet directive is used to render the components for specific location of your applications. Both the template and templateUrl render the components where you use this directive.\n \nSyntax â€“\n<router-outlet></router-outlet>\n \nExample -\n<div class=\'container\'>  \n    <div class=\'row\'>\n        <router-outlet></router-outlet>\n    </div>\n</div>\n \nRouter Link - It is use to link to application\'s routes and Router-link directive is used to link a specific part of your applications.\n \nSyntax â€“\n<router-link></router-link>\n \nExample â€“\n<ul class=\'nav navbar-nav\'>\n    <li [routerLinkActive]=\"[\'link-active\']\">\n        <a [routerLink]=\"[\'/login\']\">\n            <span class=\'glyphicon glyphicon-Login\'></span> Login\n        </a>\n    </li>\n    <li [routerLinkActive]=\"[\'link-active\']\">\n        <a [routerLink]=\"[\'/registration\']\">\n            <span class=\'glyphicon glyphicon-Register\'></span> Register\n        </a>\n    </li>\n    <li [routerLinkActive]=\"[\'link-active\']\">\n        <a [routerLink]=\"[\'/Users\']\">\n            <span class=\'glyphicon glyphicon-Users\'></span> Users\n        </a>\n    </li>\n    <li [routerLinkActive]=\"[\'link-active\']\">\n        <a [routerLink]=\"[\'/Dashboard\']\">\n            <span class=\'glyphicon glyphicon-Dashboard\'></span> Dashboard\n        </a>\n    </li>\n</ul>\n \nRouter State -\nAfter the end of each successful navigation life-cycle, the router builds a tree of Activated-Route objects that make up the current state of the router. You can access the current Router-State from anywhere in the application using the Router service and the router-State property.\n \nEach Activated-Route in the Router-State provides methods to traverse up and down the route tree to get information from parent, child and sibling routes.\n \nRouter Events -\n1.     NavigationStart- This event is triggered when navigation starts.\n2.     RoutesRecognized - This event is triggered when Router parses the URL and routes are recognized.\n3.     RouteConfigLoadStart- This event is triggered before the Router lazy loads a route configuration.\n4.     RouteConfigLoadEnd - This event is triggered after a route has been lazy loaded.\n5.     NavigationEnd - This event is triggered when navigation ends successfully!\n6.     NavigationCancel - This event is triggered when navigation is cancelled.\n7.     NavigationError - This event is triggered when navigation fails due to error.\n \n \n \n \n','\nAngular 4 Routing and Navigation [Router Imports, Outlet, Link, State and Events]',7),(363,'\nWhat Happens If the Request fails on the Server Due to Poor Network Connection?\nHttpClient will return an error instead of a successful response.\n \nExample - Add an error handler to handle the errors\nhttp.get(\'/api/users\')\n  .subscribe(data => {console.log(data);}, //Successful responses call the first callback.\n      err => {console.log(\'Got error!\'); //Errors - Something went wrong!\n});\n \nHow To Get and Log an error in Angular 4?\nTwo types of errors -\n1.     If the backend returns an unsuccessful response like - 404, 500 and so on\n2.     If something goes wrong in the client side like -network error etc.\n \nIn the both cases - We are using HttpErrorResponse and return the useful information on what went wrong in this call!\n \nExample â€“\nhttp.get(\'/api/users\')\n  .subscribe(data => {console.log(data);}, //Successful responses call the first callback.\n      (err: HttpErrorResponse) => {\n        if (err.error instanceof Error) {\n           console.log(\'Error - \', err.error.message);\n        }else {\n            console.log(\'Error status - ${err.status}, and Error Detail - ${err.error}\');\n        }\n      }\n});\n \nHow To handle and retry the failed request due to Poor Network Connection in Angular 4?\n \nIn Angular 4, simply retry the request using RxJS operator called .retry (). It is automatically presubscribed to an Observable, thus reissuing the request when an error occurred!\n \nImport RxJS for using retry () method-\nimport \'rxjs/add/operator/retry\';\n \nHTTP Observables for retry the failed request\nhttp.get(\'/api/users\')\n  .retry(2) //Retry this request up to 2 times.\n  .subscribe(data => {console.log(data);}, //Successful responses call the first callback.\n      (err: HttpErrorResponse) => {\n        if (err.error instanceof Error) {\n           console.log(\'Error - \', err.error.message);\n        }else {\n            console.log(\'Error status - ${err.status}, and Error Detail - ${err.error}\');\n        }\n      }\n});\n \nHow to implement HttpCache in Angular 4?\n \nWe can use Http interceptors to implement caching.\n \n@Injectable()\nexport class CachingInterceptor implements HttpInterceptor {\n  constructor(private cache: HttpCache) {}\n \n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Cache all GET requests and Skip other requist like POST, PUT etc.\n    if (req.method !== \'GET\') {\n       return next.handle(req);\n    }\n \n    // Cached Response for all exists GET requests.\n    const cachedResponse = this.cache.get(req);\n \n    //If cached response is exists.\n    if (cachedResponse) {\n       return Observable.of(cachedResponse);\n    }else{\n       //If cached response is not exists.\n       return next.handle(req).do(event => {\n          if (event instanceof HttpResponse) {\n         this.cache.put(req, event);// Update the cache.\n          }\n      });\n    }\n  }\n}\n \n \n \n','Angular 4 Error Handling - Logging, Retry Request and HttpCache!',7),(364,'Two types of errors -\n1.     If the backend returns an unsuccessful response like - 404, 500 and so on\n2.     If something goes wrong in the client side like -network error etc.\n \nIn the both cases - We are using HttpErrorResponse and return the useful information on what went wrong in this call!\n \nExample â€“\nhttp.get(\'/api/users\')\n  .subscribe(data => {console.log(data);}, //Successful responses call the first callback.\n      (err: HttpErrorResponse) => {\n        if (err.error instanceof Error) {\n           console.log(\'Error - \', err.error.message);\n        }else {\n            console.log(\'Error status - ${err.status}, and Error Detail - ${err.error}\');\n        }\n      }\n});\n \n \n \n','Angular 4 Error Handling and Logging!',7),(365,'Traceur is a JavaScript.next-to-JavaScript-of-today compiler that allows you to use features from the future today.\n \nTraceur supports ES6 as well as some experimental ES.next features. Traceur\'s goal is to inform the design of new JavaScript features which are only valuable if they allow you to write better code.\n \n \n','What is Traceur compiler ?',7),(366,'In Angular 4, simply retry the request using RxJS operator called .retry (). It is automatically presubscribed to an Observable, thus reissuing the request when an error occurred!\n \nImport RxJS for using retry () method-\nimport \'rxjs/add/operator/retry\';\n \nHTTP Observables for retry the failed request\nhttp.get(\'/api/users\')\n  .retry(2) //Retry this request up to 2 times.\n  .subscribe(data => {console.log(data);}, //Successful responses call the first callback.\n      (err: HttpErrorResponse) => {\n        if (err.error instanceof Error) {\n           console.log(\'Error - \', err.error.message);\n        }else {\n            console.log(\'Error status - ${err.status}, and Error Detail - ${err.error}\');\n        }\n      }\n});\n \n \n','How To handle and retry the failed request due to Poor Network Connection in Angular 4?',7),(367,'This custom validator is used for Password and Conform Password in Angular 4 which allows us to have fields that must be equal to some other fieldâ€™s i.e.\n1.     Password field\n2.     Conform Password field\n \nThis custom validator is very useful for password confirmation validation, validate card etc.\n \nExample 1 â€“\nimport { Component, OnInit } from \'@angular/core\';\nimport { FormBuilder, FormGroup } from \'@angular/forms\';\n \nexport class AppComponent implements OnInit {\n    userForm: FormGroup;\n    password = \'password\';\n \n    constructor(private fBuilder: FormBuilder) {\n        this.userForm = fBuilder.group({\n            name: fBuilder.control(null, Validators.required),\n            age: fBuilder.control(null, [Validators.required, Validators.minLength(2), Validators.maxLength(2)]),\n            email: fBuilder.control(null, [Validators.required, Validators.email]),\n            password: fBuilder.control(null, Validators.required),\n            repeatPassword: fBuilder.control(null, [Validators.required, matchValidator(this.password)])\n        });\n        console.log(this.userForm);\n    }\n \n    onSubmit(): void {\n        console.log(this.userForm.value);\n    }\n}\n \nimport {FormGroup, Validators, FormControl} from \'@angular/forms\';\n \nexport function matchValidator(fieldName: string) {\n    let fcfirst: FormControl;\n    let fcSecond: FormControl;\n \n    return function matchValidator(control: FormControl) {\n \n        if (!control.parent) {\n            return null;\n        }\n \n        // INITIALIZING THE VALIDATOR.\n        if (!fcfirst) {\n            //INITIALIZING FormControl first\n            fcfirst = control;\n            fcSecond = control.parent.get(fieldName) as FormControl;\n \n            //FormControl Second\n            if (!fcSecond) {\n                throw new Error(\'matchValidator(): Second control is not found in the parent group!\');\n            }\n \n            fcSecond.valueChanges.subscribe(() => {\n                fcfirst.updateValueAndValidity();\n            });\n        }\n \n        if (!fcSecond) {\n            return null;\n        }\n \n        if (fcSecond.value !== fcfirst.value) {\n            return {\n                matchOther: true\n            };\n        }\n \n        return null;\n    }\n}\n \nExample 2 â€“\nimport { Directive, forwardRef, Attribute } from \'@angular/core\';\nimport { NG_VALIDATORS, Validator, Validators, AbstractControl, ValidatorFn } from \'@angular/forms\';\n \n@Directive({\n    selector: \'[Equalvalidate][formControlName],[formControl],[ngModel]\',\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => EqualValidator),\n            multi: true\n        }\n    ]\n})\n \nexport class EqualValidator implements Validator {\n \n    constructor(@Attribute(\'Equalvalidate\') public Equalvalidate: string) { }\n \n    validate(abControl: AbstractControl): { [key: string]: any } {\n        // Get self value.\n        let val = abControl.value;\n \n        // Get control value.\n        let cValue = abControl.root.get(this.Equalvalidate);\n \n        // value not equal\n        if (cValue && val !== cValue.value) return {\n            Equalvalidate: false\n        }\n \n        return null;\n    }\n}\n \nHTML â€“\n<div class=\"form-group\">\n    <label for=\"Password\">Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"password\" required [(ngModel)]=\"model.password\" name=\"password\" #password=\"ngModel\">\n    <div [hidden]=\"password.valid || password.pristine\" class=\"alert alert-danger\">\n         Password is required\n    </div>\n</div>\n<div class=\"form-group\">\n    <label for=\"ConfirmPassword\">Confirm Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"confirmPassword\" required Equalvalidate=\"password\" [(ngModel)]=\"model.confirmPassword\" name=\"confirmPassword\"  #confirmPassword=\"ngModel\">\n    <div [hidden]=\"confirmPassword.valid || confirmPassword.pristine\" class=\"alert alert-danger\">\n        Password mismatch\n    </div>\n</div>\n \nExample 3 â€“\nlet passwordMatchValidator = function(fg: FormGroup) {\n    return fg.get(\'password\').value === fg.get(\'confirmPassword\').value ? null : { \'mismatch\': true };\n}\n \nconst form = new FormGroup({\n    password: new FormControl(\'\', Validators.minLength(6), Validators.maxLength(30)),\n    passwordConfirm: new FormControl(\'\', Validators.minLength(6), Validators.maxLength(30)),\n}, passwordMatchValidator);\n \n \n','How to Validate Password and Confirm Password in Angular 4?',7),(368,'This custom validator is used for Password and Conform Password in Angular 4 which allows us to have fields that must be equal to some other fieldâ€™s i.e.\n1.     Password field\n2.     Conform Password field\n \nThis custom validator is very useful for password confirmation validation, validate card etc.\n \nExample 1 â€“\nimport { Component, OnInit } from \'@angular/core\';\nimport { FormBuilder, FormGroup } from \'@angular/forms\';\n \nexport class AppComponent implements OnInit {\n    userForm: FormGroup;\n    password = \'password\';\n \n    constructor(private fBuilder: FormBuilder) {\n        this.userForm = fBuilder.group({\n            name: fBuilder.control(null, Validators.required),\n            age: fBuilder.control(null, [Validators.required, Validators.minLength(2), Validators.maxLength(2)]),\n            email: fBuilder.control(null, [Validators.required, Validators.email]),\n            password: fBuilder.control(null, Validators.required),\n            repeatPassword: fBuilder.control(null, [Validators.required, matchValidator(this.password)])\n        });\n        console.log(this.userForm);\n    }\n \n    onSubmit(): void {\n        console.log(this.userForm.value);\n    }\n}\n \nimport {FormGroup, Validators, FormControl} from \'@angular/forms\';\n \nexport function matchValidator(fieldName: string) {\n    let fcfirst: FormControl;\n    let fcSecond: FormControl;\n \n    return function matchValidator(control: FormControl) {\n \n        if (!control.parent) {\n            return null;\n        }\n \n        // INITIALIZING THE VALIDATOR.\n        if (!fcfirst) {\n            //INITIALIZING FormControl first\n            fcfirst = control;\n            fcSecond = control.parent.get(fieldName) as FormControl;\n \n            //FormControl Second\n            if (!fcSecond) {\n                throw new Error(\'matchValidator(): Second control is not found in the parent group!\');\n            }\n \n            fcSecond.valueChanges.subscribe(() => {\n                fcfirst.updateValueAndValidity();\n            });\n        }\n \n        if (!fcSecond) {\n            return null;\n        }\n \n        if (fcSecond.value !== fcfirst.value) {\n            return {\n                matchOther: true\n            };\n        }\n \n        return null;\n    }\n}\n \nExample 2 â€“\nimport { Directive, forwardRef, Attribute } from \'@angular/core\';\nimport { NG_VALIDATORS, Validator, Validators, AbstractControl, ValidatorFn } from \'@angular/forms\';\n \n@Directive({\n    selector: \'[Equalvalidate][formControlName],[formControl],[ngModel]\',\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => EqualValidator),\n            multi: true\n        }\n    ]\n})\n \nexport class EqualValidator implements Validator {\n \n    constructor(@Attribute(\'Equalvalidate\') public Equalvalidate: string) { }\n \n    validate(abControl: AbstractControl): { [key: string]: any } {\n        // Get self value.\n        let val = abControl.value;\n \n        // Get control value.\n        let cValue = abControl.root.get(this.Equalvalidate);\n \n        // value not equal\n        if (cValue && val !== cValue.value) return {\n            Equalvalidate: false\n        }\n \n        return null;\n    }\n}\n \nHTML â€“\n<div class=\"form-group\">\n    <label for=\"Password\">Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"password\" required [(ngModel)]=\"model.password\" name=\"password\" #password=\"ngModel\">\n    <div [hidden]=\"password.valid || password.pristine\" class=\"alert alert-danger\">\n         Password is required\n    </div>\n</div>\n<div class=\"form-group\">\n    <label for=\"ConfirmPassword\">Confirm Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"confirmPassword\" required Equalvalidate=\"password\" [(ngModel)]=\"model.confirmPassword\" name=\"confirmPassword\"  #confirmPassword=\"ngModel\">\n    <div [hidden]=\"confirmPassword.valid || confirmPassword.pristine\" class=\"alert alert-danger\">\n        Password mismatch\n    </div>\n</div>\n \nExample 3 â€“\nlet passwordMatchValidator = function(fg: FormGroup) {\n    return fg.get(\'password\').value === fg.get(\'confirmPassword\').value ? null : { \'mismatch\': true };\n}\n \nconst form = new FormGroup({\n    password: new FormControl(\'\', Validators.minLength(6), Validators.maxLength(30)),\n    passwordConfirm: new FormControl(\'\', Validators.minLength(6), Validators.maxLength(30)),\n}, passwordMatchValidator);\n \n \n \n','How to Validate Password and Confirm Password in Angular 4?',7),(369,'A Cross-Site Scripting (XSS) attack is a type of injection that can be carried out to users understanding of a website. The attackers inject to client-side scripts into web pages which are viewed by users.\n \nAttacker access to the userâ€™s cookies, session Ids, passwords and other private data and this XSS attacks are affect your website. The XSS attacks are common in web browsers.\n \n \nThe Cross Site Scripting (XSS) attack is a type of injection and attackers inject your web applications using the client side scripts and malicious code into web pages.\n \nAn attacker can insert vulnerability scripts and malicious code in your web applications.\nThe Angular treats all values as untrusted by default. This is the great advantages of Angular.\n \nWhen a value is Inserted Vulnerability into the DOM from â€“\n1.     A Template\n2.     Property\n3.     Attribute\n4.     Style\n5.     Class Binding\n6.     Interpolation\n7.     And so on.\nAngular recognizes the value as unsafe and automatically sanitizes and removes the script tag and other security vulnerabilities.\n \nAngular provides built-in, values as untrusted by default, anti XSS and CSRF/XSRF protection.\nThe CookieXSRFStrategy class takes care of preventing XSS and CSRF/XSRF attacks.\nThe DomSanitizationService takes care of removing the dangerous bits in order to prevent XSS attacks.\n \nAngular applications must follow the same security principles as regular web applications -\n1.     You should avoid direct use of the DOM APIs.\n2.     You should enable Content Security Policy (CSP) and configure your web server to return appropriate CSP HTTP headers.\n3.     You should Use the offline template compiler.\n4.     You should Use Server Side XSS protection.\n5.     You should Use DOM Sanitizer.\n \n6.     You should Preventing CSRF or XSRF attacks.\n \n \n \n \n','How To Handle XSS or CSRF Attacks in Angular 4 ?',7),(370,'How does Angular 2 handle with XSS or CSRF?\n \nHow Angular prevents this Attacks?\n \nThe Cross Site Scripting (XSS) attack is a type of injection and attackers inject your web applications using the client side scripts and malicious code into web pages.\n \nAn attacker can insert vulnerability scripts and malicious code in your web applications.\nThe Angular treats all values as un-trusted by default. This is the great advantages of Angular.\n \n \nWhen a value is Inserted Vulnerability into the DOM from â€“\n1.     A Template\n2.     Property\n3.     Attribute\n4.     Style\n5.     Class Binding\n6.     Interpolation\n7.     And so on.\n \nAngular recognizes the value as unsafe and automatically sanitizes and removes the script tag and other security vulnerabilities.\n \nAngular provides built-in, values as untrusted by default, anti XSS and CSRF/XSRF protection.\nThe CookieXSRFStrategy class takes care of preventing XSS and CSRF/XSRF attacks.\nThe DomSanitizationService takes care of removing the dangerous bits in order to prevent XSS attacks.\n \nAngular applications must follow the same security principles as regular web applications -\n1.     You should avoid direct use of the DOM APIs.\n2.     You should enable Content Security Policy (CSP) and configure your web server to return appropriate CSP HTTP headers.\n3.     You should Use the offline template compiler.\n4.     You should Use Server Side XSS protection.\n5.     You should Use DOM Sanitizer.\n6.     You should Preventing CSRF or XSRF attacks.\n \n \n \n \n','How Angular Preventing Cross Site Scripting (XSS) and CSRF Attacks?\n',7),(371,'The Cross Site Scripting (XSS) attack is a type of injection and attackers inject your web applications using the client side scripts and malicious code into web pages.\n \nAn attacker can insert vulnerability scripts and malicious code in your web applications.\nThe Angular treats all values as un-trusted by default. This is the great advantages of Angular.\n \nStayed Informed â€“ Angular 4 docs and Angular 5 docs\n \nWhen a value is Inserted Vulnerability into the DOM from â€“\n1.     A Template\n2.     Property\n3.     Attribute\n4.     Style\n5.     Class Binding\n6.     Interpolation\n7.     And so on.\n \nAngular recognizes the value as unsafe and automatically sanitizes and removes the script tag and other security vulnerabilities.\n \nAngular provides built-in, values as untrusted by default, anti XSS and CSRF/XSRF protection.\nThe CookieXSRFStrategy class takes care of preventing XSS and CSRF/XSRF attacks.\nThe DomSanitizationService takes care of removing the dangerous bits in order to prevent XSS attacks.\n \nAngular applications must follow the same security principles as regular web applications -\n1.     You should avoid direct use of the DOM APIs.\n2.     You should enable Content Security Policy (CSP) and configure your web server to return appropriate CSP HTTP headers.\n3.     You should Use the offline template compiler.\n4.     You should Use Server Side XSS protection.\n5.     You should Use DOM Sanitizer.\n6.     You should Preventing CSRF or XSRF attacks.\n \n \n \n \n','How Angular prevents this Attacks?',7),(372,'The cross-site scripting attack doesnâ€™t cover application-level security and for the applications security will need to implements authentication and authorization.\n \nAs you know -\n1.     Authentication - Who is this user?\n2.     Authorization - What can this user do?\n \nBest Practices to Application Level Security -\n1.     Keep updated releases of Angular library. Actually, the security team regularly update the fixes of security and defects in latest versions.\n2.     Don\'t add any custom hack on Angular library. It will create the problem to update the latest library.\n3.     You Must Prevent Trusting safe values\n4.     You Must Follow the HTTP level vulnerabilities\n5.     You Must Prevent Cross-site request forgery (CSR Fattacks)\n6.     You Must Prevent Cross-site script inclusion (XSSI)\n7.     You Must Prevent Security Policy (CSP)\n8.     Avoid direct use of the DOM APIs\n9.     Use the offline template compiler\n10. Try Server-side XSS protection\n \n \n \n \n \n','How Google Handles Security in Angular 4 Applications?',7),(373,'In Annular, the following Steps are used to building authentication and authorization for RESTful APIs and applications. It might help you -\n1.     The users send their credentials to the server which is verified by the database credentials. If everything is verified successfully, the JWT is sent back to them.\n2.     The JWT is saved in the user\'s browser in local storage or in a cookie and so on.\n3.     The presence of a JWT saved in the browser is used as an indicator that a user is currently logged in.\n4.     The expiry time of JWT is continually checked to maintain an authenticated state in the Angular applications.\n5.     The client side routes are protected and access by authenticated users only.\n6.     When user sends the XHR requests for APIs, the JWT gets sent an Authorization header using your cookies or Bearer.\n7.     When XHR requests coming on the server, before send back the responses itâ€™s validated first with configured app\'s secret keys. If everything is looking good then returns successfully responses other send the back to the bad request.\n \n \n','How Are JWTs Used to Authenticate Angular 4 Applications?',7),(374,'JSON Web Token (JWT) is an open standard which used for securely transmitting information between parties as a JSON object.\n \nThe JWTs can be signed with -\n1.     HMAC algorithm\n2.     RSA algorithm\n \n \n','What is JSON Web Token?',7),(375,'There are some scenarios where we can used JSON Web Tokens -\n1.     Authentication\n2.     Information Exchange\n \n','When should you use JSON Web Tokens?',7),(376,'In Angular 2, decorators allow developers to configure classes as particular elements by setting metadata on them. The most commons are the @Component one, for components and the @Injectable one, for classes you want to inject dependencies in.\n \nAdvanatges of using decorators are-\n \nSeparation of concerns.\nEasy for tools to provide all kinds of support in templates like- error checking, auto-completion, graphical GUI designers\nSupport multiple modifications\n \n \n',' Why are decorators used in Angular 2 ?',7),(377,'The JSON Web Tokens consist of three parts separated by dots (.), which are:\n1.     Header\n2.     Payload\n3.     Signature\n \n \n','What is the JSON Web Token structure?',7),(378,'What Is Angular CLI? The Angular CLI is a tool to initialize, develop, scaffold and maintain Angular applications.\n \nInstallation â€“\n \nnpm install -g @angular/cli\n \nExample â€“  CREATE your project directory as like below\nF:AngularTestAppDemoApp>npm install -g @angular/cli\nC:UsersAnilAppDataRoaming\npm\ng -> C:UsersAnilAppDataRoaming npm\node_modules@angularcliin\ng\nC:UsersAnilAppDataRoaming\npm`-- @angular/cli@1.5.0\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules@angularcli\node_moduleschokidar\node_modulesfsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.2: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"})\n \nThe Angular CLI will add reference to components, directives and pipes automatically in â€œapp.moduleâ€?.\n \nHow To Updating Angular CLI?\nIf you\'re using Angular CLI lesser version, uninstall angular-cli package and install new versions.\nnpm uninstall -g angular-cli\nnpm uninstall --save-dev angular-cli\n \n \nGlobal package -\nnpm uninstall -g @angular/cli\nnpm cache clean\nnpm install -g @angular/cli@latest\n \n \nLocal project package -\nrm -rf node_modules dist # use rmdir /S/Q node_modules dist in Windows Command Prompt; use rm -r -fo node_modules,dist in Windows PowerShell\nnpm install --save-dev @angular/cli@latest\nnpm install\n \nSome Additional Commands -\n1.     ng new\n2.     ng serve\n3.     ng generate\n4.     ng lint\n5.     ng test\n6.     ng e2e\n7.     ng build\n8.     ng get\n9.     ng set\n10.  ng doc\n11.  ng eject\n12.  ng xi18n\n13.  and so on\n \n \n','What Is Angular CLI? How To Updating Angular CLI?',7),(379,'Two types of errors -\n1.     If the backend returns an unsuccessful response like - 404, 500 and so on\n2.     If something goes wrong in the client side like -network error etc.\n \nIn the both cases - We are using HttpErrorResponse and return the useful information on what went wrong in this call!\n \n \n','How To Get and Log an error in Angular 4?',7),(380,'In Angular 4, simply retry the request using RxJS operator called .retry (). It is automatically presubscribed to an Observable, thus reissuing the request when an error occurred!\n \n \n','How To handle and retry the failed request due to Poor Network Connection in Angular 4?',7),(381,'http.get(\'/api/users\')\n  .retry(2) //Retry this request up to 2 times.\n  .subscribe(data => {console.log(data);}, //Successful responses call the first callback.\n      (err: HttpErrorResponse) => {\n        if (err.error instanceof Error) {\n           console.log(\'Error - \', err.error.message);\n        }else {\n            console.log(\'Error status - ${err.status}, and Error Detail - ${err.error}\');\n        }\n      }\n});\n \n \n','HTTP Observables for retry the failed request ',7),(382,'The ngFor directive instantiates a template for every element of the given iterator. The different local variables of the ngFor directive can be used in iterations.\n \nThe ngFor directive can even be used with the HTML elements. It also performs various changes in DOM. Several exported values can be aliased to local variables with the help of ngFor directive.\n \nIt allows us to build data presentation lists and tables in our HTML templates. Hereâ€™s an example of ngFor directive with the help of HTML:\n \n<tr *ngFor=â€?hero of heroesâ€?>\n \n<td>({hero.name})</td></tr>\n \n \n \n','Explain ngFor directive with an example',7),(383,'Basically property binding means passing data from the component class and setting the value of a given element in the view.\n \nIt is a one way binding in which the data is passed from component to the class. It allows us to control the element property values from component to class. Property binding in angular can take place by three ways:\n \nInterpolation can be used to define a value, as long as the value being defined is a string.\n \nWrapping brackets around the element property and binding it to the component property is the most common type of property binding.\nThe third way is by adding â€œbindâ€? before the element property.\n \n \n',' Explain property binding or one way binding in angular js.',7),(384,'The ngIf is a built-in template directive which is used to add or remove some parts of DOM. This addition or removal depends on the expression being true or false.\n \nIf the expression is evaluated to false, then the ngIf directive removes the HTML element. If the expression is evaluated to be true, then the element gets added to the DOM.\n \nSyntax- *ngIf=â€?<condition>â€?\n \nExample- <ul *ngFor=â€?let person of peopleâ€?\n \n*ngIf=â€?person.age < 30â€?>\n \n<li>{{person.name}}</li></ul>\n \n \n','Explain ngIf directive with an example.',7),(385,'In angular js, there are differences between the meta-data annotations. Some of the differences are:\n \nA directive is used to add behavior to an existing element. Whereas, a component is used to create a component with attached behavior.\nâ€œ@directiveâ€? is used to create a directive. Whereas, â€œ@componentâ€? is used to create a component.\nA directive is used to attach different behaviors to an existing DOM element. Whereas, with the help of component, we can break our application into smaller components.\nA directive is used to create reusable behavior. Whereas, a component is used to create reusable components.\nA directive does not require a view. Whereas, a component needs a view via @view.\n \n \n \n','Write the difference between directive and component in angular js.',7),(386,'As the name implies, unit test is all about testing individual units of code. In order to answer some questions, isolating the unit of code under test is really important. When we do this, we are not forced into creating related pieces such as DOM elements for sorting.\n \nWith the help of isolated unit tests, it becomes easier to implement everything. To simulate the requests, dependency injections are also provided. The individual sort function can be tested in isolation. And not only the sort function, any function can be tested in isolation.\n \n \n \n','What do you understand by Isolated Unit Tests?',7),(387,'Pipes in Angular 2 are a way to transform and format data right from your templates Out of the box you get pipes for dates, currency, percentage and character cases, but you can also easily define custom pipes of your own.\n \nHere for example we create a pipe that takes a string and reverses the order.\n \n \n','What are pipes in Angular 2 ?',7),(388,'ngRoute module is used when you want to navigate through different pages of your application but you also want your application to be a single page application.\n \nThis ngRoute module navigates through different pages of your application without reloading the entire application. The angular js route module should be included to make your application ready for routing. The ngRoute is added as a dependency in the application.\n \nThe routing engine captures the specific url requested by the user and renders the view based on the defined routing rules.\n \n \n','What is a routing in angular js?',7),(389,'Services in angular js are used to organize and share code across your application. These are the suitable objects which are wired together with the help of dependency injection.\n \nThe angular js services are lazily instantiated. The service is only instantiated by angular js only when the application component depends on it.\n \nIn angular js, new services can be made or can even be used in other built-in services. Over 30 built-in services are present in angular js.\n \n \n','What do you understand by services with reference to angular js?',7),(390,'DSL Animation functions are used for crafting animations in Angular js. Below are list of DSL Animation functions in angular js.\n \ntrigger()\nstate()\ntransition()\ngroup()\nsequence()\nstyle()\nanimate()\nkeyframes()\n \n \n \n','What are DSL Animation Functions in Angular js. List them.',7),(391,'A decorator is the core concept when developing an angular framework with version 2 and above. It may become a core language feature for JavaScript soon. In angular 4, decorators are used extensively and are also used to compile a code. There are 4 different types of decorators:\n \nClass decorators\nProperty decorators\nMethod decorators\nParameter decorators\n \nA decorator is a function that is invoked with a prefixed â€œ@â€? symbol and is immediately followed by a class, parameter, method, or property. A decorator returns the same thing which was given as an input but in an augmented form.\n \n \n','Explain component decorators in Angular4.',7),(392,'Components are just simple classes which are declared as components with the help of component decorators.\n \nIt becomes easy to create an application which already works, with the help of angular CLI commands. â€œNg generateâ€? is used to generate components, routes, services, and pipes. Simple test shells are also created with the help of this CLI command. For generating a component in angular4 with the help of CLI command, you need to follow the following syntax-\n \nng generate component component_name;\nIt generates the component and adds the component to module declarations.\n \n \n','Write the CLI command to generate a component in Angular4.',7),(393,'The impedance mismatch between dynamic applications and static documents is often solved with:\n \na library â€“ a collection of functions which are useful when writing web apps. Your code is in charge and it calls into the library when it sees fit. E.g., jQuery.\nframeworks â€“ a particular implementation of a web application, where your code fills in the details. The framework is in charge and it calls into your code when it needs something app specific. E.g., durandal, ember, etc.\n \nAngularJS takes another approach. It attempts to minimize the impedance mismatch between document centric HTML and what an application needs by creating new HTML constructs. AngularJS teaches the browser new syntax through a construct we call directives. Examples include:\n \nData binding, as in {{}}.\nDOM control structures for repeating, showing and hiding DOM fragments.\nSupport for forms and form validation.\nAttaching new behavior to DOM elements, such as DOM event handling.\nGrouping of HTML into reusable components.\n \n \n','WHAT DO I HAVE TO DO TO TRICK THE BROWSER INTO DOING WHAT I WANT?',7),(394,'Angular was a ground-up rewrite of AngularJS and has many unique features.\n \nAngular does not have a concept of â€œscopeâ€? or controllers, instead it uses a hierarchy of components as its main architectural concept\nAngular has a different expression syntax, focusing on â€œ[ ]â€? for property binding, and â€œ( )â€? for event binding\nMobile development â€“ desktop development is much easier when mobile performance issues are handled first\nModularity â€“ much core functionality has moved to modules, producing a lighter, faster core\nModern browsers only â€“ reducing the need for browser compatibility workarounds\nAngular recommends the use of Microsoftâ€™s TypeScriptlanguage, which introduces the following features:\nClass-based Object Oriented Programming\nStatic Typing\nGenerics\nTypeScriptis a superset of ECMAScript 6 (ES6), and is backwards compatible with ECMAScript 5 (i.e.: JavaScript). Angular also includes the benefits of ES6:\nLambdas\nIterators\nFor/Of loops\nPython-style generators\nReflection\nImproved dependency injectionâ€“ bindings make it possible for dependencies to be named\nDynamic loading\nAsynchronous template compilation\nSimpler Routing\nReplacing controllers and $scope with components and directives â€“ a component is a directive with a template\nReactive programmingsupport using RxJS\n \n \n','WHAT ARE THE DIFFERENCES BETWEEN ANGULAR AND ANGULAR JS?',7),(395,'Angular 4 contains some additional Enhancement and Improvement. Consider the following enhancements.\n \nSmaller & Faster Apps\nView Engine Size Reduce\nAnimation Package\nNgIf and ngFor Improvement\nTemplate\nNgIf with Else\nUse of AS keyword\nPipes\nHTTP Request Simplified\nApps Testing Simplified\nIntroduce Meta Tags\nAdded some Forms Validators Attributes\nAdded Compare Select Options\nEnhancement in Router\nAdded Optional Parameter\nImprovement Internationalization\n \n \n','WHATâ€™S NEW IN ANGULAR 4? AND WHAT ARE THE IMPROVEMENTS IN ANGULAR 4?',7),(396,'It Makes work easier compared with angular 2 and other models.\n \nWriting code is lots of cleaner and lesser.\n \nIt Improve the execution performance for Data binding and so on.\n \nIt has included Animations features.\n \nIn Angular 4, no need to apply observable methods because Angular analyses every pageâ€™s DOM and it is automatically modifies to pageâ€™s DOM.\n \nIt is also supported by Visual Studio, IntelliJ, And NET IDES and so on.\n \nMigration is really very soft and cleaner.\n \n \n \n','WHY ANGULAR 4? WHATâ€™S NEW IN ANGULAR 4?',7),(397,'Smaller & Faster Apps\nView Engine Size Reduce\nAnimation Package\nNgIf and ngFor Improvement\nOverriding Template\nNgIf with Else\nUse of AS keyword\nPipes\nHTTP Request Simplified\nApps Testing Simplified\nIntroduce Meta Tags\nAdded some Forms Validators Attributes\nAdded Compare Select Options\nEnhancement in Router\nAdded Optional Parameter\nImprovement Internationalization\nMeaningful errors handling methodology\nAnimations\n \n \n \n','Angular 2 apps will work using Angular 4 without changing anything. Angular 4 offers lots-of enhancements i.e.',7),(398,'In Annular, the following Steps are used to building authentication and authorization for RESTful APIs and applications. It might help you â€“\nThe users send their credentials to the server which is verified by the database credentials. If everything is verified successfully, the JWT is sent back to them.\nThe JWT is saved in the userâ€™s browser in local storage or in a cookie and so on.\nThe presence of a JWT saved in the browser is used as an indicator that a user is currently logged in.\nThe expiry time of JWT is continually checked to maintain an authenticated state in the Angular applications.\nThe client side routes are protected and access by authenticated users only.\nWhen user sends the XHR requests for APIs, the JWT gets sent an Authorization header using your cookies or Bearer.\nWhen XHR requests coming on the server, before send back the responses itâ€™s validated first with configured appâ€™s secret keys. If everything is looking good then returns successfully responses other send the back to the bad request.\nThere are several open source libraries are available for angular which are helps with JWTs and has the ability to Decode the JWT, Authorization header to XHR requests and so on.\n','HOW ARE JWTS USED TO AUTHENTICATE ANGULAR 4 APPLICATIONS?',7),(399,'JSON Web Token (JWT) is an open standard which used for securely transmitting information between parties as a JSON object.\nThe JWTs can be signed with â€“\nHMAC algorithm\nRSA algorithm\n','WHAT IS JSON WEB TOKEN?',7),(400,'In Angular, a Component is a special kind of directive that uses a simpler configuration which is suitable for a component-based application structure.\n','What is component in Angular 2 ?',7),(401,'There are some scenarios where we can used JSON Web Tokens â€“\nAuthentication\nInformation Exchange\n','WHEN SHOULD YOU USE JSON WEB TOKENS?',7),(402,'The JSON Web Tokens consist of three parts separated by dots (.), which are:\nHeader\nPayload\nSignature\n','WHAT IS THE JSON WEB TOKEN STRUCTURE?',7),(403,'@Input allows you to pass data into your controller and templates through html and defining custom properties. \nThis allows you to easily reuse components and have them display different values for each instance of the renderer.\n','What is @Inputs in Angular 2? ?',7),(404,'Components push out events using a combination of an @Output and an EventEmitter. \nThis allows a clean separation between reusable Components and application logic.\n',' What is @Outputs in Angular?',7),(405,'Components :\nFor register component we use @Component meta-data annotation.\nComponent is a directive which use shadow DOM to create encapsulate visual behavior called components. Components are typically used to create UI widgets.\nComponent is used to break up the application into smaller components.\nOnly one component can be present per DOM element.\n@View decorator or templateurl template are mandatory in the component.\nDirectives :\nFor register directives we use @Directive meta-data annotation.\nDirectives is used to add behavior to an existing DOM element.\nDirective is use to design re-usable components.\nMany directive can be used in a per DOM element.\nDirective donâ€™t have View.\n','What are differences between Components and Directives?',7),(406,'PrimeNG is a collection of rich UI components for Angular 2. \nPrimeNG is a sibling of the popular JavaServer Faces Component Suite, PrimeFaces. \nAll widgets are open source and free to use under Apache License 2.0, a commercial friendly license. PrimeNG is developed by PrimeTek Informatics, a company with years of expertise in developing open source UI components. \nAngularJS makes it possible to use predefined components for development like tables etc. This helps developers save time and efforts. Using PrimeNG developers can create awesome applications in no time.\n','What is primeng? How can it be used with angular2?',7),(407,'Angular 2 is a JavaScript framework for developing web applications.\nIt is a complete rewrite of Angular 1.0 ,so learning AngularJS 1.0 is not required for creating Angular 2 applications.\nIt is well suited for developing mobile applications unlike AngularJS 1.0 which was suitable for building desktop applications.It is also much faster than Angular 1.0.\nIt supports the modern browsers as well as the older browsers.Applications are better structured than previous versions of Angular.It supports server side rendering for faster rendering of views even on slow devices such as mobile.\nThe size of Angular 2 library is smaller compared to previous versions.Also Angular 2 applications use ahead of time compilation which makes them faster.\n','What is Angular 2',7),(408,'Angular 2 applications can be written in any of the following languages:\nTypescript   Prefered Language for developing Angular 2 applications.\nJavascript\nDart\nWe donâ€™t have to worry about the JavaScript or ECMAScript version as its the compilerâ€™s responsibility to manage the version issues.\nAs Angular 2 is written in TypeScript so it is preferable to write Angular 2 applications in TypeScript or ECMA6. Typescript is the prefered language to use for developing Angular 2 applications.\n','Which languages are used to write Angular 2 applications',7),(409,'A component is a building block of Angular 2 application.Angular 2 application is created as a tree of components.A component is declared by using @Component() decorator function.\n@Component({\nselector: \'first-component\',\ntemplate: `<p>Hello from first component</p>`\n})\nexport class FirstComponent {\n}\nWhen we declare Component we define metadata for component.In this example we have defined selector and template metadata for the FirstComponent component.\n','Components',7),(410,'Angular apps consists of different modules.Modules consists of collection of components,directives and services.\nAngular modules are created using the NgModules() decorator function.\nEvery Angular application consists of a root module apart from other feature modules.Every modules is created using NgModule decorator function.\n','Modules',7),(411,'Angular 2 is not just a typical upgrade but a totally new development. The whole framework is rewritten from the ground. Angular 2 got rid of many things like $scope, controllers, DDO, jqLite, angular.module etc. \nIt uses components for almost everything. Imagine that even the whole app is now a component. \nAlso it takes advantage of ES6 / TypeScript syntax. Developing Angular 2 apps in TypeScript has made it even more powerful. . Apart from that, many things have evolved and re-designed like the template engine and many more.\n','What is the need of Angular2?',7),(412,'View of a component is declared by using the template.It is the template which is rendered.\nWe can define template in line in the component template metadata property:\n@Component({\nselector: \'hello-component\',\ntemplate: \'{{Hello}}\'\n})\nWe can also define templates in separate html file and use the templateUrl property in component:\n@Component({\nselector: \'hello-component\',\ntemplateUrl: \'./hello.html\'\n})\n','Template',7),(413,'Interpolation   In interpolation binding we specify the binding using expressions\n<h2>{{employee.name}}</h2>\nProperty Binding  In property binding we bind the custom property using square brackets\n<h2 [innerText]=\"employee.name\"></h2>\nEvent Binding   In event binding we enclose the event name in parenthesis and assign the event handler method to the event:\n<button (click)=\"gotoDetail()\">View Details</button>\nTwo-way Binding  In Angular 2 we define two way binding as:\n<input [(ngModel)]=\"employee.name\"/>\n','Data bindings which are supported in Angular 2',7),(414,'There is a single root module in every Angular application.Angular application is launched by bootstrapping this root module.\n','How Angular 2 application is launched',7),(415,'The route which is matched by the router is used display the component.The template defined by the component is displayed in an area defined by the router-outlet.\n','What is router-outlet',7),(416,'Angular module is class decorated with the @NgModule decorator function.\nIts a decorator function which has one argument ,a metadata object with properties describing the module.\nSome of its important properties are:\ndeclarations views which belong to this module.\nexports declarations which are visible in the components of other modules.\nimports other modules whose classes are needed in this module.\nproviders services which are provided by this module\nbootstrap This property is set by the root module\n@NgModule({ \nproviders: list of providers, \nexports:list of components, \nimports:list of components })\n','NgModule',7),(417,'Better performance because of these reasons\nBetter change detection.\nAhead of Time compilation (AOT) improves rendering speed.\nLazy Loading.\nTypeScript can be used for developing Angular 2 applications.\nBetter syntax and application structure.\n','What are the advantages of Angular 2 over Angular 1',7),(418,'Angular 2 application is a collection of modules and components.There are two ways we can load Modules:\nEager Module loading  Loading module at application startup\nLazy loading  Loading Module only when required\nModule which is required can be loaded instead of loading all the modules at application initialization.This has the obvious advantage of improving the application startup time.\nWe enable lazy loading in Angular 2 by using the loadChildren property in route\n1\n{ path: \'URL\', loadChildren: \'modulePath#ClassName\' }\n','What is lazy loading in Angular2',7),(419,'AOT compilation stands for  Ahead Of Time compilation, in it angular compiles  components to native JavaScript and HTML during the build time instead of runtime.\nThis drastically improves the performance of the Angular 2 application.With Just in time compilation ,the compilation happens on the users browser at runtime.\nIn the case of Ahead of time compilation ,the application is compiled and optimized at the build time instead of run time.So this improves the rendering of the application UI.This approach should be used in production builds.\n','AOT compilation',7),(420,'Angular 2 is simpler and faster than Angular 1.\nYou can update the large data sets with minimal memory overhead.\nIt will speed up the initial load through server side rendering.\n','Why AngualrJS2 over AngualrJS1?',7),(421,'1) Create an folder and go inside that folder using command line.\n2) Create en empty file package.json and add following contents.\n{\n  \"name\": \"angular2-demo\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"start\": \"concurrent \"npm run tsc:w\" \"npm run lite\" \",\n    \"tsc\": \"tsc\",\n    \"tsc:w\": \"tsc -w\",\n    \"lite\": \"lite-server\",\n    \"typings\": \"typings\",\n    \"postinstall\": \"typings install\"\n  },\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"angular2\": \"2.0.0-beta.7\",\n    \"systemjs\": \"0.19.22\",\n    \"es6-promise\": \"^3.0.2\",\n    \"es6-shim\": \"^0.33.3\",\n    \"reflect-metadata\": \"0.1.2\",\n    \"rxjs\": \"5.0.0-beta.2\",\n    \"zone.js\": \"0.5.15\"\n  },\n  \"devDependencies\": {\n    \"concurrently\": \"^2.0.0\",\n    \"lite-server\": \"^2.1.0\",\n    \"typescript\": \"^1.7.5\",\n    \"typings\":\"^0.6.8\"\n  }\n}\n3) Create an empty file tsconfig.json and add following contents\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"system\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"removeComments\": false,\n    \"noImplicitAny\": false\n  },\n  \"exclude\": [\n    \"node_modules\",\n    \"typings/main\",\n    \"typings/main.d.ts\"\n  ]\n}\n4) Create an empty file typings.json and add following contents.\n{\n  \"globalDependencies\": {\n    \"core-js\": \"registry:dt/core-js\",\n    \"jasmine\": \"registry:dt/jasmine\",\n    \"node\": \"registry:dt/node\"\n  }\n}\n5) Execute following command from command line.\nnpm install\n','How to install AngualrJS2 in NodeJS?',7),(422,' TypeScript is a typed super set of JavaScript which has been built and maintained by Microsoft and chosen by the AngularJS team for development.\n','What is TypeScript ? What is the need for it in Angular2',7),(423,'AOT stands for Ahead of Time, There is no different compiler used in AOT just the sequence of process is changed.\nInstead of compiling at runtime in the browser like JIT compilation.\nThe components and templates are compiled at built time and converted to native JavaScript and html.\nSo the browser does not have compile the application so it can directly render it and save time and system resources.\nAdvantages:AOT provides build time error detection so many compile type errors are detected before it running the application.\nFaster download times as the application is compiled and bundled at build time, which eliminates the need of loading the angular compiler and its libraries leading to a lesser runtime.\nFaster Rendering time as the application is already compiled and only needs to be rendered on the browser.\nDisadvantages: Angular version lower than 4 produces large JavaScript bundles after compilation, which defeats the purpose of AOT.\nIt only works only with HTML and CSS, other file types need to be built previously.\nIt needs a clean-up step before compiling.\n','What is AOT Compilation? Explain its advantages and disadvantages?',7),(424,'Change detection basically is the process of detecting the changes in the internal state of our application which might be caused due to Events, XHR and Timers and make it visible in the user interface.\nChange detection work on the principle of zone.js in Angular 2/4.\n','What is Change detection?',7),(425,'Directives in Angular are used to add behavior to our existing DOM elements.\nWe use @Directive meta-data annotation to register directives.\nDirectives in angular are used to design reusable components.\nDirectives do not have their own views.\n','What are Directives in Angular 2/4?',7),(426,'If the change in one of the child components needs to be reflected to any of its parent component, we can emit the event by using Event Emitter API in Angular.\nEventEmitter is class present in @angular/core module, which is used by components and directives to emit custom events.\n','What Are Event Emitters in Angular 2/4?',7),(427,' In Angular 2/4, dependency injection gives us the ability to add functionality of a component at runtime.\nIt also provides us a way to create a service that is a reusable piece of code, which can be used across our application to perform a particular function.\n','What is dependency injection in angular 2/4?',7),(428,'Typings is a way of installing the Typescript definitions using typings.json file, as it is necessary as the browser does not understand typescript natively and hence it must be transpiled first before rendering.\n','What are typings in Angular 2/4?',7),(429,'Module loaders in Angular are used to bundle different modules that contain their dependencies along with angular components into one bundle or multiple bundles (For lazy loading) and load them in the browser.\n','What are module loaders in Angular 2/4?',7),(430,' Systemjs is a client side module bundler in angular as it loads modules (components and other files) on demand instead of loading an entire application at startup.\nThis largely reduces load times while starting up the app.\nThe up side of Webpack over Systemjs is that it bundles and creates a single file called bundle.js, which contains HTML, CSS and JS etc.\nWhile the initial load time might take a few seconds once the app is cached it becomes lightning fast and will lead to a large boost in performance.\n ','What is the use of systemjs? How is webpack better to use in Angular 2/4?',7),(431,'In Angular 2/4 services are reusable function which include their properties used to perform some common functionality which can be used by different components instead of writing the same code again and again for different components a data service can be used by multiple components (via dependency injection).\n','What are services in Angular 2/4?',7),(432,'Steps to enable lazy loading in Angular 2/4 are as follows:\nAdd loadChildren in place of components in the routes in the exported class in the Main Routing module of your application.\nNow change forRoot to forChild in the module or feature level router config module and you are done.\n','How to enable lazy loading in Angular 2/4?',7),(433,'ECMAScript is a subset of JavaScript. JavaScript is basically ECMAScript at its core but builds upon it. Languages such as ActionScript, JavaScript, JScript all use ECMAScript as its core. \nAs a comparison, AS/JS/JScript are 3 different cars, but they all use the same engine... each of their exteriors is different though, and there have been several modifications done to each to make it unique. Angular2 supports ES6 and higher versions.\n',' What is ECMA Script ?',7),(434,'Angular 2/4 and JQuery at its core are very different concept all together.\nJQuery deals with manipulating DOM directly while Angular is used primarily for binding data.\nIn some scenarios, using JQuery libraries can be used as quick solutions but doing this we might face problems in the future in terms of pre-rendering.\n','Is it good to use JQuery in Angular 2/4?',7),(435,'Steps to add and use jQuery in Angular 2/4 are as follows:\nIn your node.js terminal type npm install --save jQuery and hit enter.\nThen install jQuery Declaration files by typing npm install -D @types/jquery and hitting enter.\nNext Import into your component and then provide a typed reference for jQuery.\n','How can you use JQuery in Angular 2/4?',7),(436,'@ViewChild decorator is used when a parent component needs to communicate with and pass data to the child component.\nWe need to pass the class name of the child component to @Viewchild decorator function.\n','What is viewchild?',7),(437,' In Angular 2/4, services are used to communicate data between different components.\nAs one component could pass, the data to the service while another component could read from it.\nTherefore, this data service could pass the data from one components to multiple components.\n','How to share global data across components?',7),(438,'Angular has used 6th Edition â€“ ECMAScript 2015 (Es6). However, there are configuration available to try some experimental feature from  7th Edition â€“ ECMAScript 2016 (Es7).\nInheritance of component has become so easy. Now Angular 2.0 can be developed using  Object oriented thinking. Inheritance has been possible for javascript. \nA number of libraries has been developed to support this concept. However, with ES2015 all those  nonstandard abstractions can be got rid of. As  ES2015 defines an easier inheritance.\n','Which version is supported by Angular2?',7),(439,'Traceur compiler compiles ECMAScript Edition 6 (ES6) (including classes, generators and so on) code on the fly to regular Javascript (ECMAScript Edition 5 [ES5]) to make it compatible for the browser.\nTraceur itself is written in ES6, compiled to ES5. Details can be found here.\n','What is Traceur compiler?',7),(440,'In this section, the development environment setup has been described. Angularjs 2.0 application can be developed using:\nangular-cli: This is a command line tool for Angularjs 2.0 application development which support live coding and deployment instantly. This is much easier and much straight forward.\nsystemjs: This is the traditional way of developing angularjs application. \n','How to setup development environment for Angular2? Please follow the step by step approach with code configuration/screenshots?',7),(441,'Angular2 provides 3 different components for routing configuration:\nRoutes is the configuration to describe applicationâ€™s different routes\nRouterOutlet is a â€œplaceholderâ€? component that holds the view for each route\nRouterLink is a directive to link to routes\nRoutes:\nRoutes is an object to describe the routes of the application. For instance, here is an example for our previously specified goal.\nconst routes: Routes  = [\n { path: \'\', redirectTo: \'login\', pathMatch:\'full\' },\n { path: \'login\', component: LoginComponent },\n { path: \'home\', component: HomeComponent ,\n  children: [\n   { path: \'\', component: DashBoardComponent },\n   {path: \'events\', component: EventsComponent}\n  ]},\n { path: \'register\', component: RegisterComponent },\n { path: \'about\', component: AboutComponent },\n { path: \'**\', component: p404Component },\n];\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nconst routes: Routes  = [\n { path: \'\', redirectTo: \'login\', pathMatch:\'full\' },\n { path: \'login\', component: LoginComponent },\n { path: \'home\', component: HomeComponent ,\n  children: [\n   { path: \'\', component: DashBoardComponent },\n   {path: \'events\', component: EventsComponent}\n  ]},\n { path: \'register\', component: RegisterComponent },\n { path: \'about\', component: AboutComponent },\n { path: \'**\', component: p404Component },\n];\nWe have configure routes which is an array of Route. Each entry of the array is  The complete list of possible fields used in this configuration are as following:\npath â€“ url of the route used by the matcher DSL.\ncomponent â€“name of the target component.\npathMatch â€“ specifies the matching strategy, example : full.\nredirectTo -url that will replace the current matched segment in case of redirection.\noutlet â€“ name of the outlet used as a placeholder for the component. If there is no outlet it would be placed in <router-outlet>\ncanActivate â€“ array of DI tokens used to find CanActivate handlers.\ncanActivateChild â€“ array of DI tokens used to find CanActivateChild handlers.\ncanDeactivate â€“ array of DI tokens used to find CanDeactivate handlers.\ndata is additional data provided to the component via ActivatedRoute.\nresolve is a map of DI tokens used to look up data resolvers.\nchildren is an array used to define nested routes.\nRouter Directives\nAngular RouterModule has 3 different directives. Such as:\nrouter-outlet\nrouter-link\nrouterLinkActive\nrouter-outlet:\nrouter-outlet is a component from angular/router library. The router is the placeholder to display views inside  <router-outlet> tags. As the routes changes, the view inside the <router-outlet> tags also change accordingly.\n<div class=\"container-fluid\">\n        <router-outlet></router-outlet>\n</div>\n1\n2\n3\n<div class=\"container-fluid\">\n        <router-outlet></router-outlet>\n</div>\nrouter-link:\nrouter-link directive is an alternative of HTML href property. The syntax is as following:\n<a [routerLink]=\"[\'/url\']\">Url Title</a>\n1\n<a [routerLink]=\"[\'/url\']\">Url Title</a>\nrouter-link directive can also handle query parameter. For example, once we land in /hoem/events page, it shows a list of events , if we want to go to directly one of the events page, we can just put the iid of that specific event and can land of the event details page for event 01. For this purpose, we use [queryParams] binding. [queryParams] takes an object such as {â€˜idâ€™:01} and can\nFirstly, We have bound router-link directive to events array as following:\n<a [routerLink]=\"[\'/home/events]\">Events</a>\n1\n<a [routerLink]=\"[\'/home/events]\">Events</a>\nNow inside app.router.ts we have configure the queryParams binding as following:\nthis.router.navigate([\'/home/events\', event.id]);\n1\nthis.router.navigate([\'/home/events\', event.id]);\nOtherwise, if we want to pass the queryParams in an object , we can also do that as following:\n<a [routerLink]=\"[\'/home/events, { id: \'event01\' }]\">Event 01 </a>\n<a [routerLink]=\"[\'/home/events, { id: \'event01\' }]\">Event 01 </a>\nOR\n<a [routerLink]=\"[\'/home/events, 1]\">Event 1</a>\n<a [routerLink]=\"[\'/home/events, 1]\">Event 1</a>\nrouterLinkActive:\nThe RouterLinkActive directive toggles css classes for active RouterLinks based on the current RouterState. This cascades down through each level in our route tree, so parent and child router links can be active at the same time. To override this behavior, we can bind to the [routerLinkActiveOptions] input binding with the { exact: true } expression. By using { exact: true }, a given RouterLink will only be active if its URL is an exact match to the current URL.\n','What are the main routing COMPONENTS?',7),(442,'In Angular2.0, different decorators are used to pass variables to class. Such as @NgModules decorator is used for Modules. @Component decorator is used to pass variables to class. Decorators uses metadata to attach variable to component or module class.\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [],\n  exports:[\n      AppComponent\n  ],\n  bootstrap: [AppComponent]\n})\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [],\n  exports:[\n      AppComponent\n  ],\n  bootstrap: [AppComponent]\n})\nHere @NgModule pass a metadata, which is kind of json variable with properties such as declaration, imports, providers, export and bootstrap.\nSimilarly, @Component decorator also used metadata.\n@Component({\n  selector: \'app-root\',\n  templateUrl: \'./app.component.html\',\n  styleUrls: [\'./app.component.css\']\n})\n@Component({\n  selector: \'app-root\',\n  templateUrl: \'./app.component.html\',\n  styleUrls: [\'./app.component.css\']\n})\n','Metadata in Angularjs 2:',7),(443,'Data Binding in Angularjs 2:\nFrom angular 1.x to angular 2.0, the data binding has not been changed in template way. However, from performance point of view this has been changed dramatically.\nThere are two types of data binding available in angular 2.0\nOne way\nTwo way\nHowever, any variable is available within the scope of the component and they can be passed from one component to another component. This way, one of the significant concentration that developed used to give in case of variable declaration in angular 1.x has become much simpler.\n','Briefly explain Data Binding in Angularjs 2.0?',7),(444,'@NgModule is a decorator function. A decorator function allows users to mark something as Angular 2 thing (could be a module or component or something else) and it enables you to provide additional data that determines how this Angular 2 thing will be processed, instantiated and used at the runtime. So, whenever user writes @NgModule, it tells the Angular 2 module, whatâ€™s going to be included and used in and using this module.\n',' What is @NgModule?',7),(445,'Angular 2 has been developed to be more synchronized with modern HTML5. Therefore, events has been changed to bind to the DOM API Events with similar syntax.\nFor example, ng-click has been replaced with (click). Same as ng-submit has been changed to  (submit). () parenthesis has been used as the sytax for event emitter.\n//Angularjs 1.x\n<div ng-click=\"eventName()\"></div>\n//Angular 2.0\n<div (click)=\" eventName ()\"></div>\n \nRespective event object can also be passed as HTML5. Such as\n \n<div (mousedown)=\"eventName($event)\"></button>\n \nAnd then in component\n \n@Component(...)\n \nclass AppComponent {\n \n  eventName(event) {\n \n    event.preventDefault();\n \n  }\n \n}\nThere is another way of binding event to DOM element is as following\n<input type=\"text\" on-keypress=\"onKeyPress($event)\">\nThe details has been described in later interview questions series.\n','Briefly explain Event Binding in Angular 2?',7),(446,'\nAngular 4 contains some additional Enhancement and Improvement. Consider the following enhancements.\n1.    Smaller & Faster Apps\n2.    View Engine Size Reduce\n3.    Animation Package\n4.    NgIf and ngFor Improvement\n5.    Template\n6.    NgIf with Else\n7.    Use of AS keyword\n8.    Pipes\n9.    HTTP Request Simplified\n10. Apps Testing Simplified\n11. Introduce Meta Tags\n12. Added some Forms Validators Attributes\n13. Added Compare Select Options\n14. Enhancement in Router\n15. Added Optional Parameter\n16. Improvement Internationalization\n1. Smaller & Faster Apps - Angular 4 applications is smaller & faster in comparison with Angular 2.\n2. View Engine Size Reduce - Some changes under to hood to what AOT generated code compilation that means in Angular 4, improved the compilation time. These changes reduce around 60% size in most cases.\n3. Animation Package- Animations now have their own package i.e. @angular/platform-browser/animations\n4. Improvement - Some Improvement on *ngIf and *ngFor.\nStayed Informed â€“ Angular 2 vs. Angular 1\n5. Template - The template is now ng-template. You should use the â€œng-templateâ€? tag instead of â€œtemplateâ€?. Now Angular has its own template tag that is called â€œng-templateâ€?.\n6. NgIf with Else â€“ Now in Angular 4, possible to use an else syntax as,\n<div *ngIf=\"user.length > 0; else empty\"><h2>Users</h2></div>\n<ng-template #empty><h2>No users.</h2></ng-template>\n7. AS keyword â€“ A new addition to the template syntax is the â€œas keywordâ€? is use to simplify to the â€œletâ€? syntax.\nUse of as keyword,\n<div *ngFor=\"let user of users | slice:0:2 as total; index as = i\">\n    {{i+1}}/{{total.length}}: {{user.name}}\n</div>\nTo subscribe only once to a pipe â€œ|â€? with â€œasyncâ€? and If a user is an observable, you can now use to write,\n<div *ngIf=\"users | async as usersModel\">\n    <h2>{{ usersModel.name }}</h2> <small>{{ usersModel.age }}</small>\n</div>\n8. Pipes - Angular 4 introduced a new â€œtitlecaseâ€? pipe â€œ|â€? and use to changes the first letter of each word into the uppercase. \nThe example as,\n<h2>{{ \'anil singh\' | titlecase }}</h2>\n<!-- OUPPUT - It will display \'Anil Singh\' -->\n9. Http - Adding search parameters to an â€œHTTP requestâ€? has been simplified as,\n//Angular 4 -\nhttp.get(`NULL/api/users`, { params: { sort: \'ascending\' } });\n//Angular 2-\nconst params = new URLSearchParams();\nparams.append(\'sort\', \'ascending\');\nhttp.get(`NULL/api/users`, { search: params });\n10. Test- Angular 4, overriding a template in a test has also been simplified as,\n//Angular 4 -\nTestBed.overrideTemplate(UsersComponent, \'<h2>{{users.name}}</h2>\');\n//Angular 2 -\nTestBed.overrideComponent(UsersComponent, {\n    set: { template: \'<h2>{{users.name}}</h2>\' }\n});\n11. Service- A new service has been introduced to easily get or update â€œMeta Tagsâ€? i.e.\n@Component({\n    selector: \'users-app\',\n    template: `<h1>Users</h1>`\n})\nexport class UsersAppComponent {\n    constructor(meta: Meta) {\n        meta.addTag({ name: \'Blogger\', content: \'Anil Singh\' });\n    }\n}\n12. Forms Validators - One new validator joins the existing â€œrequiredâ€?, â€œminLengthâ€?, â€œmaxLengthâ€? and â€œpatternâ€?. An email helps you validate that the input is a valid email.\n13. Compare Select Options - A new â€œcompareWithâ€? directive has been added and it used to help you compare options from a select.\n<select [compareWith]=\"byUId\" [(ngModel)]=\"selectedUsers\">\n    <option *ngFor=\"let user of users\" [ngValue]=\"user.UId\">{{user.name}}</option>\n</select>\n14. Router - A new interface â€œparamMapâ€? and â€œqueryParamMapâ€? has been added and it introduced to represent the parameters of a URL. \nconst uid = this.route.snapshot.paramMap.get(\'UId\');\nthis.userService.get(uid).subscribe(user => this.name = name);\n15. CanDeactivate - This â€œCanDeactivateâ€? interface now has an extra (optional) parameter and it is containing the next state.\n16. I18n - The internationalization is tiny improvement.\n//Angular 4-\n<div [ngPlural]=\"value\">\n    <ng-template ngPluralCase=\"0\">there is nothing</ng-template>\n    <ng-template ngPluralCase=\"1\">there is one</ng-template>\n</div>\n//Angular 2-\n<div [ngPlural]=\"value\">\n    <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n    <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n</div>\n','Whatâ€™s New in Angular 4? AND what are the New Improvements in Angular 4?',7),(447,'Angular 4 Setup Guide  -\nStep 1. Setup the Development Environment\n1.     Install Node.js and NPM  -If you are not already have on your machine!\n2.     Then you Install the Angular CLI globally!\nnpm install -g @angular/cli\nStep 2 - Navigate to project directory and Create a new project!\n$ cd ~/Dev/\n$ mkdir appDir && cd appDir \n$ ng new my-app\nNote - ng new takes time to run!\nStep 3 - Navigate to project & Run Local Server!\n$ cd /path/to/your/newly/created/app/\nlike\n$ cd ~/Dev/appDir/my-app/\n$ ng serve\nOpen local host - http://localhost:53865/\nNote â€“The ng serve command is used to launches the server, watches your files and rebuilds the app as you make changes to those files!\nStep 4 -Edit Project and Save files\n - Open file in appDir/my-app/src/app/app.component.ts, EDIT and SAVE\nimport { Component } from \'@angular/core\';\n @Component({\n   selector: \'app-root\',\n   templateUrl: \'./app.component.html\',\n   styleUrls: [\'./app.component.css\']\n })\n export class AppComponent {\n   title = \'Welcome you in Angular 4!\';\n }\nStep 5. Test build\nng build\n','Angular 4 Setup Guide for Development Environment!',7),(448,'Angular 4 contains some additional Enhancement and Improvement. Consider the following enhancements.\n1.      Smaller & Faster Apps\n2.      View Engine Size Reduce\n3.      Animation Package\n4.      NgIf and ngFor Improvement\n5.      Template\n6.      NgIf with Else\n7.      Use of AS keyword\n8.      Pipes\n9.      HTTP Request Simplified\n10.   Apps Testing Simplified\n11.   Introduce Meta Tags\n12.   Added some Forms Validators Attributes\n13.   Added Compare Select Options\n14.   Enhancement in Router\n15.   Added Optional Parameter\n16.   Improvement Internationalization\n1. Smaller & Faster Apps - Angular 4 applications is smaller & faster in comparison with Angular 2.\n2. View Engine Size Reduce - Some changes under to hood to what AOT generated code compilation that means in Angular 4, improved the compilation time. These changes reduce around 60% size in most cases.\n3. Animation Package- Animations now have their own package i.e. @angular/platform-browser/animations\n4. Improvement - Some Improvement on *ngIf and *ngFor.\n5. Template - The template is now ng-template. You should use the â€œng-templateâ€? tag instead of â€œtemplateâ€?. Now Angular has its own template tag that is called â€œng-templateâ€?.\n6. NgIf with Else â€“ Now in Angular 4, possible to use an else syntax as,\n<div *ngIf=\"user.length > 0; else empty\"><h2>Users</h2></div>\n<ng-template #empty><h2>No users.</h2></ng-template>\n7. AS keyword â€“ A new addition to the template syntax is the â€œas keywordâ€? is use to simplify to the â€œletâ€? syntax.\nUse of as keyword,\n<div *ngFor=\"let user of users | slice:0:2 as total; index as = i\">\n    {{i+1}}/{{total.length}}: {{user.name}}\n</div>\nTo subscribe only once to a pipe â€œ|â€? with â€œasyncâ€? and If a user is an observable, you can now use to write,\n<div *ngIf=\"users | async as usersModel\">\n    <h2>{{ usersModel.name }}</h2> <small>{{ usersModel.age }}</small>\n</div>\n8. Pipes - Angular 4 introduced a new â€œtitlecaseâ€? pipe â€œ|â€? and use to changes the first letter of each word into the uppercase. \nThe example as,\n<h2>{{ \'anil singh\' | titlecase }}</h2>\n<!-- OUPPUT - It will display \'Anil Singh\' -->\n9. Http - Adding search parameters to an â€œHTTP requestâ€? has been simplified as,\n//Angular 4 -\nhttp.get(`NULL/api/users`, { params: { sort: \'ascending\' } });\n//Angular 2-\nconst params = new URLSearchParams();\nparams.append(\'sort\', \'ascending\');\nhttp.get(`NULL/api/users`, { search: params });\n10. Test- Angular 4, overriding a template in a test has also been simplified as,\n//Angular 4 -\nTestBed.overrideTemplate(UsersComponent, \'<h2>{{users.name}}</h2>\');\n//Angular 2 -\nTestBed.overrideComponent(UsersComponent, {\n    set: { template: \'<h2>{{users.name}}</h2>\' }\n});\n11. Service- A new service has been introduced to easily get or update â€œMeta Tagsâ€? i.e.\n@Component({\n    selector: \'users-app\',\n    template: `<h1>Users</h1>`\n})\nexport class UsersAppComponent {\n    constructor(meta: Meta) {\n        meta.addTag({ name: \'Blogger\', content: \'Anil Singh\' });\n    }\n}\n12. Forms Validators - One new validator joins the existing â€œrequiredâ€?, â€œminLengthâ€?, â€œmaxLengthâ€? and â€œpatternâ€?. An email helps you validate that the input is a valid email.\n13. Compare Select Options - A new â€œcompareWithâ€? directive has been added and it used to help you compare options from a select.\n<select [compareWith]=\"byUId\" [(ngModel)]=\"selectedUsers\">\n    <option *ngFor=\"let user of users\" [ngValue]=\"user.UId\">{{user.name}}</option>\n</select>\n14. Router - A new interface â€œparamMapâ€? and â€œqueryParamMapâ€? has been added and it introduced to represent the parameters of a URL. \nconst uid = this.route.snapshot.paramMap.get(\'UId\');\nthis.userService.get(uid).subscribe(user => this.name = name);\n15. CanDeactivate - This â€œCanDeactivateâ€? interface now has an extra (optional) parameter and it is containing the next state.\n16. I18n - The internationalization is tiny improvement.\n//Angular 4-\n<div [ngPlural]=\"value\">\n    <ng-template ngPluralCase=\"0\">there is nothing</ng-template>\n    <ng-template ngPluralCase=\"1\">there is one</ng-template>\n</div>\n//Angular 2-\n<div [ngPlural]=\"value\">\n    <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n    <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n</div>\n','What\'s New in Angular 4? [Angular 4 New Features]',7),(449,'\nAngular 2 apps will work using Angular 4 without changing anything. Angular 4 offers lots-of enhancements i.e.\n1.     Angular 4 is smaller than Angular 2\n2.     Angular 4 is faster than Angular 2\n3.     Angular 4 has enhanced *ngFor and *ngIf\n4.     Angular 4 has more meaningful errors\n5.     Overriding a template in Angular v4\n6.     Angular 4 has great Animations\nAngular 4 Installation Process on Windows - \nnpm install @angular/common@latest @angular/compiler@latest @angular/compiler-cli@latest @angular/core@latest @angular/forms@latest @angular/http@latest @angular/platform-browser@latest @angular/platform-browser-dynamic@latest @angular/platform-server@latest @angular/router@latest @angular/animations@latest typescript@latest --save\nAngular 4 Installation Process on Linux/Mac-\nnpm install @angular/{common,compiler,compiler-cli,core,forms,http,platform-browser,platform-browser-dynamic,platform-server,router,animations}@latest typescript@latest â€“save\n','How to Upgrade Web Applications from Angular 2 to Angular 4?',7),(450,'\nThe HTTP Interceptors are used to Set Http Headers Request in Angular 4 using the import from â€œ@angular/common/httpâ€?. The HTTP Interceptors are available in Angular 4.x versions.\nThe HTTP Interceptors are not supported in Angular 2. We are creating the HttpClient Injectable class to achieve this. You can see the below examples for set http headers request with and without HTTP interceptors.\nWhat Is the Use of Interceptors in Angular 4?\nThe Interceptors is a common used to set default headers for all responses.\nExample 1 â€“  For Angular 4\nSet Headers Http Request Using Http Interceptors -\nThe HTTP Interceptors are now available via using the new HttpClient from angular/common/http in the Angular 4.x versions.\nSteps 1 - Writing an interceptor for adds a header for every request!\nimport {HttpEvent, HttpInterceptor, HttpHandler, HttpRequest} from \'@angular/common/http\';\nexport class AddHttpHeaderInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Get the auth header from the service.\n    const authHeader = \'token_value\';\n    const clonedReq = req.clone({headers: req.headers.set(\'Authorization\', authHeader)});\n    return next.handle(clonedReq);\n  }\n}\nSteps 2 - Providing your interceptor!\n- After creating the interceptor, we need to register it using the HTTP_INTERCEPTORS in the @NgModule()\nimport { HTTP_INTERCEPTORS } from \'@angular/common/http\';\n@NgModule({\n  providers: [{\n    provide: HTTP_INTERCEPTORS,\n    useClass: AddHttpHeaderInterceptor,\n    multi: true,\n  }],\n})\nexport class AppModule {}\nExample 2-  For Angular 2\nSet Headers Http Request without HTTP Interceptors  -\nSteps 1 â€“ We are creating the HttpClient Injectable class.\nimport {Injectable} from \'@angular/core\';\nimport {Http, Headers} from \'@angular/http\';\n@Injectable()\nexport class HttpClient {\n  constructor(private http: Http) {}\n  createAuthHeader(headers: Headers) {\n    headers.append(\'Content-Type\', \'application/json\');\n    headers.append(\'Authorization\', \'Basic \' + btoa(\'user-name:password\')); \n  }\n  get(url) {\n    let headers = new Headers();\n    this.createAuthHeader(headers);\n    return this.http.get(url, {headers: headers});\n  }\n  post(url, data) {\n    let headers = new Headers();\n    this.createAuthHeader(headers);\n    return this.http.post(url, data, {headers: headers});\n  }\n  put(url, data) {\n    let headers = new Headers();\n    this.createAuthHeader(headers);\n    return this.http.put(url, data, {headers: headers});\n  }\n}\nSteps 2 - Injecting the HttpClient object in the Component\nimport { HttpClient } from \'../http-client\';\nexport class userComponent {\n  constructor(http: HttpClient) {\n    this.http = httpClient;\n  }\n  getUsers() {\n    this.http.get(url).subscribe(data =>{console.log(data); });\n  }\n  addUsers(user) {\n    this.http.post(url, user).subscribe(data =>{console.log(data); });\n  }\n}\n','How to Set Http Request Header in Angular 4 and Angular 2?',7),(451,'Angular 4 contains some additional Enhancement and Improvement. Consider the following enhancements.\n1.    Smaller & Faster Apps\n2.    View Engine Size Reduce\n3.    Animation Package\n4.    NgIf and ngFor Improvement\n5.    Template\n6.    NgIf with Else\n7.    Use of AS keyword\n8.    Pipes\n9.    HTTP Request Simplified\n10. Apps Testing Simplified\n11. Introduce Meta Tags\n12. Added some Forms Validators Attributes\n13. Added Compare Select Options\n14. Enhancement in Router\n15. Added Optional Parameter\n16. Improvement Internationalization\n1. Smaller & Faster Apps - Angular 4 applications is smaller & faster in comparison with Angular 2.\n2. View Engine Size Reduce - Some changes under to hood to what AOT generated code compilation that means in Angular 4, improved the compilation time. These changes reduce around 60% size in most cases.\n3. Animation Package- Animations now have their own package i.e. @angular/platform-browser/animations\n4. Improvement - Some Improvement on *ngIf and *ngFor.\nStayed Informed â€“ Angular 2 vs. Angular 1\n5. Template - The template is now ng-template. You should use the â€œng-templateâ€? tag instead of â€œtemplateâ€?. Now Angular has its own template tag that is called â€œng-templateâ€?.\n6. NgIf with Else â€“ Now in Angular 4, possible to use an else syntax as,\n<div *ngIf=\"user.length > 0; else empty\"><h2>Users</h2></div>\n<ng-template #empty><h2>No users.</h2></ng-template>\n7. AS keyword â€“ A new addition to the template syntax is the â€œas keywordâ€? is use to simplify to the â€œletâ€? syntax.\nUse of as keyword,\n<div *ngFor=\"let user of users | slice:0:2 as total; index as = i\">\n    {{i+1}}/{{total.length}}: {{user.name}}\n</div>\nTo subscribe only once to a pipe â€œ|â€? with â€œasyncâ€? and If a user is an observable, you can now use to write,\n<div *ngIf=\"users | async as usersModel\">\n    <h2>{{ usersModel.name }}</h2> <small>{{ usersModel.age }}</small>\n</div>\n8. Pipes - Angular 4 introduced a new â€œtitlecaseâ€? pipe â€œ|â€? and use to changes the first letter of each word into the uppercase. \nThe example as,\n<h2>{{ \'anil singh\' | titlecase }}</h2>\n<!-- OUPPUT - It will display \'Anil Singh\' -->\n9. Http - Adding search parameters to an â€œHTTP requestâ€? has been simplified as,\n//Angular 4 -\nhttp.get(`NULL/api/users`, { params: { sort: \'ascending\' } });\n//Angular 2-\nconst params = new URLSearchParams();\nparams.append(\'sort\', \'ascending\');\nhttp.get(`NULL/api/users`, { search: params });\n10. Test- Angular 4, overriding a template in a test has also been simplified as,\n//Angular 4 -\nTestBed.overrideTemplate(UsersComponent, \'<h2>{{users.name}}</h2>\');\n//Angular 2 -\nTestBed.overrideComponent(UsersComponent, {\n    set: { template: \'<h2>{{users.name}}</h2>\' }\n});\n11. Service- A new service has been introduced to easily get or update â€œMeta Tagsâ€? i.e.\n@Component({\n    selector: \'users-app\',\n    template: `<h1>Users</h1>`\n})\nexport class UsersAppComponent {\n    constructor(meta: Meta) {\n        meta.addTag({ name: \'Blogger\', content: \'Anil Singh\' });\n    }\n}\n12. Forms Validators - One new validator joins the existing â€œrequiredâ€?, â€œminLengthâ€?, â€œmaxLengthâ€? and â€œpatternâ€?. An email helps you validate that the input is a valid email.\n13. Compare Select Options - A new â€œcompareWithâ€? directive has been added and it used to help you compare options from a select.\n<select [compareWith]=\"byUId\" [(ngModel)]=\"selectedUsers\">\n    <option *ngFor=\"let user of users\" [ngValue]=\"user.UId\">{{user.name}}</option>\n</select>\n14. Router - A new interface â€œparamMapâ€? and â€œqueryParamMapâ€? has been added and it introduced to represent the parameters of a URL. \nconst uid = this.route.snapshot.paramMap.get(\'UId\');\nthis.userService.get(uid).subscribe(user => this.name = name);\n15. CanDeactivate - This â€œCanDeactivateâ€? interface now has an extra (optional) parameter and it is containing the next state.\n16. I18n - The internationalization is tiny improvement.\n//Angular 4-\n<div [ngPlural]=\"value\">\n    <ng-template ngPluralCase=\"0\">there is nothing</ng-template>\n    <ng-template ngPluralCase=\"1\">there is one</ng-template>\n</div>\n//Angular 2-\n<div [ngPlural]=\"value\">\n    <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n    <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n</div>\n','Whatâ€™s New in Angular 4? AND what are the Improvements in Angular 4?',7),(452,'\nThe forRoot is a static method and itâ€™s very easy for developers to configure the modules and the best example is - RouterModule.forRoot.\nThe RouterModule also offers a forChild. Itâ€™s also a static method and use to configure the routes of lazy-loaded modules. The forRoot and forChild are the traditional names for methods that configure services in root.\nStayed Informed â€“ Angular4 Documentations with Example\nExample â€“\nimport { NgModule } from \'@angular/core\';\nimport { RouterModule, Routes  } from \'@angular/router\';\nimport { HttpModule } from \'@angular/http\';\nimport { FormsModule, ReactiveFormsModule } from \'@angular/forms\';\nimport { AppComponent } from \'./components/app/app.component\'\nimport { NavMenuComponent } from \'./components/navmenu/navmenu.component\';\nimport { HomeComponent } from \'./components/home/home.component\';\nimport { UserComponent } from \'./components/user/user.component\';\nimport { UserService } from \'./components/service/user.service\';\nimport { BarCodePipe } from \'./components/pipe/custom.pipe\';\nexport const sharedConfig: NgModule = {\n    bootstrap: [ AppComponent ],\n    declarations: [\n        AppComponent,\n        NavMenuComponent,\n        HomeComponent,\n        UserComponent,\n        BarCodePipe\n    ],\n    imports: [\n        RouterModule.forRoot([\n            { path: \'\', redirectTo: \'home\', pathMatch: \'full\'},\n            { path: \'home\', component: HomeComponent },\n            { path: \'user\', component: UserComponent },\n            { path: \'**\', redirectTo: \'home\' }\n        ])\n    ],\n    providers: [UserService]\n};\n','What Is the forRoot Method in Angular 4?',7),(453,'\nThe â€œIfâ€? evaluates expression and then renders the â€œelseâ€? or â€œthenâ€? template in its place when expression is â€œtruthyâ€? or â€œfalsyâ€? respectively.\nStayed Informed â€“ Angular 4 vs. Angular 2\nStayed Informed â€“ Angular 2 if else examples\nThen: - This template is the inline template of â€œIfâ€? unless bound to a different value.\nElse: - This template is blank unless it is bound.\nSelectors: -\n1.      If\n2.      If then\n3.      If else\nThe multiple examples for Angular 4 if else and then as given bellows,\nSyntax:-\n<element *ngIf=\"[condition expression]; else [else template]\"> </element>\nSyntax:-\n<div *ngIf=\"users | async; else loadingGrid; let user\">\n  <p>{{user.Id}}</p>\n  <p>{{user.name}}</p>\n  <p>{{user.Age}}</p>\n</div>\n \n<ng-template #loadingGrid>loading...</ng-template>\nSyntax :- We can also use \'then else\'\n<div *ngIf=\"isValid;then then_content else other_content\">If IsValid then display other</div>\n<ng-template #then_content>content here...</ng-template>\n<ng-template #other_content>other content here...</ng-template>\nExample 1 as,\n<div *ngIf=\"isValid;else other_content\">\n    <p>Display valid content here ...</p>\n</div>\n<ng-template #other_content>\n     <p>Other content here...</p>\n</ng-template>\nExample 2 as,\n<div *ngIf=\"title; then logout else login\"></div>\n<ng-template #login>Please login to continue.</ng-template>\n<ng-template #logout>Hi Anil!<button>Logout</button>.</ng-template>\nExample 3 as,\n//our root app component\nimport {Component, NgModule} from \'@angular/core\'\nimport {BrowserModule} from \'@angular/platform-browser\'\n@Component({\n  selector: \'else-cmp\',\n  template: `<button (click)=\"isValid = !isValid\">update</button>\n    <div *ngIf=\"isValid; else other_content\">\n       content here ...\n    </div>\n    <ng-template #other_content>other content here...</ng-template>`,\n})\nexport class ElseComponent {\n  isValid:boolean = true;\n  constructor() {\n  }\n}\n@Component({\n  selector: \'else-then-cmp\',\n  template: `\n      <button (click)=\"isValid = !isValid\">update</button>\n       <div *ngIf=\"isValid;then content else other_content\"></div>\n       <ng-template #content>content here...</ng-template>\n       <ng-template #other_content>other content here...</ng-template> \n  `,\n})\nexport class ElseThenComponent {\n  isValid:boolean = true;\n  constructor() {\n  }\n}\n@Component({\n  selector: \'my-app\',\n  template: `\n    <h4>Using else :</h4>\n    <else-cmp></else-cmp>\n    <h4>Using else then:</h4>\n    <else-then-cmp></else-then-cmp>\n  `,\n})\nexport class App {\n  isValid:boolean = true;\n  constructor() {\n  }\n}\n@NgModule({\n  imports: [ BrowserModule ],\n  declarations: [ App , ElseComponent, ElseThenComponent],\n  bootstrap: [ App ]\n})\nexport class AppModule {}\n','Angular 4 If Else and Then Conditions [7 Best Examples]',7),(454,' There are three main components that we use to configure routing in Angular 2-\nRoutes describes the applicationâ€™s routes\nRouterOutlet is a â€œplaceholderâ€? component that gets expanded to each routeâ€™s content\nRouterLink is used to link to routes\n','Which components are used to configure routing in Angular 2?',7),(455,'\nAngular 2 - ngFor vs. ngForOf\n1.     The [ngFor] is not a type safe\n2.     The [NgForOf] is a type Safe\n3.     The [NgFor] directive instantiates a template once per item from iterate\n4.     The [ngFor] and [ngForOf] are actually the selectors of the [NgForOf] directive and it is not two distinct things\n5.     The [ngFor] will be works like as collections\n6.     The [ngForOf] will be works like as generics\nExample - ngFor\n<div *ngFor=\"let user of users\" let i=index;>{{i}} - {{user.name}}</div>\nOR\n<template>\n     <div [ngFor]=\"let user of users\" let i=index;>{{i}} - {{user.name}}</div>\n</template>\nExample - ngForOf\n<div ngFor let-user=\"$implicit\" [ngForOf]=\"users\" let-i=\"index\">{{i}} - {{user.name}} </div>\n','What Is the Difference Between [ngFor] and [ngForOf] in Angular 2?',7),(456,'\nThe Isolated unit tests check-up an instance of a class itself without using any Angular dependence or any injected values.\nMostly application tester creates a test instance of the class with new keyword and supplying test doubles for the constructor parameters and then investigation the test instance.\nThe isolated unit tests don\'t realize how components interact with Angular and also don\'t realize how a component class interacts with its own template or components.\nFor testing Angular Pipes and Services - we should write isolated unit tests!\nThe isolated unit tests don\'t realize how components interact with Angular and also don\'t realize how a component class interacts with its own template or components.\nStayed Informed - Angular 2 Docs with Examples\nStayed Informed - Angular 4 Docs with Examples\nThe most familiar Unit Test for the Tester and Developers as following -\n1.     Create an Instances directly with new keyword\n2.     Angular Agnostic Testing Techniques\n3.     Exhibit Standard\n4.     Substitute Test\nThe Most of the Tester and Developers are tried to avoid Unit Testing following methodology-\n1.     Import from the Angular Test Libraries - @angular/core/testing\n2.     Configure Angular module\n3.     Prepare Dependency Injection Providers\n4.     Call Inject or (async/fakeAsync)\nExample as â€“ This example is used to display Credit Card Number with a custom formatted in the user templates.\nimport { Pipe, PipeTransform } from \'@angular/core\';\n@Pipe({\n    name: \'barcode\',\n    pure: false\n})\nexport class BarCodePipe implements PipeTransform {\n    transform(value: string, args: any[]): string {\n        if (!value) {\n            return \'\';\n        }\n        return \"****-****_\" + (value.length > 8 ? (value.length - 8): \'\')\n    }\n}\nUnit Testing to the Pipe - BarCodePipe\ndescribe(\'BarCodePipe\', () => {\n  let pipe = new BarCodePipe();\n \n  //Todo tests ...\n});\n','What Are Isolated Unit Tests? [Angular 4 and Angular 2]',7),(457,'\nThe Angular Testing utilities include the TestBed class and helper functions from the test libraries - @angular/core/testing.\nThe TestBed class is one of the principal Angular testing utilities!\nThe TestBed class is responsible for configuring and initializing the environment that we are going to write our tests in by calling TestBed.configureTestingModule.\nThe TestBed.configureTestingModule is used to define the environment that we want our component under test to live in.\nThe Angular Testing utility APIs are â€“\n1.     getTestBed\n2.     async\n3.     fakeAsync\n4.     tick\n5.     inject\n6.     discardPeriodicTasks\n7.     flushMicrotasks\n8.     ComponentFixtureAutoDetect     \nThe most important static methods are â€“\n1.     configureTestingModule\n2.     compileComponents\n3.     createComponent\n4.     overrideModule\n5.     overrideComponent\n6.     overrideDirective\n7.     overridePipe\n8.     get\n9.     initTestEnvironment\n10.  resetTestEnvironment\nExample As â€“\nbeforeEach(() => {\n  fixture = TestBed.configureTestingModule({\n    declarations: [YourComponent ]\n  })\n  .createComponent(YourComponent);\n});\n','What Are Angular Testing Utilities? [Angular 4 and Angular 2]',7),(458,'\nThe Isolated unit tests check-up an instance of a class itself without using any Angular dependence or any injected values.\nMostly application tester creates a test instance of the class with new keyword and supplying test doubles for the constructor parameters and then investigation the test instance.\nThe isolated unit tests don\'t realize how components interact with Angular and also don\'t realize how a component class interacts with its own template or components.\nFor testing Angular Pipes and Services - we should write isolated unit tests!\nThe isolated unit tests don\'t realize how components interact with Angular and also don\'t realize how a component class interacts with its own template or components.\nStayed Informed - Angular 4 Docs with Examples\nThe most familiar Unit Test for the Tester and Developers as following -\n1.     Create an Instances directly with new keyword\n2.     Angular Agnostic Testing Techniques\n3.     Exhibit Standard\n4.     Substitute Test\nThe Most of the Tester and Developers are tried to avoid Unit Testing following methodology-\n1.     Import from the Angular Test Libraries - @angular/core/testing\n2.     Configure Angular module\n3.     Prepare Dependency Injection Providers\n4.     Call Inject or (async/fakeAsync)\nExample as â€“ This example is used to display Credit Card Number with a custom formatted in the user templates. \nimport { Pipe, PipeTransform } from \'@angular/core\';\n@Pipe({\n    name: \'barcode\',\n    pure: false\n})\nexport class BarCodePipe implements PipeTransform {\n    transform(value: string, args: any[]): string {\n        if (!value) {\n            return \'\';\n        }\n        return \"****-****_\" + (value.length > 8 ? (value.length - 8): \'\')\n    }\n}\nUnit Testing to the Pipe - BarCodePipe\ndescribe(\'BarCodePipe\', () => {\n  let pipe = new BarCodePipe();\n \n  //Todo tests ...\n});\nThe Angular Testing utilities include the TestBed class and helper functions from the test libraries - @angular/core/testing.\nStayed Informed - Angular 2 Docs with Examples\nThe TestBed class is one of the principal Angular testing utilities!\nThe TestBed class is responsible for configuring and initializing the environment that we are going to write our tests in by calling TestBed.configureTestingModule.\nThe TestBed.configureTestingModule is used to define the environment that we want our component under test to live in.\nThe Angular testing utility APIs are â€“\n1.     getTestBed\n2.     async\n3.     fakeAsync\n4.     tick\n5.     inject\n6.     discardPeriodicTasks\n7.     flushMicrotasks\n8.     ComponentFixtureAutoDetect     \nThe most important static methods are â€“\n1.     configureTestingModule\n2.     compileComponents\n3.     createComponent\n4.     overrideModule\n5.     overrideComponent\n6.     overrideDirective\n7.     overridePipe\n8.     get\n9.     initTestEnvironment\n10.  resetTestEnvironment\nExample As â€“\nbeforeEach(() => {\n  fixture = TestBed.configureTestingModule({\n    declarations: [YourComponent ]\n  })\n  .createComponent(YourComponent);\n});\n','Isolated Unit Tests vs. Angular Testing Utilities - [Angular 4 and Angular 2]',7),(459,'We can add the declarable classes like components, directives and pipes in the module\'s declarations list and we can add only - components, directives and pipes classes in the @NgModule.\nWe do not declare - Module, Service, objects, strings, numbers, functions, entity models, configurations, business logic, and helper classes in the module\'s declarations.\nExample â€“\nexport const sharedConfig: NgModule = {\n    bootstrap: [ AppComponent ],\n    declarations: [\n        AppComponent,\n        NavMenuComponent,\n        HomeComponent,\n        UserComponent,\n        AccountDetailComponent,\n        BarCodePipe\n    ],\n    imports: [\n        RouterModule.forRoot([\n            { path: \'\', redirectTo: \'home\', pathMatch: \'full\'},\n            { path: \'home\', component: HomeComponent },\n            { path: \'user\', component: UserComponent },\n            { path: \'**\', redirectTo: \'home\' }\n        ])\n    ],\n    providers: [UserService]\n};\n','What classes should I add to module\'s declarations in Angular 4?',7),(460,'\nNo problem! We can import the same module twice but Angular does not like modules with circular references.\nStayed Informed - Angular 4 Docs\nSo do not let Module â€œXâ€? import Module â€œYâ€? which already imports Module â€œXâ€?.\nWhen four modules all import Module â€œXâ€?, Angular estimate Module â€œXâ€? once, the first time face it and does not do again.\nActually, the modules help us to organize an application into associative blocks of functionality.\n','What Happen when I Import the same Module Twice in Angular 4?',7),(461,'\nAngular 4 Grid with CRUD operations -\nStep 1 -\nÂ·       Installed NPM\nÂ·       Installed Visual Studio 2017.\nÂ·       Installed TypeScript 2.0 for Visual Studio 2017.\nStep 2 -\nÂ·       Create ASP.NET MVC Web Application\nÂ·       Go to Visual Studioâ€™s File New Project menu, expand the Web category and pick ASP.NET Web Application.\nStep 3 -\nÂ·       Configure Angular 4 and We need to prepare our frontend to run Angular 4.\nStep 4-\nÂ·       Creating an Angular Service.\nStep 5 â€“\nÂ·       Configure Service in NgModule.\nimport {NgModule } from \'@angular/core\';\nimport {BrowserModule} from \'@angular/platform-browser\';\nimport {FormsModule} from \'@angular/forms\';\nimport {HttpModule} from \'@angular/http\';\nimport {platformBrowserDynamic} from \'@angular/platform-browser-dynamic\';\nimport {AppComponent } from \'./app.component\';\nimport {UserService} from \'./app.service\';\n \n@NgModule({\n    imports: [BrowserModule, FormsModule, HttpModule],\n    declarations: [AppComponent],\n    providers: [UserService],\n    bootstrap: [AppComponent]\n})\nclass AppModule { }\nplatformBrowserDynamic().bootstrapModule(AppModule);\nStep 6 -\nÂ·       Calling an Angular Service in the Angular Component class.\n','Angular 4 Grid with CRUD operations\n',7),(462,'\nThe Angular Router enables navigation from one view to the next as users perform application tasks.\nAngular 4 comes with some useful changes in the router. Letâ€™s take a look in the detail changes!  Stayed Informed â€“ Angular 4 Q/A\nThe Components of Routing and Navigation -\n1.     Router Imports\n2.     Router Configuration\n3.     Router Outlet\n4.     Router Link\n5.     Router State\n6.     Router Events\nAngular Routing Overview -\n1.     Enter the URL in your address bar for your browser navigations.\n2.     Click on your navigations links on the page and the browser navigates to a new page which you have entered in the navigations URL.\n3.     Click the browsers back and forward buttons. The browser navigates backward and forward through the history of pages.\nRouter Imports- Angular Router is an optional service that presents a particular component view for a given URL i.e.\nimport { RouterModule, Routes } from \'@angular/router\';\nRouter Configuration -\nconst appRoutes: Routes = [\n  { path: \'\', redirectTo: \'home\', pathMatch: \'full\' },\n  { path: \'registration\', component: RegistrationComponent},\n  { path: \'login\', component: LoginComponent},\n  { path: \'\'home/:id\',      component: HomeComponent, data: { title: \'Home\' }},\n  { path: \'users\',    component: UserListComponent, data: { title: \'User List\' }},\n  { path: \'dashboard\', component: DashboardComponent, data: { title: \'Dashboard\' }}\n  { path: \'**\', component: PageNotFoundComponent }\n];\n@NgModule({\n  imports: [\n    UniversalModule, // MUST BE FIRST IMPORT. THIS AUTOMATICALLY IMPORTS BROWSERMODULE, HTTPMODULE, AND JSONPMODULE TOO.\n    RouterModule.forRoot(appRoutes), // Installs Router routes, components and services\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  ...\n})\nexport class AppModule { }\nRouter Outlet- It is a placeholder component and use to get expanded to each route\'s content.\nRouter-outlet directive is used to render the components for specific location of your applications. Both the template and templateUrl render the components where you use this directive.\nSyntax â€“\n<router-outlet></router-outlet>\nExample -\n<div class=\'container\'>   \n    <div class=\'row\'>\n        <router-outlet></router-outlet>\n    </div>\n</div>\nRouter Link - It is use to link to application\'s routes and Router-link directive is used to link a specific part of your applications.\nSyntax â€“ \n<router-link></router-link>\nExample â€“\n<ul class=\'nav navbar-nav\'>\n    <li [routerLinkActive]=\"[\'link-active\']\">\n        <a [routerLink]=\"[\'/login\']\">\n            <span class=\'glyphicon glyphicon-Login\'></span> Login\n        </a>\n    </li>\n    <li [routerLinkActive]=\"[\'link-active\']\">\n        <a [routerLink]=\"[\'/registration\']\">\n            <span class=\'glyphicon glyphicon-Register\'></span> Register\n        </a>\n    </li>\n    <li [routerLinkActive]=\"[\'link-active\']\">\n        <a [routerLink]=\"[\'/Users\']\">\n            <span class=\'glyphicon glyphicon-Users\'></span> Users\n        </a>\n    </li>\n    <li [routerLinkActive]=\"[\'link-active\']\">\n        <a [routerLink]=\"[\'/Dashboard\']\">\n            <span class=\'glyphicon glyphicon-Dashboard\'></span> Dashboard\n        </a>\n    </li>\n</ul>\nRouter State -\nAfter the end of each successful navigation life-cycle, the router builds a tree of Activated-Route objects that make up the current state of the router. You can access the current Router-State from anywhere in the application using the Router service and the router-State property.\nEach Activated-Route in the Router-State provides methods to traverse up and down the route tree to get information from parent, child and sibling routes.\nRouter Events -\n1.     NavigationStart- This event is triggered when navigation starts.\n2.     RoutesRecognized - This event is triggered when Router parses the URL and routes are recognized.\n3.     RouteConfigLoadStart- This event is triggered before the Router lazy loads a route configuration.\n4.     RouteConfigLoadEnd - This event is triggered after a route has been lazy loaded.\n5.     NavigationEnd - This event is triggered when navigation ends successfully!\n6.     NavigationCancel - This event is triggered when navigation is cancelled.\n7.     NavigationError - This event is triggered when navigation fails due to error.\n','\nAngular 4 Routing and Navigation [Router Imports, Outlet, Link, State and Events]',7),(463,'\nWhat Happens If the Request fails on the Server Due to Poor Network Connection?\nHttpClient will return an error instead of a successful response.\nExample - Add an error handler to handle the errors\nhttp.get(\'/api/users\')\n  .subscribe(data => {console.log(data);}, //Successful responses call the first callback.\n      err => {console.log(\'Got error!\'); //Errors - Something went wrong!\n});\nHow To Get and Log an error in Angular 4?\nTwo types of errors -\n1.     If the backend returns an unsuccessful response like - 404, 500 and so on\n2.     If something goes wrong in the client side like -network error etc.\nIn the both cases - We are using HttpErrorResponse and return the useful information on what went wrong in this call!\nExample â€“\nhttp.get(\'/api/users\')\n  .subscribe(data => {console.log(data);}, //Successful responses call the first callback.\n      (err: HttpErrorResponse) => {\n        if (err.error instanceof Error) {\n           console.log(\'Error - \', err.error.message);\n        }else {\n            console.log(\'Error status - ${err.status}, and Error Detail - ${err.error}\');\n        }\n      }\n});\nHow To handle and retry the failed request due to Poor Network Connection in Angular 4?\nIn Angular 4, simply retry the request using RxJS operator called .retry (). It is automatically presubscribed to an Observable, thus reissuing the request when an error occurred!\nImport RxJS for using retry () method-\nimport \'rxjs/add/operator/retry\';\nHTTP Observables for retry the failed request \nhttp.get(\'/api/users\')\n  .retry(2) //Retry this request up to 2 times.\n  .subscribe(data => {console.log(data);}, //Successful responses call the first callback.\n      (err: HttpErrorResponse) => {\n        if (err.error instanceof Error) {\n           console.log(\'Error - \', err.error.message);\n        }else {\n            console.log(\'Error status - ${err.status}, and Error Detail - ${err.error}\');\n        }\n      }\n});\nHow to implement HttpCache in Angular 4?\nWe can use Http interceptors to implement caching.\n@Injectable()\nexport class CachingInterceptor implements HttpInterceptor {\n  constructor(private cache: HttpCache) {}\n \n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Cache all GET requests and Skip other requist like POST, PUT etc.\n    if (req.method !== \'GET\') {\n       return next.handle(req);\n    }\n \n    // Cached Response for all exists GET requests.\n    const cachedResponse = this.cache.get(req);\n    //If cached response is exists.\n    if (cachedResponse) {\n       return Observable.of(cachedResponse);\n    }else{\n       //If cached response is not exists.\n       return next.handle(req).do(event => {\n          if (event instanceof HttpResponse) {\n         this.cache.put(req, event);// Update the cache.\n          }\n      });\n    }\n  }\n}\n','Angular 4 Error Handling - Logging, Retry Request and HttpCache!',7),(464,'Two types of errors -\n1.     If the backend returns an unsuccessful response like - 404, 500 and so on\n2.     If something goes wrong in the client side like -network error etc.\nIn the both cases - We are using HttpErrorResponse and return the useful information on what went wrong in this call!\nExample â€“\nhttp.get(\'/api/users\')\n  .subscribe(data => {console.log(data);}, //Successful responses call the first callback.\n      (err: HttpErrorResponse) => {\n        if (err.error instanceof Error) {\n           console.log(\'Error - \', err.error.message);\n        }else {\n            console.log(\'Error status - ${err.status}, and Error Detail - ${err.error}\');\n        }\n      }\n});\n','Angular 4 Error Handling and Logging!',7),(465,'Traceur is a JavaScript.next-to-JavaScript-of-today compiler that allows you to use features from the future today. \nTraceur supports ES6 as well as some experimental ES.next features. Traceur\'s goal is to inform the design of new JavaScript features which are only valuable if they allow you to write better code.\n','What is Traceur compiler ?',7),(466,'In Angular 4, simply retry the request using RxJS operator called .retry (). It is automatically presubscribed to an Observable, thus reissuing the request when an error occurred!\nImport RxJS for using retry () method-\nimport \'rxjs/add/operator/retry\';\nHTTP Observables for retry the failed request \nhttp.get(\'/api/users\')\n  .retry(2) //Retry this request up to 2 times.\n  .subscribe(data => {console.log(data);}, //Successful responses call the first callback.\n      (err: HttpErrorResponse) => {\n        if (err.error instanceof Error) {\n           console.log(\'Error - \', err.error.message);\n        }else {\n            console.log(\'Error status - ${err.status}, and Error Detail - ${err.error}\');\n        }\n      }\n});\n','How To handle and retry the failed request due to Poor Network Connection in Angular 4?',7),(467,'This custom validator is used for Password and Conform Password in Angular 4 which allows us to have fields that must be equal to some other fieldâ€™s i.e.\n1.     Password field\n2.     Conform Password field\nThis custom validator is very useful for password confirmation validation, validate card etc.\nExample 1 â€“\nimport { Component, OnInit } from \'@angular/core\';\nimport { FormBuilder, FormGroup } from \'@angular/forms\';\nexport class AppComponent implements OnInit {\n    userForm: FormGroup;\n    password = \'password\';\n    constructor(private fBuilder: FormBuilder) {\n        this.userForm = fBuilder.group({\n            name: fBuilder.control(null, Validators.required),\n            age: fBuilder.control(null, [Validators.required, Validators.minLength(2), Validators.maxLength(2)]),\n            email: fBuilder.control(null, [Validators.required, Validators.email]),\n            password: fBuilder.control(null, Validators.required),\n            repeatPassword: fBuilder.control(null, [Validators.required, matchValidator(this.password)])\n        });\n        console.log(this.userForm);\n    }\n    onSubmit(): void {\n        console.log(this.userForm.value);\n    }\n}\nimport {FormGroup, Validators, FormControl} from \'@angular/forms\';\nexport function matchValidator(fieldName: string) {\n    let fcfirst: FormControl;\n    let fcSecond: FormControl;\n    return function matchValidator(control: FormControl) {\n        if (!control.parent) {\n            return null;\n        }\n        // INITIALIZING THE VALIDATOR.\n        if (!fcfirst) {\n            //INITIALIZING FormControl first\n            fcfirst = control;\n            fcSecond = control.parent.get(fieldName) as FormControl;\n            //FormControl Second\n            if (!fcSecond) {\n                throw new Error(\'matchValidator(): Second control is not found in the parent group!\');\n            }\n            fcSecond.valueChanges.subscribe(() => {\n                fcfirst.updateValueAndValidity();\n            });\n        }\n        if (!fcSecond) {\n            return null;\n        }\n        if (fcSecond.value !== fcfirst.value) {\n            return {\n                matchOther: true\n            };\n        }\n        return null;\n    }\n}\nExample 2 â€“\nimport { Directive, forwardRef, Attribute } from \'@angular/core\';\nimport { NG_VALIDATORS, Validator, Validators, AbstractControl, ValidatorFn } from \'@angular/forms\';\n@Directive({\n    selector: \'[Equalvalidate][formControlName],[formControl],[ngModel]\',\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => EqualValidator),\n            multi: true\n        }\n    ]\n})\nexport class EqualValidator implements Validator {\n    constructor(@Attribute(\'Equalvalidate\') public Equalvalidate: string) { }\n    validate(abControl: AbstractControl): { [key: string]: any } {\n        // Get self value.\n        let val = abControl.value;\n        // Get control value.\n        let cValue = abControl.root.get(this.Equalvalidate);\n        // value not equal\n        if (cValue && val !== cValue.value) return {\n            Equalvalidate: false\n        }\n        return null;\n    }\n}\nHTML â€“\n<div class=\"form-group\">\n    <label for=\"Password\">Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"password\" required [(ngModel)]=\"model.password\" name=\"password\" #password=\"ngModel\">\n    <div [hidden]=\"password.valid || password.pristine\" class=\"alert alert-danger\">\n         Password is required\n    </div>\n</div>\n<div class=\"form-group\">\n    <label for=\"ConfirmPassword\">Confirm Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"confirmPassword\" required Equalvalidate=\"password\" [(ngModel)]=\"model.confirmPassword\" name=\"confirmPassword\"  #confirmPassword=\"ngModel\">\n    <div [hidden]=\"confirmPassword.valid || confirmPassword.pristine\" class=\"alert alert-danger\">\n        Password mismatch\n    </div>\n</div>\nExample 3 â€“\nlet passwordMatchValidator = function(fg: FormGroup) {\n    return fg.get(\'password\').value === fg.get(\'confirmPassword\').value ? null : { \'mismatch\': true };\n}\nconst form = new FormGroup({\n    password: new FormControl(\'\', Validators.minLength(6), Validators.maxLength(30)),\n    passwordConfirm: new FormControl(\'\', Validators.minLength(6), Validators.maxLength(30)),\n}, passwordMatchValidator);\n','How to Validate Password and Confirm Password in Angular 4?',7),(468,'This custom validator is used for Password and Conform Password in Angular 4 which allows us to have fields that must be equal to some other fieldâ€™s i.e.\n1.     Password field\n2.     Conform Password field\nThis custom validator is very useful for password confirmation validation, validate card etc.\nExample 1 â€“\nimport { Component, OnInit } from \'@angular/core\';\nimport { FormBuilder, FormGroup } from \'@angular/forms\';\nexport class AppComponent implements OnInit {\n    userForm: FormGroup;\n    password = \'password\';\n    constructor(private fBuilder: FormBuilder) {\n        this.userForm = fBuilder.group({\n            name: fBuilder.control(null, Validators.required),\n            age: fBuilder.control(null, [Validators.required, Validators.minLength(2), Validators.maxLength(2)]),\n            email: fBuilder.control(null, [Validators.required, Validators.email]),\n            password: fBuilder.control(null, Validators.required),\n            repeatPassword: fBuilder.control(null, [Validators.required, matchValidator(this.password)])\n        });\n        console.log(this.userForm);\n    }\n    onSubmit(): void {\n        console.log(this.userForm.value);\n    }\n}\nimport {FormGroup, Validators, FormControl} from \'@angular/forms\';\nexport function matchValidator(fieldName: string) {\n    let fcfirst: FormControl;\n    let fcSecond: FormControl;\n    return function matchValidator(control: FormControl) {\n        if (!control.parent) {\n            return null;\n        }\n        // INITIALIZING THE VALIDATOR.\n        if (!fcfirst) {\n            //INITIALIZING FormControl first\n            fcfirst = control;\n            fcSecond = control.parent.get(fieldName) as FormControl;\n            //FormControl Second\n            if (!fcSecond) {\n                throw new Error(\'matchValidator(): Second control is not found in the parent group!\');\n            }\n            fcSecond.valueChanges.subscribe(() => {\n                fcfirst.updateValueAndValidity();\n            });\n        }\n        if (!fcSecond) {\n            return null;\n        }\n        if (fcSecond.value !== fcfirst.value) {\n            return {\n                matchOther: true\n            };\n        }\n        return null;\n    }\n}\nExample 2 â€“\nimport { Directive, forwardRef, Attribute } from \'@angular/core\';\nimport { NG_VALIDATORS, Validator, Validators, AbstractControl, ValidatorFn } from \'@angular/forms\';\n@Directive({\n    selector: \'[Equalvalidate][formControlName],[formControl],[ngModel]\',\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => EqualValidator),\n            multi: true\n        }\n    ]\n})\nexport class EqualValidator implements Validator {\n    constructor(@Attribute(\'Equalvalidate\') public Equalvalidate: string) { }\n    validate(abControl: AbstractControl): { [key: string]: any } {\n        // Get self value.\n        let val = abControl.value;\n        // Get control value.\n        let cValue = abControl.root.get(this.Equalvalidate);\n        // value not equal\n        if (cValue && val !== cValue.value) return {\n            Equalvalidate: false\n        }\n        return null;\n    }\n}\nHTML â€“\n<div class=\"form-group\">\n    <label for=\"Password\">Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"password\" required [(ngModel)]=\"model.password\" name=\"password\" #password=\"ngModel\">\n    <div [hidden]=\"password.valid || password.pristine\" class=\"alert alert-danger\">\n         Password is required\n    </div>\n</div>\n<div class=\"form-group\">\n    <label for=\"ConfirmPassword\">Confirm Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"confirmPassword\" required Equalvalidate=\"password\" [(ngModel)]=\"model.confirmPassword\" name=\"confirmPassword\"  #confirmPassword=\"ngModel\">\n    <div [hidden]=\"confirmPassword.valid || confirmPassword.pristine\" class=\"alert alert-danger\">\n        Password mismatch\n    </div>\n</div>\nExample 3 â€“\nlet passwordMatchValidator = function(fg: FormGroup) {\n    return fg.get(\'password\').value === fg.get(\'confirmPassword\').value ? null : { \'mismatch\': true };\n}\nconst form = new FormGroup({\n    password: new FormControl(\'\', Validators.minLength(6), Validators.maxLength(30)),\n    passwordConfirm: new FormControl(\'\', Validators.minLength(6), Validators.maxLength(30)),\n}, passwordMatchValidator);\n','How to Validate Password and Confirm Password in Angular 4?',7),(469,'A Cross-Site Scripting (XSS) attack is a type of injection that can be carried out to users understanding of a website. The attackers inject to client-side scripts into web pages which are viewed by users.\nAttacker access to the userâ€™s cookies, session Ids, passwords and other private data and this XSS attacks are affect your website. The XSS attacks are common in web browsers.\nThe Cross Site Scripting (XSS) attack is a type of injection and attackers inject your web applications using the client side scripts and malicious code into web pages.\nAn attacker can insert vulnerability scripts and malicious code in your web applications.\nThe Angular treats all values as untrusted by default. This is the great advantages of Angular.\nWhen a value is Inserted Vulnerability into the DOM from â€“\n1.     A Template\n2.     Property\n3.     Attribute\n4.     Style\n5.     Class Binding\n6.     Interpolation\n7.     And so on.\nAngular recognizes the value as unsafe and automatically sanitizes and removes the script tag and other security vulnerabilities.\nAngular provides built-in, values as untrusted by default, anti XSS and CSRF/XSRF protection.\nThe CookieXSRFStrategy class takes care of preventing XSS and CSRF/XSRF attacks.\nThe DomSanitizationService takes care of removing the dangerous bits in order to prevent XSS attacks.\nAngular applications must follow the same security principles as regular web applications -\n1.     You should avoid direct use of the DOM APIs.\n2.     You should enable Content Security Policy (CSP) and configure your web server to return appropriate CSP HTTP headers.\n3.     You should Use the offline template compiler.\n4.     You should Use Server Side XSS protection.\n5.     You should Use DOM Sanitizer.\n6.     You should Preventing CSRF or XSRF attacks.\n','How To Handle XSS or CSRF Attacks in Angular 4 ?',7),(470,'How does Angular 2 handle with XSS or CSRF? \nHow Angular prevents this Attacks?\nThe Cross Site Scripting (XSS) attack is a type of injection and attackers inject your web applications using the client side scripts and malicious code into web pages.\nAn attacker can insert vulnerability scripts and malicious code in your web applications.\nThe Angular treats all values as un-trusted by default. This is the great advantages of Angular.\nWhen a value is Inserted Vulnerability into the DOM from â€“\n1.     A Template\n2.     Property\n3.     Attribute\n4.     Style\n5.     Class Binding\n6.     Interpolation\n7.     And so on.\nAngular recognizes the value as unsafe and automatically sanitizes and removes the script tag and other security vulnerabilities.\nAngular provides built-in, values as untrusted by default, anti XSS and CSRF/XSRF protection.\nThe CookieXSRFStrategy class takes care of preventing XSS and CSRF/XSRF attacks.\nThe DomSanitizationService takes care of removing the dangerous bits in order to prevent XSS attacks.\nAngular applications must follow the same security principles as regular web applications -\n1.     You should avoid direct use of the DOM APIs.\n2.     You should enable Content Security Policy (CSP) and configure your web server to return appropriate CSP HTTP headers.\n3.     You should Use the offline template compiler.\n4.     You should Use Server Side XSS protection.\n5.     You should Use DOM Sanitizer.\n6.     You should Preventing CSRF or XSRF attacks.\n','How Angular Preventing Cross Site Scripting (XSS) and CSRF Attacks?\n',7),(471,'The Cross Site Scripting (XSS) attack is a type of injection and attackers inject your web applications using the client side scripts and malicious code into web pages.\nAn attacker can insert vulnerability scripts and malicious code in your web applications.\nThe Angular treats all values as un-trusted by default. This is the great advantages of Angular.\nStayed Informed â€“ Angular 4 docs and Angular 5 docs\nWhen a value is Inserted Vulnerability into the DOM from â€“\n1.     A Template\n2.     Property\n3.     Attribute\n4.     Style\n5.     Class Binding\n6.     Interpolation\n7.     And so on.\nAngular recognizes the value as unsafe and automatically sanitizes and removes the script tag and other security vulnerabilities.\nAngular provides built-in, values as untrusted by default, anti XSS and CSRF/XSRF protection.\nThe CookieXSRFStrategy class takes care of preventing XSS and CSRF/XSRF attacks.\nThe DomSanitizationService takes care of removing the dangerous bits in order to prevent XSS attacks.\nAngular applications must follow the same security principles as regular web applications -\n1.     You should avoid direct use of the DOM APIs.\n2.     You should enable Content Security Policy (CSP) and configure your web server to return appropriate CSP HTTP headers.\n3.     You should Use the offline template compiler.\n4.     You should Use Server Side XSS protection.\n5.     You should Use DOM Sanitizer.\n6.     You should Preventing CSRF or XSRF attacks.\n','How Angular prevents this Attacks?',7),(472,'The cross-site scripting attack doesnâ€™t cover application-level security and for the applications security will need to implements authentication and authorization.\nAs you know -\n1.     Authentication - Who is this user?\n2.     Authorization - What can this user do?\nBest Practices to Application Level Security -\n1.     Keep updated releases of Angular library. Actually, the security team regularly update the fixes of security and defects in latest versions.\n2.     Don\'t add any custom hack on Angular library. It will create the problem to update the latest library.\n3.     You Must Prevent Trusting safe values\n4.     You Must Follow the HTTP level vulnerabilities\n5.     You Must Prevent Cross-site request forgery (CSR Fattacks)\n6.     You Must Prevent Cross-site script inclusion (XSSI)\n7.     You Must Prevent Security Policy (CSP)\n8.     Avoid direct use of the DOM APIs\n9.     Use the offline template compiler\n10. Try Server-side XSS protection\n','How Google Handles Security in Angular 4 Applications?',7),(473,'In Annular, the following Steps are used to building authentication and authorization for RESTful APIs and applications. It might help you -\n1.     The users send their credentials to the server which is verified by the database credentials. If everything is verified successfully, the JWT is sent back to them.\n2.     The JWT is saved in the user\'s browser in local storage or in a cookie and so on.\n3.     The presence of a JWT saved in the browser is used as an indicator that a user is currently logged in.\n4.     The expiry time of JWT is continually checked to maintain an authenticated state in the Angular applications.\n5.     The client side routes are protected and access by authenticated users only.\n6.     When user sends the XHR requests for APIs, the JWT gets sent an Authorization header using your cookies or Bearer.\n7.     When XHR requests coming on the server, before send back the responses itâ€™s validated first with configured app\'s secret keys. If everything is looking good then returns successfully responses other send the back to the bad request.\n','How Are JWTs Used to Authenticate Angular 4 Applications?',7),(474,'JSON Web Token (JWT) is an open standard which used for securely transmitting information between parties as a JSON object.\nThe JWTs can be signed with -\n1.     HMAC algorithm\n2.     RSA algorithm\n','What is JSON Web Token?',7),(475,'There are some scenarios where we can used JSON Web Tokens -\n1.     Authentication\n2.     Information Exchange\n','When should you use JSON Web Tokens?',7),(476,'In Angular 2, decorators allow developers to configure classes as particular elements by setting metadata on them. The most commons are the @Component one, for components and the @Injectable one, for classes you want to inject dependencies in.\nAdvanatges of using decorators are-\nSeparation of concerns.\nEasy for tools to provide all kinds of support in templates like- error checking, auto-completion, graphical GUI designers\nSupport multiple modifications\n',' Why are decorators used in Angular 2 ?',7),(477,'The JSON Web Tokens consist of three parts separated by dots (.), which are:\n1.     Header\n2.     Payload\n3.     Signature\n','What is the JSON Web Token structure?',7),(478,'What Is Angular CLI? The Angular CLI is a tool to initialize, develop, scaffold and maintain Angular applications.\nInstallation â€“\nnpm install -g @angular/cli\nExample â€“  CREATE your project directory as like below\nF:AngularTestAppDemoApp>npm install -g @angular/cli\nC:UsersAnilAppDataRoaming\npm\ng -> C:UsersAnilAppDataRoaming npm\node_modules@angularcliin\ng\nC:UsersAnilAppDataRoaming\npm`-- @angular/cli@1.5.0\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules@angularcli\node_moduleschokidar\node_modulesfsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.2: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"win32\",\"arch\":\"x64\"})\nThe Angular CLI will add reference to components, directives and pipes automatically in â€œapp.moduleâ€?.\nHow To Updating Angular CLI?\nIf you\'re using Angular CLI lesser version, uninstall angular-cli package and install new versions.\nnpm uninstall -g angular-cli\nnpm uninstall --save-dev angular-cli\nGlobal package -\nnpm uninstall -g @angular/cli\nnpm cache clean\nnpm install -g @angular/cli@latest\nLocal project package -\nrm -rf node_modules dist # use rmdir /S/Q node_modules dist in Windows Command Prompt; use rm -r -fo node_modules,dist in Windows PowerShell\nnpm install --save-dev @angular/cli@latest\nnpm install\nSome Additional Commands -\n1.     ng new\n2.     ng serve\n3.     ng generate\n4.     ng lint\n5.     ng test\n6.     ng e2e\n7.     ng build\n8.     ng get\n9.     ng set\n10.  ng doc\n11.  ng eject\n12.  ng xi18n\n13.  and so on\n','What Is Angular CLI? How To Updating Angular CLI?',7),(479,'Two types of errors -\n1.     If the backend returns an unsuccessful response like - 404, 500 and so on\n2.     If something goes wrong in the client side like -network error etc.\nIn the both cases - We are using HttpErrorResponse and return the useful information on what went wrong in this call!\n','How To Get and Log an error in Angular 4?',7),(480,'In Angular 4, simply retry the request using RxJS operator called .retry (). It is automatically presubscribed to an Observable, thus reissuing the request when an error occurred!\n','How To handle and retry the failed request due to Poor Network Connection in Angular 4?',7),(481,'http.get(\'/api/users\')\n  .retry(2) //Retry this request up to 2 times.\n  .subscribe(data => {console.log(data);}, //Successful responses call the first callback.\n      (err: HttpErrorResponse) => {\n        if (err.error instanceof Error) {\n           console.log(\'Error - \', err.error.message);\n        }else {\n            console.log(\'Error status - ${err.status}, and Error Detail - ${err.error}\');\n        }\n      }\n});\n','HTTP Observables for retry the failed request ',7),(482,'The ngFor directive instantiates a template for every element of the given iterator. The different local variables of the ngFor directive can be used in iterations. \nThe ngFor directive can even be used with the HTML elements. It also performs various changes in DOM. Several exported values can be aliased to local variables with the help of ngFor directive. \nIt allows us to build data presentation lists and tables in our HTML templates. Hereâ€™s an example of ngFor directive with the help of HTML:\n<tr *ngFor=â€?hero of heroesâ€?>\n<td>({hero.name})</td></tr>\n','Explain ngFor directive with an example',7),(483,'Basically property binding means passing data from the component class and setting the value of a given element in the view. \nIt is a one way binding in which the data is passed from component to the class. It allows us to control the element property values from component to class. Property binding in angular can take place by three ways:\nInterpolation can be used to define a value, as long as the value being defined is a string.\nWrapping brackets around the element property and binding it to the component property is the most common type of property binding.\nThe third way is by adding â€œbindâ€? before the element property.\n',' Explain property binding or one way binding in angular js.',7),(484,'The ngIf is a built-in template directive which is used to add or remove some parts of DOM. This addition or removal depends on the expression being true or false.\nIf the expression is evaluated to false, then the ngIf directive removes the HTML element. If the expression is evaluated to be true, then the element gets added to the DOM.\nSyntax- *ngIf=â€?<condition>â€?\nExample- <ul *ngFor=â€?let person of peopleâ€?\n*ngIf=â€?person.age < 30â€?>\n<li>{{person.name}}</li></ul>\n','Explain ngIf directive with an example.',7),(485,'In angular js, there are differences between the meta-data annotations. Some of the differences are:\nA directive is used to add behavior to an existing element. Whereas, a component is used to create a component with attached behavior.\nâ€œ@directiveâ€? is used to create a directive. Whereas, â€œ@componentâ€? is used to create a component.\nA directive is used to attach different behaviors to an existing DOM element. Whereas, with the help of component, we can break our application into smaller components.\nA directive is used to create reusable behavior. Whereas, a component is used to create reusable components.\nA directive does not require a view. Whereas, a component needs a view via @view.\n','Write the difference between directive and component in angular js.',7),(486,'As the name implies, unit test is all about testing individual units of code. In order to answer some questions, isolating the unit of code under test is really important. When we do this, we are not forced into creating related pieces such as DOM elements for sorting. \nWith the help of isolated unit tests, it becomes easier to implement everything. To simulate the requests, dependency injections are also provided. The individual sort function can be tested in isolation. And not only the sort function, any function can be tested in isolation.\n','What do you understand by Isolated Unit Tests?',7),(487,'Pipes in Angular 2 are a way to transform and format data right from your templates Out of the box you get pipes for dates, currency, percentage and character cases, but you can also easily define custom pipes of your own. \nHere for example we create a pipe that takes a string and reverses the order.\n','What are pipes in Angular 2 ?',7),(488,'ngRoute module is used when you want to navigate through different pages of your application but you also want your application to be a single page application. \nThis ngRoute module navigates through different pages of your application without reloading the entire application. The angular js route module should be included to make your application ready for routing. The ngRoute is added as a dependency in the application. \nThe routing engine captures the specific url requested by the user and renders the view based on the defined routing rules.\n','What is a routing in angular js?',7),(489,'Services in angular js are used to organize and share code across your application. These are the suitable objects which are wired together with the help of dependency injection. \nThe angular js services are lazily instantiated. The service is only instantiated by angular js only when the application component depends on it. \nIn angular js, new services can be made or can even be used in other built-in services. Over 30 built-in services are present in angular js.\n','What do you understand by services with reference to angular js?',7),(490,'DSL Animation functions are used for crafting animations in Angular js. Below are list of DSL Animation functions in angular js.\ntrigger()\nstate()\ntransition()\ngroup()\nsequence()\nstyle()\nanimate()\nkeyframes()\n','What are DSL Animation Functions in Angular js. List them.',7),(491,'A decorator is the core concept when developing an angular framework with version 2 and above. It may become a core language feature for JavaScript soon. In angular 4, decorators are used extensively and are also used to compile a code. There are 4 different types of decorators:\nClass decorators\nProperty decorators\nMethod decorators\nParameter decorators\nA decorator is a function that is invoked with a prefixed â€œ@â€? symbol and is immediately followed by a class, parameter, method, or property. A decorator returns the same thing which was given as an input but in an augmented form.\n','Explain component decorators in Angular4.',7),(492,'Components are just simple classes which are declared as components with the help of component decorators.\nIt becomes easy to create an application which already works, with the help of angular CLI commands. â€œNg generateâ€? is used to generate components, routes, services, and pipes. Simple test shells are also created with the help of this CLI command. For generating a component in angular4 with the help of CLI command, you need to follow the following syntax-\nng generate component component_name;\nIt generates the component and adds the component to module declarations.\n','Write the CLI command to generate a component in Angular4.',7),(493,'The impedance mismatch between dynamic applications and static documents is often solved with:\na library â€“ a collection of functions which are useful when writing web apps. Your code is in charge and it calls into the library when it sees fit. E.g., jQuery.\nframeworks â€“ a particular implementation of a web application, where your code fills in the details. The framework is in charge and it calls into your code when it needs something app specific. E.g., durandal, ember, etc.\nAngularJS takes another approach. It attempts to minimize the impedance mismatch between document centric HTML and what an application needs by creating new HTML constructs. AngularJS teaches the browser new syntax through a construct we call directives. Examples include:\nData binding, as in {{}}.\nDOM control structures for repeating, showing and hiding DOM fragments.\nSupport for forms and form validation.\nAttaching new behavior to DOM elements, such as DOM event handling.\nGrouping of HTML into reusable components.\n','WHAT DO I HAVE TO DO TO TRICK THE BROWSER INTO DOING WHAT I WANT?',7),(494,'Angular was a ground-up rewrite of AngularJS and has many unique features.\nAngular does not have a concept of â€œscopeâ€? or controllers, instead it uses a hierarchy of components as its main architectural concept\nAngular has a different expression syntax, focusing on â€œ[ ]â€? for property binding, and â€œ( )â€? for event binding\nMobile development â€“ desktop development is much easier when mobile performance issues are handled first\nModularity â€“ much core functionality has moved to modules, producing a lighter, faster core\nModern browsers only â€“ reducing the need for browser compatibility workarounds\nAngular recommends the use of Microsoftâ€™s TypeScriptlanguage, which introduces the following features:\nClass-based Object Oriented Programming\nStatic Typing\nGenerics\nTypeScriptis a superset of ECMAScript 6 (ES6), and is backwards compatible with ECMAScript 5 (i.e.: JavaScript). Angular also includes the benefits of ES6:\nLambdas\nIterators\nFor/Of loops\nPython-style generators\nReflection\nImproved dependency injectionâ€“ bindings make it possible for dependencies to be named\nDynamic loading\nAsynchronous template compilation\nSimpler Routing\nReplacing controllers and $scope with components and directives â€“ a component is a directive with a template\nReactive programmingsupport using RxJS\n','WHAT ARE THE DIFFERENCES BETWEEN ANGULAR AND ANGULAR JS?',7),(495,'Angular 4 contains some additional Enhancement and Improvement. Consider the following enhancements.\nSmaller & Faster Apps\nView Engine Size Reduce\nAnimation Package\nNgIf and ngFor Improvement\nTemplate\nNgIf with Else\nUse of AS keyword\nPipes\nHTTP Request Simplified\nApps Testing Simplified\nIntroduce Meta Tags\nAdded some Forms Validators Attributes\nAdded Compare Select Options\nEnhancement in Router\nAdded Optional Parameter\nImprovement Internationalization\n','WHATâ€™S NEW IN ANGULAR 4? AND WHAT ARE THE IMPROVEMENTS IN ANGULAR 4?',7),(496,'It Makes work easier compared with angular 2 and other models.\nWriting code is lots of cleaner and lesser.\nIt Improve the execution performance for Data binding and so on.\nIt has included Animations features.\nIn Angular 4, no need to apply observable methods because Angular analyses every pageâ€™s DOM and it is automatically modifies to pageâ€™s DOM.\nIt is also supported by Visual Studio, IntelliJ, And NET IDES and so on.\nMigration is really very soft and cleaner.\n','WHY ANGULAR 4? WHATâ€™S NEW IN ANGULAR 4?',7),(497,'Smaller & Faster Apps\nView Engine Size Reduce\nAnimation Package\nNgIf and ngFor Improvement\nOverriding Template\nNgIf with Else\nUse of AS keyword\nPipes\nHTTP Request Simplified\nApps Testing Simplified\nIntroduce Meta Tags\nAdded some Forms Validators Attributes\nAdded Compare Select Options\nEnhancement in Router\nAdded Optional Parameter\nImprovement Internationalization\nMeaningful errors handling methodology\nAnimations\n','Angular 2 apps will work using Angular 4 without changing anything. Angular 4 offers lots-of enhancements i.e.',7),(498,'JVM:JVM is an acronym for Java Virtual Machine, it is an abstract machine which provides the runtime environment in which java bytecode can be executed. It is a specification.JVMs are available for many hardware and software platforms (so JVM is platform dependent).\r\nJRE:JRE stands for Java Runtime Environment. It is the implementation of JVM.\r\nJDK:JDK is an acronym for Java Development Kit. It physically exists. It contains JRE + development tools.','What is difference between JDK,JRE and JVM?',8),(499,'Many types:Class(Method) Area\r\nHeap\r\nStack\r\nProgram Counter Register\r\nNative Method Stack','How many types of memory areas are allocated by JVM?',8),(500,'Just-In-Time(JIT) compiler:It is used to improve the performance. JIT compiles parts of the byte code that have similar functionality at the same time, and hence reduces the amount of time needed for compilation.Here the term â€œcompilerâ€ refers to a translator from the instruction set of a Java virtual machine (JVM) to the instruction set of a specific CPU.','What is JIT compiler?',8),(501,'A platform is basically the hardware or software environment in which a program runs. There are two types of platforms software-based and hardware-based. Java provides software-based platform.','What is platform?',8),(502,'The Java platform differs from most other platforms in the sense that it\'s a software-based platform that runs on top of other hardware-based platforms.It has two components:Runtime EnvironmentAPI-Application Programming Interface','What is the main difference between Java platform and other platforms?',8),(503,'The bytecode. Java is compiled to be a byte code which is the intermediate language between source code and machine code. This byte code is not platform specific and hence can be fed to any platform.','What gives Java its write once and run anywhere nature?',8),(504,'The classloader is a subsystem of JVM that is used to load classes and interfaces.There are many types of classloaders e.g. Bootstrap classloader, Extension classloader, System classloader, Plugin classloader etc.','What is classloader?',8),(505,'Yes','Is Empty .java file name a valid source file name?',8),(506,'No.','Is delete,next,main,exit or null keyword in java?',8),(507,'It is empty. But not null.','If I don\'t provide any arguments on the command line, then the String array of Main method will be empty or null?',8),(508,'Program compiles and runs properly.','What if I write static public void instead of public static void?',8),(509,'The local variables are not initialized to any default value, neither primitives nor object references.','Program compiles and runs properly.',8),(510,'Object based programming languages follow all the features of OOPs except Inheritance. Examples of object based programming languages are JavaScript, VBScript etc.','What is difference between object oriented programming language and object based programming language?',8),(511,'The object references are all initialized to null in Java.','What will be the initial value of an object reference which is defined as an instance variable?',8),(512,'Constructor is just like a method that is used to initialize the state of an object. It is invoked at the time of object creation.','What is constructor?',8),(513,'The default constructor provides the default values to the objects. The java compiler creates a default constructor only if there is no constructor in the class','What is the purpose of default constructor?',8),(514,'yes, that is current instance (You cannot use return type yet it returns a value)','Does constructor return any value?',8),(515,'No, constructor is not inherited.','Is constructor inherited?',8),(516,'No, constructor can\'t be final.','Can you make a constructor final?',8),(517,'static variable is used to refer the common property of all objects (that is not unique for each object) e.g. company name of employees,college name of students etc.Static variable gets memory only once in class area at the time of class loading.','What is static variable?',8),(518,'A static method belongs to the class rather than object of a class.A static method can be invoked without the need for creating an instance of a class.Static method can access static data member and can change the value of it.','What is static method?',8),(519,'because object is not required to call static method if It were non-static method,jvm creats object first then call main() method that will lead to the problem of extra memory allocation','Why main method is static?',8),(520,'Is used to initialize the static data member.It is excuted before main method at the time of classloading.','What is static block?',8),(521,'Yes, one of the way is static block','Can we execute a program without main() method?',8),(522,'Program compiles. But at runtime throws an error \'NoSuchMethodError\'.','What if the static modifier is removed from the signature of the main method?',8),(523,'static or class method: Object is not required to call static method.Instance method:Object is required to call instance methods.','What is difference between static (class) method and instance method?',8),(524,'It is a keyword that that refers to the current object.','What is this in java?',8),(525,'Inheritance is a mechanism in which one object acquires all the properties and behaviour of another object of another class. It represents IS-A relationship. It is used for Code Resusability and Method Overriding.','What is Inheritance?',8),(526,'Object class.','Which class is the superclass for every class.',8),(527,'To reduce the complexity and simplify the language, multiple inheritance is not supported in java in case of class','Why multiple inheritance is not supported in java?',8),(528,'Holding the reference of the other class within some other class is known as composition.','What is composition?',8),(529,'Aggregation represents weak relationship whereas composition represents strong relationship. For example: bike has an indicator (aggregation) but bike has an engine (compostion).','What is difference between aggregation and composition?',8),(530,'Pointer is a variable that refers to the memory address. They are not used in java because they are unsafe(unsecured) and complex to understand','Why Java does not support pointers?',8),(531,'It is a keyword that refers to the immediate parent class object','What is super in java?',8),(532,'No. Because super() or this() must be the first statement.','Can you use this() and super() both in a constructor?',8),(533,'The object cloning is used to create the exact copy of an object.','What is object cloning?',8),(534,'If a class have multiple methods by same name but different parameters, it is known as Method Overloading. It increases the readability of the program','What is method overloading?',8),(535,'Because of ambiguity','Why method overloading is not possible by changing the return type in java?',8),(536,'Yes, You can have many main() methods in a class by overloading the main method.','Can we overload main() method?',8),(537,'If a subclass provides a specific implementation of a method that is already provided by its parent class, it is known as Method Overriding. It is used for runtime polymorphism and to provide the specific implementation of the method','What is method overriding',8),(538,'No, you can\'t override the static method because they are the part of class not object.','Can we override static method?',8),(539,'It is because the static method is the part of class and it is bound with class whereas instance method is bound with object and static gets memory in class area and instance gets memory in heap.','Why we cannot override static method?',8),(540,'Yes','Can we override the overloaded method?',8),(541,'Method overloading increases the readability of the program.In this case, parameter must be different.Method overriding provides the specific implementation of the method that is already provided by its super class.In this case, parameter must be same.','Difference between method Overloading and Overriding',8),(542,'Yes, all functions in Java are virtual by default.','Can you have virtual functions in Java?',8),(543,'Now, since java5, it is possible to override any method by changing the return type if the return type of the subclass overriding method is subclass type. It is known as covariant return type.','What is covariant return type?',8),(544,'If you make any variable as final, you cannot change the value of final variable(It will be constant)','What is final variable?',8),(545,'Final methods can\'t be overriden','What is final method?',8),(546,'Final class can\'t be inherited.','What is final class?',8),(547,'A final variable, not initalized at the time of declaration, is known as blank final variable','What is blank final variable?',8),(548,'Yes, only in constructor if it is non-static. If it is static blank final variable, it can be initialized only in the static block','Can we intialize blank final variable?',8),(549,'Yes, such as, public static final void main(String[] args){}.','Can you declare the main method as final?',8),(550,'Runtime polymorphism or dynamic method dispatch is a process in which a call to an overridden method is resolved at runtime rather than at compile-time.In this process, an overridden method is called through the reference variable of a super class. The determination of the method to be called is based on the object being referred to by the reference variable. ','What is Runtime Polymorphism?',8),(551,'No.','Can you achieve Runtime Polymorphism by data members?',8),(552,'In case of static binding type of object is determined at compile time whereas in dynamic binding type of object is determined at runtime','What is the difference between static binding and dynamic binding?',8),(553,'Abstraction is a process of hiding the implementation details and showing only functionality to the user.','What is abstraction?',8),(554,'Abstraction hides the implementation details whereas encapsulation wraps code and data into a single unit.','What is the difference between abstraction and encapsulation?',8),(555,'A class that is declared as abstract is known as abstract class. It needs to be extended and its method implemented. It cannot be instantiated.','What is abstract class?',8),(556,'No, if there is any abstract method in a class, that class must be abstract.','Can there be any abstract method without abstract class?',8),(557,'No, because abstract method needs to be overridden whereas you can\'t override final method.','Can you use abstract and final both with a method?',8),(558,'No, abstract class can never be instantiated.','Is it possible to instantiate the abstract class?',8),(559,'Interface is a blueprint of a class that have static constants and abstract methods.It can be used to achieve fully abstraction and multiple inheritance.','What is interface?',8),(560,'No, because methods of an interface is abstract by default, and static and abstract keywords can\'t be used together.','Can you declare an interface method static?',8),(561,'No, because its implementation is provided by another class.','Can an Interface be final?',8),(562,'An interface that have no data member and method is known as a marker interface.For example Serializable, Cloneable etc','What is marker interface?',8),(563,'An abstract class can have method body (non-abstract methods).Interface have only abstract methods','What is difference between abstract class and interface?',8),(564,'No, they are implicitly public','Can we define private and protected modifiers for variables in interfaces?',8),(565,'An object reference can be cast to an interface reference when the object implements the referenced interface.','When can an object reference be cast to an interface reference?',8),(566,'A package is a group of similar type of classes interfaces and sub-packages. It provides access protection and removes naming collision',' What is package?',8),(567,'No. It is by default loaded internally by the JVM.','Do I need to import java.lang package any time? Why ?',8),(568,'One can import the same package or same class multiple times. Neither compiler nor JVM complains about it.But the JVM will internally load the class only once no matter how many times you import the same class.','Can I import same package/class twice? Will the JVM load the package twice at runtime?',8),(569,'By static import, we can access the static members of a class directly, there is no to qualify it with the class name.','What is static import ?',8),(570,'Exception Handling is a mechanism to handle runtime errors.It is mainly used to handle checked exceptions','What is Exception Handling?',8),(571,'The classes that extend Throwable class except RuntimeException and Error are known as checked exceptions e.g.IOException,SQLException etc. Checked exceptions are checked at compile-time.\r\nThe classes that extend RuntimeException are known as unchecked exceptions e.g. ArithmeticException,NullPointerException etc. Unchecked exceptions are not checked at compile-time.','What is difference between Checked Exception and Unchecked Exception?',8),(572,'Throwable','What is the base class for Error and Exception?',8),(573,'It is not necessary that each try block must be followed by a catch block. It should be followed by either a catch block OR a finally block. And whatever exceptions are likely to be thrown should be declared in the throws clause of the method.','Is it necessary that each try block must be followed by a catch block?',8),(574,'finally block is a block that is always executed','What is finally block?',8),(575,'Yes, by try block. finally must be followed by either try or catch.','Can finally block be used without catch?',8),(576,'finally block will not be executed if program exits(either by calling System.exit() or by causing a fatal error that causes the process to abort)','Is there any case when finally will not be executed?',8),(577,'Throw is used to explicitly throw an exception.Throws is used to declare an exception','What is difference between throw and throws?',8),(578,'Yes.','Can an exception be rethrown?',8),(579,'Yes but only unchecked exception not checked.','Can subclass overriding method declare an exception if parent class method doesn\'t throw an exception ?',8),(580,'Forwarding the exception object to the invoking method is known as exception propagation.','What is exception propagation ?',8),(581,'The simple meaning of immutable is unmodifiable or unchangeable. Once string object has been created, its value can\'t be changed.','What is the meaning of immutable in terms of String?',8),(582,'Because java uses the concept of string literal. Suppose there are 5 reference variables,all referes to one object \'sachin\'.If one reference variable changes the value of the object, it will be affected to all the reference variables. That is why string objects are immutable in java.','Why string objects are immutable in java?',8),(583,'There are two ways to create the string object, by string literal and by new keyword','How many ways we can create the string object?',8),(584,'Only one object.','How many objects will be created in the following code?\r\nString s1=\"Welcome\";  \r\nString s2=\"Welcome\";\r\nString s3=\"Welcome\";',8),(585,'To make Java more memory efficient (because no new objects are created if it exists already in string constant pool).','Why java uses the concept of string literal?',8),(586,'Two objects, one in string constant pool and other in non-pool(heap)','How many objects will be created in the following code?\r\nString s = new String(\"Welcome\");  ',8),(587,'String is an immutable object. StringBuffer is a mutable object','What is the basic difference between string and stringbuffer object?',8),(588,'StringBuffer is synchronized whereas StringBuilder is not synchronized.','What is the difference between StringBuffer and StringBuilder ?',8),(589,'We can create immutable class as the String class by defining final class','How can we create immutable class in java ?',8),(590,'The toString() method returns the string representation of any object. If you print any object, java compiler internally invokes the toString() method on the object. So overriding the toString() method, returns the desired output, it can be the state of an object etc. depends on your implementation.','What is the purpose of toString() method in java ?',8),(591,'A class which is declared inside another class is known as nested class. There are 4 types of nested class member inner class, local inner class, annonymous inner class and static nested class.','What is nested class?',8),(592,'Yes, inner classes are non-static nested classes i.e. inner classes are the part of nested classes.','Is there any difference between nested classes and inner classes?',8),(593,'No, local variable must be constant if you want to access it in local inner class.','Can we access the non-final local variable, inside the local inner class?',8),(594,'Any interface i.e. declared inside the interface or class, is known as nested interface. It is static by default.','What is nested interface ?',8),(595,'Yes, it is known as nested interface','Can a class have an interface?',8),(596,'Yes, they are static implicitely.','Can an Interface have a class?',8),(597,'Garbage collection is a process of reclaiming the runtime unused objects.It is performed for memory management.',' What is Garbage Collection?',8),(598,'gc() is a daemon thread.gc() method is defined in System class that is used to send request to JVM to perform garbage collection.','What is gc()?',8),(599,'finalize() method is invoked just before the object is garbage collected.It is used to perform cleanup processing.','What is the purpose of finalize() method?',8),(600,'Yes.',' Can an unrefrenced objects be refrenced again?',8),(601,'Daemon thread.','What kind of thread is the Garbage collector thread?',8),(602,' final is a keyword, final can be variable, method or class.You, can\'t change the value of final variable, can\'t override final method, can\'t inherit final class.finally: finally block is used in exception handling. finally block is always executed.finalize():finalize() method is used in garbage collection.finalize() method is invoked just before the object is garbage collected.The finalize() method can be used to perform any cleanup processing.ge the value of final variable, can\'t override final method, can\'t inherit final class.','What is difference between final, finally and finalize?',8),(603,'The purpose of the Runtime class is to provide access to the Java runtime system.','What is the purpose of the Runtime class?',8),(604,'By Runtime.getRuntime().exec(?) method.','How will you invoke any external process in Java?',8),(605,'The Reader/Writer class hierarchy is character-oriented, and the InputStream/OutputStream class hierarchy is byte-oriented.','What is the difference between the Reader/Writer class hierarchy and the InputStream/OutputStream class hierarchy?',8),(606,'An I/O filter is an object that reads from one stream and writes to another, usually altering the data in some way as it is passed from one stream to another.','What an I/O filter?',8),(607,'Serialization is a process of writing the state of an object into a byte stream.It is mainly used to travel object\'s state on the network.','What is serialization?',8),(608,'Deserialization is the process of reconstructing the object from the serialized state.It is the reverse operation of serialization','What is Deserialization?',8),(609,'If you define any data member as transient,it will not be serialized',' What is transient keyword?',8),(610,'Externalizable interface is used to write the state of an object into a byte stream in compressed format.It is not a marker interface','What is Externalizable?',8),(611,'Serializable is a marker interface but Externalizable is not a marker interface.When you use Serializable interface, your class is serialized automatically by default. But you can override writeObject() and readObject() two methods to control more complex object serailization process. When you use Externalizable interface, you have a complete control over your class\'s serialization process.','What is the difference between Serializalble and Externalizable interface?',8),(612,'By InetAddress.getByName(\"192.18.97.39\").getHostName() where 192.18.97.39 is the IP address.','How do I convert a numeric IP address like 192.18.97.39 into a hostname like java.sun.com?',8),(613,'Reflection is the process of examining or modifying the runtime behaviour of a class at runtime.It is used in:\r\nIDE (Integreted Development Environment) e.g. Eclipse, MyEclipse, NetBeans.\r\nDebugger\r\nTest Tools etc.','What is reflection?',8),(614,'Yes, by changing the runtime behaviour of a class if the class is not secured.','Can you access the private method from outside the class?',8),(615,'Wrapper classes are classes that allow primitive types to be accessed as objects','What are wrapper classes?',8),(616,'A native method is a method that is implemented in a language other than Java.','What is a native method?',8),(617,'The purpose of the System class is to provide access to system resources.','What is the purpose of the System class?',8),(618,'Object cloning.','What comes to mind when someone mentions a shallow copy in Java?',8),(619,'Singleton class means that any given time only one instance of the class is present, in one JVM.','What is singleton class?',8),(620,'The Window, Frame and Dialog classes use a border layout as their default layout.','Which containers use a border layout as their default layout?',8),(621,'The Panel and Applet classes use the FlowLayout as their default layout.','Which containers use a FlowLayout as their default layout?',8),(622,'The peerless components are called light weight components.','What are peerless components?',8),(623,'A Scrollbar is a Component, but not a Container. A ScrollPane is a Container. A ScrollPane handles its own events and performs its own scrolling.','is the difference between a Scrollbar and a ScrollPane?',8),(624,'Lightweight components are the one which doesn?t go with the native call to obtain the graphical units. They share their parent component graphical units to render them. For example, Swing components.','What is a lightweight component?',8),(625,'For every paint call, there will be a native call to get the graphical units.For Example, AWT.','What is a heavyweight component?',8),(626,'An applet is a small java program that runs inside the browser and generates dynamic contents.','What is an applet?',8),(627,'Yes. Add a main() method to the applet.','Can you write a Java class that could be used both as an applet as well as an application?',8),(628,'A Locale object represents a specific geographical, political, or cultural region.','What is Locale?',8),(629,'By ResourceBundle.getBundle(?) method.','How will you load a specific locale?',8),(630,'are reusable software components written in the Java programming language, designed to be manipulated visually by a software development environment, like JBuilder or VisualAge for Java','What is a JavaBean?',8),(631,'Multithreading is a process of executing multiple threads simultaneously. Its main advantage is:\r\nThreads share the same address space.\r\nThread is lightweight.\r\nCost of communication between process is low.','What is multithreading?',8),(632,'A thread is a lightweight subprocess.It is a separate path of execution.It is called separate path of execution because each thread runs in a separate stack frame.','What is thread?',8),(633,'Under preemptive scheduling, the highest priority task executes until it enters the waiting or dead states or a higher priority task comes into existence. Under time slicing, a task executes for a predefined slice of time and then reenters the pool of ready tasks. The scheduler then determines which task should execute next, based on priority and other factors','What is the difference between preemptive scheduling and time slicing?',8),(634,'The join() method waits for a thread to die. In other words, it causes the currently running threads to stop executing until the thread it joins with completes its task.','What does join() method?',8),(635,'Wait:The wait() method is defined in Object class. wait() method releases the lock.\r\n Sleep():The sleep() method is defined in Thread class.The sleep() method doesn\'t releases the lock','What is difference between wait() and sleep() method?',8),(636,'No, there is no possibility to start a thread twice. If we does, it throws an exception.','Is it possible to start a thread twice?',8),(637,'yes, but it will not work as a thread rather it will work as a normal object so there will not be context-switching between the threads.','Can we call the run() method instead of start()?',8),(638,'The daemon threads are basically the low priority threads that provides the background support to the user threads. It provides services to the user threads.','What about the daemon threads?',8),(639,'No, if you do so, it will throw IllegalThreadStateException','Can we make the user thread as daemon thread if thread is started?',8),(640,'The shutdown hook is basically a thread i.e. invoked implicitely before JVM shuts down. So we can use it perform clean up resource.','What is shutdown hook?',8),(641,'We should interrupt a thread if we want to break out the sleep or wait state of a thread.','When should we interrupt a thread?',8),(642,'Synchronization is the capabilility of control the access of multiple threads to any shared resource.It is used:\r\nTo prevent thread interference.\r\nTo prevent consistency problem.','What is synchronization?',8),(643,'Synchronized block is used to lock an object for any shared resource.\r\nScope of synchronized block is smaller than the method.','What is the purpose of Synchronized block?',8),(644,'Yes. You can lock an object by putting it in a \'synchronized\' block. The locked object is inaccessible to any thread other than the one that explicitly claimed it.','Can Java object be locked down for exclusive use by a given thread?',8),(645,'If you make any static method as synchronized, the lock will be on the class not on object.',' What is static synchronization?',8),(646,'The notify() is used to unblock one waiting thread whereas notifyAll() method is used to unblock all the threads in waiting state.','What is the difference between notify() and notifyAll()?',8),(647,'Deadlock is a situation when two threads are waiting on each other to release a resource. Each thread waiting for a resource which is held by the other waiting thread.','What is deadlock?',8),(648,'ArrayList is not synchronized.ArrayList is not a legacy class.ArrayList increases its size by 50% of the array size.\r\nVector is synchronized.Vector is a legacy class.Vector increases its size by doubling the array size.','What is the difference between ArrayList and Vector?',8),(649,'ArrayList uses a dynamic array.ArrayList is not efficient for manipulation because a lot of shifting is required.ArrayList is better to store and fetch data.\r\nLinkedList uses doubly linked list.\r\nLinkedList is efficient for manipulation.LinkedList is better to manipulate data.','What is the difference between ArrayList and LinkedList?',8),(650,'Iterator traverses the elements in forward direction only.ListIterator traverses the elements in backward and forward directions both.','What is the difference between Iterator and ListIterator?',8),(651,'Iterator can traverse legacy and non-legacy elements.Enumeration can traverse only legacy elements.','What is the difference between Iterator and Enumeration?',8),(652,'List can contain duplicate elements whereas Set contains only unique elements.','What is the difference between List and Set?',8),(653,'HashSet maintains no order whereas TreeSet maintains ascending order.','What is the difference between HashSet and TreeSet?',8),(654,'Set contains values only whereas Map contains key and values both','What is the difference between Set and Map?',8),(655,'HashSet contains only values whereas HashMap contains entry(key,value). HashSet can be iterated but HashMap need to convert into Set to be iterated.','What is the difference between HashSet and HashMap?',8),(656,'HashMap maintains no order but TreeMap maintains ascending order.','What is the difference between HashMap and TreeMap?',8),(657,'HashMap is not synchronized.HashMap can contain one null key and multiple null values.\r\nHashtable is synchronized.Hashtable cannot contain any null key or null value','What is the difference between HashMap and Hashtable?',8),(658,'Collection is an interface whereas Collections is a class. Collection interface provides normal functionality of data structure to List, Set and Queue. But, Collections class is to sort and synchronize collection elements.','What is the difference between Collection and Collections?',8),(659,'Comparable provides only one sort of sequence.Comparator provides multiple sort of sequences.','What is the difference between Comparable and Comparator?',8),(660,'If you change the value in properties file, you don\'t need to recompile the java class. So, it makes the application easy to manage.',' What is the advantage of Properties file?',8),(661,'The hashCode() method returns a hash code value (an integer number).The hashCode() method returns the same integer number, if two keys (by calling equals() method) are same.But, it is possible that two hash code numbers can have different or same keys.','What does the hashCode() method?',8),(662,'The equals method is used to check whether two objects are same or not. It needs to be overridden if we want to check the objects based on property.For example, Employee is a class that has 3 data members: id, name and salary. But, we want to check the equality of employee object on the basis of salary. Then, we need to override the equals() method.','Why we override equals() method?',8),(663,'Yes, Collections class provides methods to make List, Set or Map elements as synchronized:public static List synchronizedList(List l){}\r\npublic static Set synchronizedSet(Set s){}\r\npublic static SortedSet synchronizedSortedSet(SortedSet s){}\r\npublic static Map synchronizedMap(Map m){}\r\npublic static SortedMap synchronizedSortedMap(SortedMap m){}','How to synchronize List, Set and Map elements?',8),(664,'If we use generic class, we don\'t need typecasting. It is typesafe and checked at compile time.','What is the advantage of generic collection?',8),(665,'Two different keys with the same hash value is known as hash-collision. Two different entries will be kept in a single hash bucket to avoid the collision.','What is hash-collision in Hashtable and how it is handled in Java?',8),(666,'The Dictionary class provides the capability to store key-value pairs.','What is the Dictionary class?',8),(667,'The default size of load factor is 0.75. The default capacity is computed as initial capacity * load factor. For example, 16 * 0.75 = 12. So, 12 is the default capacity of Map.','What is the default size of load factor in hashing based collection?',8),(668,'JDBC is a Java API that is used to connect and execute query to the database. JDBC API uses jdbc drivers to connects to the database.','What is JDBC?',8),(669,'JDBC Driver is a software component that enables java application to interact with the database.There are 4 types of JDBC drivers:\r\n1.JDBC-ODBC bridge driver\r\n2.Native-API driver (partially java driver)\r\n3.Network Protocol driver (fully java driver)\r\n4.Thin driver (fully java driver)','What is JDBC Driver?',8),(670,'Registering the driver class\r\nCreating connection\r\nCreating statement\r\nExecuting queries\r\nClosing connection','What are the steps to connect to the database in java?',8),(671,'The java.sql package contains interfaces and classes for JDBC API.\r\nInterfaces:\r\nConnection\r\nStatement\r\nPreparedStatement\r\nResultSet\r\nResultSetMetaData\r\nDatabaseMetaData\r\nCallableStatement etc.\r\n\r\nClasses:\r\nDriverManager\r\nBlob\r\nClob\r\n\r\nTypes\r\nSQLException etc.','What are the JDBC API components?',8),(672,'There are 3 JDBC statements.\r\nStatement\r\nPreparedStatement\r\nCallableStatement','What are the JDBC statements?',8),(673,'In case of Statement, query is complied each time whereas in case of PreparedStatement, query is complied only once. So performance of PreparedStatement is better than Statement.','What is the difference between Statement and PreparedStatement interface?',8),(674,'By using Callable statement interface, we can execute procedures and functions.','How can we execute stored procedures and functions?',8),(675,'The DriverManager class manages the registered drivers. It can be used to register and unregister drivers. It provides factory method that returns the instance of Connection.',' What is the role of JDBC DriverManager class?',8),(676,'The Connection interface maintains a session with the database. It can be used for transaction management. It provides factory methods that returns the instance of Statement, PreparedStatement, CallableStatement and DatabaseMetaData.','What does the JDBC Connection interface?',8),(677,'The ResultSet object represents a row of a table. It can be used to change the cursor pointer and get the information from the database.','What does the JDBC ResultSet interface?',8),(678,'The ResultSetMetaData interface returns the information of table such as total number of columns, column name, column type etc.','What does the JDBC ResultSetMetaData interface?',8),(679,'The DatabaseMetaData interface returns the information of the database such as username, driver name, driver version, number of tables, number of views etc.','What does the JDBC DatabaseMetaData interface?',8),(680,'The Connection interface provides methods for transaction management such as commit(), rollback() etc.','Which interface is responsible for transaction management in JDBC?',8),(681,'By using batch processing technique in JDBC, we can execute multiple queries. It makes the performance fast.','What is batch processing and how to perform batch processing in JDBC?',8),(682,'By using PreparedStatement interface, we can store and retrieve images.','How can we store and retrieve images from the database?',8);

/*Table structure for table `quiz` */

DROP TABLE IF EXISTS `quiz`;

CREATE TABLE `quiz` (
  `q_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `answer` longtext,
  `optiona` longtext,
  `optionb` longtext,
  `optionc` longtext,
  `optiond` longtext,
  `question` longtext,
  `topic_id` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`q_id`),
  KEY `FKo0tvqkggjnls7wms6tiuff03p` (`topic_id`),
  CONSTRAINT `FKo0tvqkggjnls7wms6tiuff03p` FOREIGN KEY (`topic_id`) REFERENCES `topics` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=614 DEFAULT CHARSET=latin1;

/*Data for the table `quiz` */

insert  into `quiz`(`q_id`,`answer`,`optiona`,`optionb`,`optionc`,`optiond`,`question`,`topic_id`) values (1,'3','Java Servlets are programs that run on a Web or Application server.','Java Servlets act as a middle layer between a request coming from a Web browser or other HTTP client and databases or applications on the HTTP server.','Both of the above.','None of these','What are Servlets?',1),(2,'2','interface','abstract class','concreate class','None of these','What is javax.servlet.http.HttpServlet?',1),(3,'2','web component response settings','web component settings','web component request objects','All of the above','A deployment descriptor describes',1),(4,'2','The service() method is called when the servlet is first created.','The service() method is called whenever the servlet is invoked.','Both of the above.','None of these','When service() method of servlet gets called?',1),(5,'1','1024','1028','1082','All of these','How many caracters we can send though doGet()?',1),(6,'4','doOption','doTrace','doMethod','Service','Which method decide which method will call i.e doGet() or doPost() based on http method of http request?',1),(7,'2','True','False','Not always','None of these','A get request gets information from a client. A post request posts data to a client.',1),(8,'2','Servlet container','Servlet context','Servlet request heap','Servlet response heap','A servlet maintains session in',1),(9,'2','java.servlet','javax.servlet','.servlet','All are same','All servlets must implement the Servlet interface of package:',1),(10,'1','using session.invalidate()','By setting programmatically like public void setMaxInactiveInterval(int interval)','session never expires.','None of these','How can we make existing session be invalidated?',1),(11,'1','Only one','One each per servlet','One each per request','One each per response','How many ServletContext objects are available for an entire web application?',1),(12,'4','getServletContext().getServletConfig().getInitParameter()','getServletConfig().getInitParameter()','this.getServletConfig().getInitParameter()','All of these','How the web-application get servlet context?',1),(13,'2','We cannot','Through url','Through payload','None of these','How to send data in get method?',1),(14,'4','servlet container','Servlet context','servlet config','servlet filter','Dynamic interception of requests and responses to transform the information is done by',1),(15,'2','ServletContextAttributeListener','ServletContextListener','HttpSessionListener','All of above','How can we get context init parameter and run some code before rest of the application can service a client?',1),(16,'1','get','post','delete','none of these','If you are not putting method name in your form tag, what is the default method?',1),(17,'3','The new object will contain all the data it used to but the new field is not accessible','The old class will be reloaded.','The new object will contain all the data it used to including the removed field','An exception will occur','If you delete a field from a class and recompile the class, but then load an object that was serialised before the new class was compiled what will happen?',1),(18,'2','ServletRequestListener','ServletRequestAttributeListener','ServletRequestEventListener','HttpRequestListener','If you want to know when a request attribute has removed,added or replace, then which listener is the appropriate one?',1),(19,'3','ServletRequestListener','ServletContextListener','HttpSessionListener','HttpSessionBindingListener','If you want to track active session or how many users are there? So which listener you should use.',1),(20,'1','web.xml','servlet.mappings','servlet.xml','Simple.java','In which file do we define a servlet mapping?',1),(21,'3','class','package','WEB-INF','webapps','In which folder we can put web.xml?',1),(22,'4','HttpSession','ServletRequest','ServletContext','ServletConfig','In which of these getAttibute() and setAttribute() method is not defined?',1),(23,'2','1 and 2 only','1 only','2 and 3 only','1 and 3 only','Java Networking Java 1.1 natively supports which of the following protocols: <br/> 1) TCP <br/> 2) UDP <br/> 3) SMB',1),(24,'2','value','name/value','Both can be used','None of these','Parameters are passed as ______ pairs in a get request.',1),(25,'1','to include other resources','to include an image','to include xml object','to include e-mailing response','RequestDispatcher object is used',1),(26,'1','an association between a URL pattern and a servlet','an association between a URL pattern and a request page','an association between a URL pattern and a response page','All of the above','Servlet mapping defines',1),(27,'1','True','False','Can not say','None of these','Servlets and JavaServer Pages have become so popular that they are now supported directly or with third-party plug-ins by most major Web servers and application servers.',1),(28,'1','ServletRequestListener','ServletRequestAttributeListener','ServletContextListener','HttpRequestListener','Suppose you want to know each time request comes in, so that you can log it. Which listener is appropriate for that?',1),(29,'2','client','server','Internet','in your network','The client can access the servlet only if the servlet is installed on a ______ that can respond to servlet requests.',1),(30,'4','the session is completed','the session object is passed to another method','the session does not exists','the session is existing','The getSession() method with \'true\' as its parameter [ getSession(true) ] it will return the previous session object when',1),(31,'2','sends a request to another resource like servlet, jsp or html','includes resource of file like servlet, jsp or html','appends the request and response objects to the current servlet','None of these','The include() method of RequestDispatcher',1),(32,'1','ServletConfig object','ServletContext object','ServletRequest object','ServletResponse object','The init parameter name and value pairs that are defined in web.xml file are handled by',1),(33,'2','servlet context','servlet container','the supporting protocol (such as http or https)','All of the above','The life cycle of a servlet is managed by',1),(34,'1','Servlets are thread based and CGI is process based','Servlets executes slower compared to CGI','Servlet has no platform specific API, where as CGI has','All of the above','The major difference between servlet and CGI is',1),(35,'2','return back to the same method from where the forward was invoked','not return back to the same method from where the forward was invoked and the web pages navigation continues','Both A and B are correct','None of these','The method forward(request,response) will',1),(36,'1','web.xml','web.Doc','web.txt','web.ini','The servlet initialization parameters are specified in the _______ deployment descriptor file as part of a servlet element.',1),(37,'1','servlet filter','servlet container','servlet context','servlet config','The tasks - authentication-blocking of requests, data compression, logging and auditing - are performed by',1),(38,'1','must be same','must not be same','may be same','None of these','The values of &lt;servlet-name&gt; and &lt;servlet-class&gt; in web.xml file',1),(39,'4','HttpServletResponce','HttpRequest','ServletRequest','HttpServletRequest','The Web server that executes the servlet creates an ______ object and passes this to the servlet\'s service method (which, in turn, passes it to doGet or doPost).',1),(40,'2','config-param','init-param','context-param','None of these','Which tag you can define servlet config in web.xml?',1),(41,'2','config-param','context-param','init-param','All of these','Which tag you can define servlet context in web.xml?',1),(42,'3','ServletConfig object is used','ServletException object is used','ServletContext object is used','ServletContainer object is used','To get the servlet environment information',1),(43,'2','False','True','Can not say','None of these','Using relative paths to reference resources in the same context root makes your Web application more flexible.',1),(44,'2','contextInit(), contextService(), contextDestroyed()','contextInitialized(),contextDestroyed()','contextInitialized(), contextService(), contextDestroyed()','None of these','What are the mechanisms available in ServletContextListener interface?',1),(45,'4','Support for annotations','Several web.xml conveniences','Loading the class','All of the above','What are the new features added in Servlet 2.5? Choose correct answers.',1),(46,'4','Session-IDs are usually stored in the cookies, URLs and hidden fields of Web pages.','A session-ID is an unique identification','It is transmitted between the client and the server','All of these','What are the true sentences about Session-Id?',1),(47,'2','Add a new header with new value','Add a new header if that is not existing, otherwise replace the value','Only change the value of older header','Both A and B','What do you mean by reponse.addHeader(\"xyz\", \"abc\"); ?',1),(48,'1','Cookie works at client side whereas HttpSession works at server side','HttpSession works at client side whereas Cookie works at server side','Both are Same','None of these','What is difference between Cookies and HttpSession?',1),(49,'4','It checks Security','It modifies the request or response','It is used for Logging and auditing','All of these','What are the correct statements about filter?',1),(50,'1','8K','4K','2K','1K','What is the limit of data to be passed from HTML when doGet() method is used?',1),(51,'3','Add a new header and value','Add an additional value to exiting header','Add a new header and value or add an additional value to exiting header','Add new header and value always','What is the meaning of response.setHeader(\"xyz\", \"abc\");',1),(52,'3','Add a new header with integer value','Replace the value to integer to existing header','Replace the value to integer to existing header or Add a new header with integer value','Always add a new header','What is the meaning of response.setIntHeader(\"xyz\" ,77); ?',1),(53,'2','Client side program','Srver side program','Both are true','None of these','What is the servlet?',1),(54,'3','application/java','image/bmp','text/html','All of the above','Which of these are MIME types?',1),(55,'2','It tells the browser what type of data browser will send','It tells the browser what type of data browser will receive','It tells the server what type of data server will receive','It tells the server what type of data server will send','What is true about MIME type?',1),(56,'3','Mail Interface Multiple Extension','Mail Internet Multiple Extension','Multiple Internet Mail Extension','Multiple Interface Mail Extension','What is full form of MIME type?',1),(57,'3','When container starts','When doGet/doPost called','When Servlet intialised','When constuctor called','When init parameters are read by container?',1),(58,'4','by comma','by semicolon','by questionmark','by ampersand','When we are sending data in URL in get method, how to separate parameters?',1),(59,'2','By comma separator','By question mark','By ampersand','All of these','When we are sending data in URL in get method, how to separate separate path and parameter?',1),(60,'4','If data is sensitive','Data is greater than 1024 characters','If your application do not need bookmarks','If your application should be faster','When we should use doPost() method? choose the incorrect option',1),(61,'3','classes','library','lib','WEB-INF','Where we can put jar file?',1),(62,'1','get','post','trace','option','Which http method is idempotent?',1),(63,'1','get','post','option','put','Which http method send by browser that asks the server to get the page only?',1),(64,'2','put','post','delete','None of these','Which http method send by browser that gives the server what user data typed in the form?',1),(65,'4','HttpServlet','GenericServlet','Service','Servlet','Which interface contain servlet life-cycle methods?',1),(66,'2','class loading','init()','service()','destroy()','Which life cycle metod is called once in servlet life?',1),(67,'4','init','service','system.gc','destroy','Which life-cycle method make ready the servlet for garbage collection?',1),(68,'1','ServletContextListener','ServletContextAttributeListener','HttpConextListener','All of above','Which listener should use to find context has been created or destroyed?',1),(69,'3','HttpSessionListener','HttpSessionBindingListener','HttpSessionAttributeListener','HttpSessionActivationListener','Which Listener you should use , when you want to know session attribute has added,removed or repalced?',1),(70,'2','service','init','doGet','doPost','Which method does not exists in HttpServlet Class?',1),(71,'4','get()','post()','init()','service()','Which method is called when client request come?',1),(72,'3','setPageType()','setContextType()','setContentType()','setResponseType()','Which method is used to specify before any lines that uses the PintWriter?',1),(73,'2','redirect','forward','option','None of these','Which method redirect to resources to different servers internally?',1),(74,'3','goGet','doOption','doTrace','doPost','Which method shows the client what server is receiving?',1),(75,'1','sendRedirect','forward','Both','None of these','Which method take a string not a URL?',1),(76,'4','This is a abstract class','HttpServlet extends GenericServlet and adds support for doGet(), doPost()','Service method defined here only take http specific request','All of these','Which statement is true about HttpServlet?',1),(77,'1','There is one servlet config per one application','We can access ServletContext through it','provide deploy-time information to server','There is one servlet config per one servlet','Which statements is not true about ServletConfig?',1),(78,'4','web-app','welcome-file-list','servlet','servlet-mappings','Which tag does not belongs to web.xml?',1),(79,'1','servlet','servlet-mapping','web-app','servlet-mappings','Which tag of DD maps internal name of servlet to fully qualified class name?',1),(80,'2','servlet','servlet-mapping','web-app','servlet-mappings','Which tag of DD maps internal name of servlet to public URL pattern?',1),(81,'3','browser','client','container','user','Who does controll life-cycle of a servlet?',1),(82,'2','URL rewriting, using session object, using response object, using hidden fields','URL rewriting, using session object, using cookies, using hidden fields','URL rewriting, using servlet object, using response object, using cookies','URL rewriting, using request object, using response object, using session object','Which are the session tracking techniques?',1),(83,'3','Cookies','URL rewriting','HttpSessions','Hidden tags','Which of the following can be used to store client side user state information while avoiding any impact due to the users web browser configuration ?',1),(84,'3','Make the information available from a singleton','Store the information in the ServletContext','Store the information in an HttpSession','Store the information in a Properties file','Which of the following describe ways that dynamic information can be made available to all servlet requests sent to an application',1),(85,'3','getParameter() against the HttpServletRequest object','getInputStream() against the HttpServletrequest object','getBytes() against the HttpServletrequest object','getQueryString() against the HttpServletrequest object','Which of the following identifies the correct method a servlet developer should use to retrieve form data from the client provided to the doPost() method ?',1),(86,'1','browser','client','server','none of these','Which of the following interprets html code and renders webpages to user?',1),(87,'2','They are instantiated every time a request is made.','They are a mechanism used by the class loader to download applets.','They can be used instead of CGI scripts.','They require a web browser that supports JDK 1.1','Which of the following is NOT true about servlets ?',1),(88,'1','Cookies','URL- rewriting','RequestDispatcher','All of these','Which of these are common mechanisms used for session tracking?',1),(89,'3','JRun','WebLogic Server(BEA)','Apache HTTP Server','GlassFish','Which of these is not a Application Server?',1),(90,'4','Internet Information Services (IIS)','tomcat','Lighttpd','glassfish','Which of these is not webserver?',1),(91,'4','init()','service()','doGet()','All of these','Which of these life-cycle method you can over-ride in your class?',1),(92,'2','forward','redirect','Both of these','None of these','Which of these method always sends a header back to the client/browser to get the desire page?',1),(93,'3','ftp','smtp','http/https','None of these','Which of these protocols are supported by HttpServlet?',1),(94,'3','Generic Servlet is an abtract class','A GenericServlet has a service() method to handle requests.','Genric Servlet extends HttpServlet and override doGet() method','Generic servlet implements Servlet Interface and over-rides life-cycle method','Which of these statements are not true about GenericServlet?',1),(95,'4','There is one ServletContext per one application','Generally it is used to get web app parameters','We can get Server Information though it','There is one ServletContext per one servlet','Which statement is not true about ServletContext?',1),(96,'1','It must implement an interface','It is accessible from any other class','It must be final if it is declared in a method scope.','It can access private instance variables in the enclosing object','Which statement is true about a non-static inner class ?',1),(97,'1','HttpSessionBindingListener','HttpSessionAttributeListener','HttpSessionListener','All of the above','You have an attribute class, and you want object of this type should be notified when they are bound to or removed from a session. So which listener is appropriate one?',1),(98,'1','The destroy() method is called only once at the end of the life cycle of a filter.','The destroy() method is called after the filter has executed doFilter method.','Both A and B','None of these','When destroy() method of filter gets called?',1),(99,'2','The doFilter() method is called when the filter is first created.','The doFilter() method is called whenever the servlet being filtered is invoked.','Both A and B','None of these','When doFilter() method of servlet gets called?',1),(100,'3','A GET request results from a normal request for a URL.','The service() method checks the HTTP request type as GET and calls doGet() method.','Both A and B','None of these','When doGet() method of servlet gets called?',1),(101,'1','The init() method is called by the web container to indicate to a filter that it is being placed into service.','The init() method is called whenever the servlet being filtered is invoked.','Both A and B','None of these','When init() method of filter gets called?',1),(102,'1','The init() method is called when the servlet is first created.','The init() method is called whenever the servlet is invoked.','Both A and B','None of these','When init() method of servlet gets called?',1),(103,'1','error-page','error-handler','exception','exception-handler','Which element of web.xml is used to specify the error handler in servlets?',1),(104,'4','Authentication Filters.','Data compression Filters.','Encryption Filters.','All of the above.','Which of the following are valid servlet filters?',1),(105,'2','request.addHeader(name,value)','response.addHeader(name,value)','Header.addDateHeader(name,value)','None of these','Which of the following code can be used to add a header?',1),(106,'2','request.sendRedirect(location)','response.sendRedirect(location)','header.sendRedirect(location)','None of these','Which of the following method can be used to redirect user to different url?',1),(107,'2','request.sendError(statusCode)','response.sendError(statusCode)','header.sendError(statusCode)','None of these','Which of the following method can be used to send an error response to the client using the specified status code and clearing the buffer.',1),(108,'1','response.setCharacterEncoding(charset)','request.setCharacterEncoding(charset)','header.setCharacterEncoding(charset)','None of these','Which of the following method can be used to set the character encoding for the body of the response?',1),(109,'2','request.setContentLength(length)','response.setContentLength(length)','header.setContentLength(length)','None of these','Which of the following method can be used to set the length of content of body of the response?',1),(110,'2','request.setLocale(locale)','response.setLocale(locale)','header.setLocale(locale)','None of these','Which of the following method can be used to set the locale of the response?',1),(111,'1','response.setBufferSize(size)','request.setBufferSize(size)','header.setBufferSize(size)','None of these','Which of the following method can be used to set the preferred buffer size for the body of the response?',1),(112,'1','response.setStatus(statusCode)','request.setStatus(statusCode)','header.setStatus(statusCode)','None of these','Which of the following method can be used to set the status code of the response?',1),(113,'2','response.isSecure()','request.isSafe()','Header.isSecure()','None of these','Which of the following method checks whether this request was made using a secure channel, such as HTTPS?',1),(114,'1','response.encodeRedirectURL(url)','request.encodeRedirectURL(url)','Header.encodeRedirectURL(url)','None of these','Which of the following method encodes the specified URL for use in the sendRedirect method?',1),(115,'1','response.containsHeader(headerName)','request.containsHeader(headerName)','Header.containsHeader(headerName)','None of these','Which of the following method indicates whether the named response header has already been set?',1),(116,'1','response.isCommitted()','request.isCommitted()','Header.isCommitted()','None of these','Which of the following method indicates whether the response has been committed?',1),(117,'1','session.invalidate()','response.deleteSession()','request.deleteSession()','None of these','Which of the following method is used to delete a HTTP Session object in servlets?',1),(118,'1','session.removeAttribute(name)','session.alterAttribute(name)','session.updateAttribute(name)','None of these','Which of the following method is used to delete an attribute from a HTTP Session object in servlets?',1),(119,'1','request.getSession()','response.getSession();','new Session()','None of these','Which of the following method is used to get a HTTP Session object in servlets?',1),(120,'2','response.getCookies()','request.getCookies()','Cookies.getCookies()','None of these','Which of the following method is used to get cookies in servlet?',1),(121,'3','response.getDisplayLanguage()','Locale.getDisplayLanguage()','request.getDisplayLanguage()','None of these','Which of the following method is used to get language name in servlets?',1),(122,'2','response.getHeaderNames()','request.getHeaderNames()','Header.getHeaderNames()','None of these','Which of the following method is used to get names of the headers in servlet?',1),(123,'1','response.getWriter()','request.getWriter()','new PrintWriter()','None of these','Which of the following method is used to get PrintWriter object in servlet?',1),(124,'2','session.getSessionId()','session.getId()','session.getActiveId()','None of these','Which of the following method is used to get session id of a HTTP Session object in servlets?',1),(125,'1','request.getSession()','response.getSession()','new Session()','None of these','Which of the following method is used to get session in servlet?',1),(126,'1','request.getISO3Country()','Locale.getISO3Country()','response.getISO3Country()','None of these','Which of the following method is used to get three-letter abbreviation for this locale\'s country in servlets?',1),(127,'2','session.setIntHeader(\"Refresh\", 5)','response.setIntHeader(\"Refresh\", 5)','request.setIntHeader(\"Refresh\", 5)','None of these','Which of the following method is used to set auto refresh of a page after 5 seconds?',1),(128,'1','response.addCookie(cookie);','response.sendCookie(cookie);','response.createCookie(cookie);','None of these','Which of the following method sends a cookie in servlet?',1),(129,'1','init(), service(), destroy()','initialize(), service(), destroy()','init(), doFilter(), destroy()','init(), service(), delete()','Which of the following is the order of filter life cycle methods?',1),(130,'3','After the destroy() method is called, the servlet object is marked for garbage collection.','The servlet is terminated by calling the destroy() method.','Both A and B','None of these','Which of the following is true about destroy() method of servlet?',1),(131,'3','The GET method sends the encoded user information appended to the page request.','The GET method is the defualt method to pass information from browser to web server.','Both A and B','None of these','Which is true about HTTP Get method?',1),(132,'3','The POST method sends the encoded user information as a seperate message to page request.','The POST method is used to submit form data normally.','Both A and B','None of these','Which is true about HTTP Post method?',1),(133,'1','session.setMaxInactiveInterval(interval)','response.setMaxInactiveInterval(interval)','request.setMaxInactiveInterval(interval)','None of these','How to set the session timeout in servlets?',1),(134,'3','Header.getPathInfo()','response.getPathInfo()','request.getPathInfo()','None of these','How to retrieves any extra path information associated with the URL the client sent?',1),(135,'1','request.getRequestedSessionId()','response.getRequestedSessionId()','Header.getRequestedSessionId()','None of these','How to retrieves session ID specified by the client?',1),(136,'3','new InputStream()','response.getInputStream()','request.getInputStream()','None of these','How to retrieves the body of the request as binary data?',1),(137,'2','new ClassContextPath()','request.getContextPath()','response.getContextPath()','None of these','How to retrieves the context of the request?',1),(138,'1','request.getRemoteHost()','response.getRemoteHost()','Header.getRemoteHost()','None of these','How to retrieves the fully qualified name of the client making this request?',1),(139,'1','request.getRemoteAddr()','response.getRemoteAddr()','Header.getRemoteAddr()','None of these','How retrieves the Internet Protocol (IP) address of the client that sent the request?',1),(140,'1','request.getRemoteUser()','response.getRemoteUser()','Header.getRemoteUser()','None of these','How to retrieves the login of the user making this request?',1),(141,'3','Header.getMethod()','response.getMethod()','request.getMethod()','None of these','How to retrieves the name of the HTTP Method?',1),(142,'3','Header.getHeaderName(headerName)','response.getHeader(headerName)','request.getHeader(headerName)','None of these','How to retrieves the request header?',1),(143,'3','request.getParameter()','request.getParameterValues()','request.getParameterNames()','None of these','Which of the following method can be used to get complete list of all parameters in the current request?',1),(144,'2','request.getParameter()','request.getParameterValues()','request.getParameterNames()','None of these','Which of the following method can be used to get the multiple values of a parameter like checkbox data?',1),(145,'1','JSP Container','The asp.dll component','IIS','Web Server','JavaServer Pages are processed by?',2),(146,'1','contentType','generateXML','type','outputXML','A JSP page needs to generate an XML file. Which attribute of page directive may be used to specify that the JSP page is generating an XML file.',2),(147,'2','extends','import','include','package','A JSP page uses the java.util.ArrayList class many times. Instead of referring the class by its complete package name each time, we want to just use ArrayList. Which attribute of page directive must be specified to achieve this. Select the one correct ans',2),(148,'1','1,2,3','1,3','Only 3','None of these','Choose correct attributes for &lt;jsp: plugin /&gt;<br/><br/>1. code,align, archive,height, hspace, name,<br/>2. nspluginurl, iepluginurl jrevision, type<br/>3. vspace, title, and width',2),(149,'1','It allow dynamic include','Processed at Translation-time','Have HTTP Headers information','2,3','Choose correct for include Action',2),(150,'4','It allow dynamic include','Processed at Translation-time','Have HTTP Headers information','2,3','Choose correct for include directive',2),(151,'1','page, request, session, application','Page, response, session, application','Page, request, response, session','None of these','Choose correct scopes into JSP:-',2),(152,'4','useBean','setProperty','getProperty','All','Choose JavaBean Actions:-',2),(153,'1','Clustering','ShareWeb','loadBalancer','None of these','Fill in the blanks- Sharing of session data across multiple load balanaced web servers is called _________ ?',2),(154,'1','isErrorPage =\"true\"','isErrorPage =\"false\"','session=\"true\"','session=\"false\"','How you can make jsp page as error page',2),(155,'2','The source JSP file','HTML','The compiled Servlet file','The source Servlet file','HttpServlet.service() thrwos ServletException and IOException',2),(156,'1','1,2,3,4','1,3,4','2,3,4','None of these','IBM WebSphere is? <br/><br/>1. A full-featured Web Application Server <br/>2 It provides supports to the Servlet and JSP <br/>3. It includes pooled database access for DB2 and Oracle Relational Databases, <br/>4. Prtovide support for EJB . <br/>Choose cor',2),(157,'4','id and scope','class or beanName,name,property,value','type and id','name and property','In &lt;jsp:getProperty /&gt; which two attributes is necessary',2),(158,'4','id and scope','type and id','file and flush','page and flush','In &lt;jsp:include&gt; which attributes are used',2),(159,'4','id and scope','class or beanName','type and id','None of these','In &lt;jsp:useBean&gt; which two attributes is necessary',2),(160,'4','Apache Tomcat','Bea WebLogic','JSP Engine','All of these','JSP can run in',2),(161,'1','session','application','httpSession','httpsession','JSP pages have access to implicit objects that are exposed automatically. Name the implicit object that is of type HttpSession.',2),(162,'4','HttpRequest','ServletRequest','Request','HttpServletRequest','JSP pages have access to implicit objects that are exposed automatically. One such object that is available is request. The request object is an instance of which class?',2),(163,'1','page','application','session','request','Name the default value of the scope atribute of &lt;jsp:usebean&gt;.',2),(164,'2','page','pageContext','context','object','Name the implicit variable available to JSP pages that may be used to access all the other implicit objects.',2),(165,'1','Selection','Iteration','Sequence','None of these','Sorting Coins You have a number of different coins that need to be seperated into denominations, select from the list what you think would be the appropriate JSP construct for the task.',2),(166,'1','20','30','22','24','The browsers are only required to accept_______ cookies per site?',2),(167,'2','500','404','505','440','The error message displayed when the page is not found at the correct location?',2),(168,'2','Servlet context attribute','Servlet context listeners','Session Attribute','Session Listeners','The listener is notified when the Servlet context (i.e., the Web application) is initialized and destroyed?',2),(169,'4','cookie.setAgeMax (int seconds)','cookie.setAgeMax (float seconds)','cookie.setMaxAge(float seconds)','cookie.setMaxAge(int seconds)','The maximum age of the cookie in JSP can be set by?',2),(170,'4','Scriptlets','Expressions','Declarations','All','Three scripting elements of JSP',2),(171,'4','HTTP Communication (Text-based and object-based)','Socket Communication','RMI Communication','All of the above','What is the possible way of communication between applet and Servlet?',2),(172,'4','java.util.Date','int','java.sql.Date.','long','What is the return type of the getLastModified method of HttpServlet?',2),(173,'3','void _jspService(HttpServletRequest, HttpServletResponse)','void _jspService()','void _jspService(HttpServletRequest, HttpServletResponse) throws IOException, ServletException','All of these','What is the signature of method _jspService of HttpJspPage?',2),(174,'1','void jspDestroy()','void jspDestroy(HttpServletRequest, HttpServletResponse)','void jspDestroy(HttpServletRequest, HttpServletResponse) throws IOException, ServletException','None of these','What is the signature of method jspDestroy of JspPage?',2),(175,'2','void jspInit(HttpServletRequest, HttpServletResponse) throws IOException, ServletException','void jspInit()','void jspInit(HttpServletRequest, HttpServletResponse)','None of these','What is the signature of method jspInit of JspPage?',2),(176,'1','To make controller','To make GUI','Deprecated','None of these','What JSP is basically used today',2),(177,'1','Java Server Pages','Java Server Programming','Java Service Pages','Java Service Programming','What JSP stand for',2),(178,'4','Page','Include','Taglib','Srciptlet','Which are not directive?',2),(179,'3','jspDestroy()','jspInit()','_jspService()','getParameter()','Which methods can\'t be overridden in the JSP page?',2),(180,'4','session','language','isThreadSafe','None of these','Which of following is false by default?',2),(181,'4','session','language','isThreadSafe','name','Which of following is not attributes of Page directive',2),(182,'3','session','language','isThreadSafe','info','Which of following is true by default?',2),(183,'1','include','exclude','import','taglibrary','Which of the following are examples of JSP directive. Select the two correct answers.',2),(184,'4','Application, out','config, exception','page, pageContext','request, response, session','Which of the following are the implicit objects in JSP?',2),(185,'3','1,2,3,4','1,2','3,4','None of these','Which of the following is server side programming languages?<br/><br/>1.HTML<br/>2.JavaScript<br/>3.JSP<br/>4.Sevlets',2),(186,'4','session','request','response','httpsession','Which of the following JSP variables are not available within a JSP expression. Select the one correct answer.',2),(187,'3','include','scopePage','errorPage','debug','Which of these are legal attributes of page directive.',2),(188,'1','The default value of isThreadSafe attribute of page directive is true.','If isThreadSafe attribute of page directive is set to true, then JSP container dispatches request for the page sequentially','Setting isThreadSage attribute to true for JSP pages, can lead to poor performance.','All of these','Which of these are true. Select the two correct answers.',2),(189,'4','The included file must have jspf extension.','The XML syntax of include directive in &lt;jsp:include file=\"fileName\"/&gt;.','The content of file included using include directive, cannot refer to variables local to the original page.','When using the include directive, the JSP container treats the file to be included as if it was part of the original file.','Which of these is true about include directive. Select the one correct answer.',2),(190,'3','HttpServlet.service() thrwos ServletException and IOException','HttpServlet.init() throws ServletException','HttpServlet.destroy() throws ServletException','All of these','Which statements is incorrect?',2),(191,'1','JavaServer Pages Standard Tag Library','JSP Tag Library','Java Standard Tag Library','None of these.','What JSTL stands for?',2),(192,'3','request','response','cookie','session','Following is not a implicit object?',2),(193,'1','javax.servlet.ServletContext','javax.servlet.HttpContext','javax.servlet.Context','javax.servlet.Application','application is object of which class?',2),(194,'2','javax.servlet.ServletContext','javax.servlet.ServletConfig','javax.servlet.Context','javax.servlet.Application','config is object of which class?',2),(195,'1','Using &lt;%jsp:param&gt; tag.','Using &lt;%jsp:page&gt; tag.','Using &lt;%jsp:import&gt; tag.','Using &lt;%jsp:useBean&gt; tag.','How to pass information from JSP to included JSP?',2),(196,'4','contentXML','generateXML','typeXML','contentType','If a jsp is to generate a xml page, what attribute of page directive it should use?',2),(197,'1','javax.servlet.jsp.JspWriter','javax.servlet.jsp.PringWriter','javax.servlet.Writer','javax.servlet.jsp.Writer','out is object  of which class?',2),(198,'3','javax.servlet.ServletContext','javax.servlet.ServletConfig','javax.servlet.jsp.PageContext','javax.servlet.Application','pageContext is object  of which class?',2),(199,'3','Request','HttpRequest','HttpServletRequest','ServletRequest','request is object  of which class?',2),(200,'3','Response','HttpResponse','HttpServletResponse','ServletResponse','response is object  of which class?',2),(201,'2','Session','HttpSession','HttpServletSession','ServletSession','session is object of which class?',2),(202,'1','name, property','type, id','name, type','id, property','Which of the following attributes are mandatory in &lt;jsp:getProperty /&gt; tag?',2),(203,'2','id, type','id, class','type, class','type,property','Which of the following attributes are mandatory in &lt;jsp:useBean /&gt; tag?',2),(204,'1','pageContext','servletContext','httpContext','sessionContext','Which of the following is an implicit object?',2),(205,'1','Expression Language (EL) expressions will not be evaluated and will be treated as static text.','JSP container will ignore the EL expressions similar to comments.','Both A and B','None of these.','What will happen if isELIgnored attribute is set as false?',2),(206,'1','Filters are defined in the deployment descriptor file web.xml.','Filters are defined in the jsp pages.','Both A and B','None of these.','Where filters are defined?',2),(207,'4','jspInit()','_jspService()','jspDestroy()','All of the above','Which is the methods of generated Servlet?',2),(208,'1','Cookies are text files stored on the client computer and they are kept for various information tracking purpose.','Cookies are binary files stored on the server computer and they are kept for various information tracking purpose.','Cookies are binary files stored on the client computer and they are kept for data storage purpose.','None of these.','What are cookies?',2),(209,'4','&lt;%-- comment --%&gt; is JSP comment. &lt;!-- comment --&gt; is an HTML comment.','&lt;%-- comment --%&gt; is ignored by JSP container.','&lt;!-- comment --&gt; is ignored by browser.','All of the above.','What is difference between &lt;%-- comment --%&gt; and &lt;!-- comment --&gt;?',2),(210,'2','Internationalization means creating international content on a website.','Internationalization means enabling a web site to provide different versions of content translated into the visitor\'s language or nationality.','Internationalization refers to creating local content on a website.','None of these.','What is Internationalization?',2),(211,'3','Localization refers to creating local content on a website.','Localization refers to adding locale related information to a website.','Localization means adding resources to a web site to adapt it to a particular geographical or cultural region for example Hindi translation to a web site.','None of these','What is Localization?',2),(212,'3','void jspInit(HTTPRequest request, HTTPResponse response)','void jspInit(HTTPRequest request, HTTPResponse response) throws ServletException, IOException','void jspInit()','void jspInit() throws ServletException, IOException','Correct signature of jspInit() method of HttpJspPage class?',2),(213,'1','Compilation, Initialization, Execution, Cleanup','Initialization, Compilation, Cleanup, Execution','Initialization, Cleanup, Compilation, Execution','Cleanup, Compilation, Initialization, Execution','Correct order of JSP life cycle is?',2),(214,'1','to catch any Throwable that occurs in its body and optionally exposes it.','to catch the runtime error and redirect to error page.','Both A and B','None of these.','Use of &lt;c:catch&gt; tag?',2),(215,'2','It is used to check if jsp tag library is enabled or not.','It evaluates an expression and displays its body content only if the expression evaluates to true.','Both A and B','None of these.','Use of &lt;c:if&gt; tag?',2),(216,'2','It can save values to database.','It evaluates an expression and uses the results to set a value of a JavaBean.','It can be used to iterate list of elements.','None of these.','Use of &lt;c:set &gt; tag?',2),(217,'1','request.getParameter()','response.getParameter()','request.getValue()','response.getValue()','Which of the following method can be used to read a form parameter in JSP?',2),(218,'3','include','page','scriplet','useBean','Which one is not a jsp directive?',2),(219,'3','language','extend','export','import','Which is not a valid attribute of a page directives?',2),(220,'4','The &lt;c:choose&gt; works like a Java switch statement in that it lets you choose between a number of alternatives.','The &lt;c:choose&gt; tag has &lt;c:when&gt; tags.','The &lt;c:choose&gt; tag has &lt;otherwise&gt; as default clause.','All of the above.','Which is true about &lt;c:choose&gt; tag?',2),(221,'3','The &lt;c:forEach &gt; exists as a good alternative to embedding a Java for, while, or do-while loop via a scriptlet.','The &lt;c:forEach &gt; is used to iterate over a list of items in jsp.','Both A and B','None of these.','Which is true about &lt;c:forEach &gt; tag?',2),(222,'3','The &lt;c:param&gt; tag allows proper URL request parameter to be specified with URL.','The &lt;c:param&gt; tag does any necessary URL encoding required','Both A and B','None of these.','Which is true about &lt;c:param&gt; tag?',2),(223,'4','The &lt;c:redirect &gt; tag redirects the browser to an alternate URL by providing automatically URL rewriting.','The &lt;c:redirect &gt; tag supports context-relative URLs.','The &lt;c:redirect &gt; tag supports &lt;c:param&gt; tag.','All of the above.','Which is true about &lt;c:redirect&gt; tag?',2),(224,'3','The &lt;c:url&gt; tag formats a URL into a string and stores it into a variable.','The &lt;c:url&gt; tag automatically performs URL rewriting when necessary.','Both A and B','None of these.','Which is true about &lt;c:url&gt; tag',2),(225,'3','The setProperty action sets the properties of a Bean.','The Bean must have been previously defined before using setProperty action.','Both A and B','None of these.','Which is true about &lt;jsp:setProperty&gt; action?',2),(226,'3','useBean action first searches for an existing object utilizing the id and scope variables. If an object is not found, it then tries to create the specified object.','useBean is used to load java beans in jsp page.','Both A and B','None of these.','Which is true about &lt;jsp:useBean&gt; action?',2),(227,'3','The autoFlush attribute can specify that buffered output should be flushed automatically when the buffer is filled.','The autoFlush attribute can specify that an exception should be raised to indicate buffer overflow.','Both A and B','None of these.','Which is true about autoFlush Attribute?',2),(228,'3','The destruction phase of the JSP life cycle represents when a JSP is being removed from use by a container.','The jspDestroy() method is the JSP equivalent of the destroy method for servlets.','Both A and B','None of these.','Which is true about Cleanup phase in JSP life cycle?',2),(229,'4','Whenever a browser requests a JSP and the page has been loaded and initialized, the JSP engine invokes the _jspService() method in the JSP.','The _jspService() method of a JSP is invoked once per request and is responsible for generating the response for that request.','The _jspService() method of a JSP generates responses to all seven of the HTTP methods ie. GET, POST, DELETE etc.','All of the above','Which is true about Execution phase in JSP life cycle?',2),(230,'3','The import attribute serves the same function as, and behaves like, the Java import statement.','The value for the import option is the name of the package you want to import.','Both A and B','None of these.','Which is true about import Attribute?',2),(231,'3','The include directive is used to include a file during the translation phase.','include directive tells the container to merge the content of other external files with the current JSP during the translation phase.','Both A and B','None of these.','Which is true about include directive?',2),(232,'3','The isScriptingEnabled attribute determines if scripting elements are allowed for use.','The default value (true) enables scriptlets, expressions, and declarations.','Both A and B','None of these.','Which is true about isScriptingEnabled Attribute?',2),(233,'3','Object created with request scope are accessible only from the page in which they are created.','Object created with request scope are accessible only from the pages which are in same session.','Object created with request scope are accessible only from the pages which are processing the same request.','Object created with request scope are accessible only from the pages which reside in same application.','Which is true about request scope?',2),(234,'3','The sendRedirect sends HTTP temporary redirect response to the browser.','Request data gets lost in case of sendRedirect.','Both A and B','None of these.','Which is true about response.sendRedirect(url)?',2),(235,'4','The session attribute indicates whether or not the JSP page uses HTTP sessions.','A value of true means that the JSP page has access to a builtin session object.','A value of false means that the JSP page cannot access the builtin session object.','All of the above.','Which is true about session Attribute?',2),(236,'2','Object created with request scope are accessible only from the page in which they are created.','Object created with request scope are accessible only from the pages which are in same session.','Object created with request scope are accessible only from the pages which are processing the same request.','Object created with request scope are accessible only from the pages which reside in same application.','Which is true about session scope?',2),(237,'1','MySQL','JSP/SQL','JDBC/SQL','Sun ACCESS','______ is an open source DBMS product that runs on UNIX, Linux and Windows.',3),(238,'3','TYPE_SCROLL_SENSITIVE','TYPE_SCROLL_INSENSITIVE','TYPE_FORWARD_ONLY','None of these','A cursor that can only be used to process from the beginning of a ResultSet to the end of it.It is default type.',3),(239,'4','Due to failing to load the appropriate JDBC drivers before calling the DriverManager.getConnection method.','It can be specifying an invalid JDBC URL, one that is not recognized by JDBC driver.','This error can occur if one or more the shared libraries needed by the bridge cannot be loaded.','All of the above.','Following can cause \'No suitable driver\' error?',3),(240,'3','DriverManager','JDBC driver','Connection','Statement','Following consists of methods for contacting a database?',3),(241,'4','ResultSet.TYPE_FORWARD_ONLY','ResultSet.TYPE_SCROLL_INSENSITIVE','ResultSet.TYPE_SCROLL_SENSITIVE','ResultSet.TYPE_BACKWARD_ONLY','Following is not a valid type of ResultSet?',3),(242,'4','Statement','PreparedStatement','CallableStatement','QueryStatement','Following is not a valid type of statement in JDBC?',3),(243,'4','TRANSACTION_NONE','TRANSACTION_READ_COMMITTED','TRANSACTION_READ_UNCOMMITTED','TRANSACTION_WRITE_UNCOMMITTED','Following is not the standard isolation levels defined by JDBC?',3),(244,'3','The ResultSet concurrency determines whether the ResultSet can be updated.','The ResultSet concurrency determines whether the ResultSet can be read only.','Both A and B','None of these.','Following is true about attribute Concurrency in ResultSet?',3),(245,'4','getConnection(String url, String user, String password)','getConnection(String url)','getConnection(String url, Properties prop)','All of the above.','Following method can be used to create a connection object?',3),(246,'4','ResultSet','Statement','Connection','All of the above.','Following required to be closed to close database operations?',3),(247,'4','Open a connection using the DriverManager.getConnection () method.','Execute a query using an object of type Statement.','Extract data from result set using the appropriate ResultSet.getXXX () method.','Clean up the environment by closing all database resources relying on the JVM\'s garbage collection.','Following step closes a connection with a database?',3),(248,'1','Type 1','Type 2','Type 3','Type 4','Following type of JDBC driver is typically used for development and testing purposes only?',3),(249,'2','JDBC-ODBC Bridge plus ODBC driver','Native-API, partly Java driver','JDBC-Net, pure Java driver','Native-protocol, pure Java driver','Following type of JDBC driver, calls database vendor native library on a client side. This code then talks to database over network?',3),(250,'3','JDBC-ODBC Bridge plus ODBC driver','Native-API, partly Java driver','JDBC-Net, pure Java driver','Native-protocol, pure Java driver','Following type of JDBC driver, is also called Type 3 JDBC driver?',3),(251,'3','JDBC-ODBC Bridge plus ODBC driver','Native-API, partly Java driver','JDBC-Net, pure Java driver','Native-protocol, pure Java driver','Following type of JDBC driver, talks with the server-side middleware that then talks to database?',3),(252,'4','JDBC-ODBC Bridge plus ODBC driver','Native-API, partly Java driver','JDBC-Net, pure Java driver','Native-protocol, pure Java driver','Following type of JDBC driver, uses database native protocol?',3),(253,'1','Connection','DriverManager','ResultSet','Driver','From which object do you ask for DatabaseMetaData?',3),(254,'3','The JDBC driver converts the Java data type to the appropriate JDBC type before sending it to the database.','It uses a default mapping for most data types.','Both A and B','None of these.','How does JDBC handle the data types of Java and database?',3),(255,'4','1','2','3','4','How many JDBC driver types does Sun define?',3),(256,'3','execute()','executeQuery()','executeUpdate()','update()','If one intends to work with a ResultSet, which of these PreparedStatement methods will not work?',3),(257,'3','Statement','PreparedStatement','CallableStatement','All the above','If you need to use a stored procedure with output parameters, which of the following statement type should be used to call the procedure?',3),(258,'1','Scrollable','Updatable','Holdable','None of these','It reefers to the ability to move backward as well as forward through a result set.',3),(259,'1','Java Database Connectivity','Java Driver for Basic Connection','Joint Database Connectivity','Joint Driver for Basic Connection','JDBC stands for?',3),(260,'2','JDBC provides implementation of ResultSet & other interfaces, through the Driver.','Every vendor of Database provides implementation of ResultSet & other interfaces, through the Driver.','Both A and B','None of these.','Resultset is an interface, how does it support rs.Next()?',3),(261,'1','Message Digest','Signature','KeyPair Generator','Certificate Factory','The class is use to hash value of the specified data.',3),(262,'3','Signature','Message Digest','KeyPair Generator','KeyFactory','The class is use to produce a pair of public and private keys appropriate for a specified.',3),(263,'1','Certificate Factory','KeyPair Generator','Message Digest','Signature','The class is used to generate public key certificates.',3),(264,'3','1','2','4','3','The \'Native Protocol - All Java\' is Driver Type',3),(265,'1','PrepareStatment Object','Callalbalestatment Object','PrepareCall () method','None of these','The prepareStatment() method sends SQL query to the database. and this returns:',3),(266,'1','Translates JDBC calls into ODBC calls.','Translates JDBC calls into database specific calls or native calls','Maps JDBC calls to the underlying \"network\" protocol, which in turn calls native methods on the server','Directly calls RDBMS from client machine.','The Type 1 driver is also known as JDBC-ODBC bridge plus ODBC driver.',3),(267,'2','Algorithm Parameters','KeyStore','Key','KeySpec','This class is a database of keys and certificates',3),(268,'3','Secret key cryptography','Public Key cryptography','Hash Function','Private Key cryptography','This is algorithms that does not use any key, it is known as message digest.',3),(269,'1','Public Key cryptography','Hash Function','Secret key cryptography','None of these','This is as asymmetric cryptography, It operates under two different keys.',3),(270,'2','executeUpdate()','executeQuery()','execute()','All the above','This method is use to execute any SQL statement with a \"SELECT\" clause, that return the result of the query as a result set.',3),(271,'3','getVarchar()','getObject()','getString()','getChar()','This method is used for retrieving a string value (SQL type VARCHAR) and assigning into java String object.',3),(272,'2','getRow();','getObject();','getString();','None of these','This method is used for retrieving the value from current row as object.',3),(273,'1','executeUpdate()','execute()','executeQuery()','None of these','This method is used to execute INSERT, DELETE, UPDATE , and other SQL DDL such as CREATE, DROP Table.',3),(274,'2','PreparedStatment','CallableStatment','prepareCall()','All the above','This object does not contain the stored procedure itself but contains only a call to the stored procedure.',3),(275,'3','OUT','IN','IN/OUT','All the above','This Parameter behaves like an initialized variable',3),(276,'1','IN','OUT','IN/OUT','All the above','This parameter is used to pass values into a store procedure.The value pf this parameter cannot changed or reassigned within the module and hence is constant.',3),(277,'2','Updatable','Holdable','Scrollable','None of these','This refers to the ability to check whether the cursor stays open after a COMMIT.',3),(278,'2','Hash Function','Secret key cryptography','Public Key cryptography','None of these','This transforms the input, called the plaintext, to an output, known as ciphertext. this is known as Symmetric cryptography.',3),(279,'1','These are used to store large amount of data into database like images, movie etc which are extremely large in size.','These are used to store XML data.','Both A and B','None of these.','Use of blob, clob datatypes in JDBC?',3),(280,'4','Loads the class MyClass.','Execute any static block code of MyClass.','Returns an instance of MyClass.','All of the above.','What does the Class.forName(\"MyClass\") do?',3),(281,'2','JDBC is a java based protocol.','JDBC is a standard Java API for database-independent connectivity between the Java programming language and a wide range of databases.','JDBC is a specification to tell how to connect to a database.','Joint Driver for Basic Connection','What is JDBC?',3),(282,'4','To increase performance.','To maintain the integrity of business processes.','To use distributed transactions','All of the above.','What is the purpose of setting auto commit mode false',3),(283,'3','UNIQUE','SEQUENCE','AUTO_INCREMENT','None of these -- Surrogate keys are not implemented in MySQL.','What MySQL property is used to create a surrogate key in MySQL?',3),(284,'3','In the MySQL database metadata','In the MySQL database metasql','In the MySQL database mysql','None of these is correct.','Where is metadata stored in MySQL?',3),(285,'4','%','#','*','?','Which character is used to represent an input parameter in a CallableStatement?',3),(286,'1','A CachedRowSet class.','A JDBCRowSet class','A WebRowSet class','None of these','Which class is a disconnected rowset.',3),(287,'1','Connection','ResultSet','Statement','PreparedStatement','Which class or interface contains the transaction control methods setAutoCommit, commit, and rollback?',3),(288,'1','ResultSet','JDBC driver','Connection','Statement','Which holds data retrieved from a database after you execute an SQL query using Statement objects?',3),(289,'2','Batch Processing allows you to group related SQL statements into a batch','Batch Processing allows you to submit batch of SQL statements with one call to the database.','Both A and B','None of these.','Which is correct about batch process?',3),(290,'3','Used when you want to access the database stored procedures.','The CallableStatement interface can accept runtime input parameters.','Both A and B','None of these.','Which is correct about CallableStatement?',3),(291,'3','A connected RowSet Object is permanent in nature.','A connected RowSet doesn\'t terminate until the application is terminated.','Both A and B','None of these.','Which is correct about Connected RowSet?',3),(292,'3','Connection interface consists of methods for contacting a database.','It represents communication context.','Both A and B','None of these.','Which is correct about Connection interface of JDBC?',3),(293,'3','Database vendor\'s help multiple clients to share a cached set of connection objects that provides access to a database.','Clients need not create a new connection everytime to interact with the database.','Both A and B','None of these.','Which is correct about connection pooling?',3),(294,'4','A disconnected RowSet object is ad-hoc in nature.','Whenever it requires retrieving data from the database, it establishes the connection and closes it upon finishing the required task.','The data that is modified during disconnected state is updated after the connection is re-established.','All of the above.','Which is correct about Disconnected RowSet?',3),(295,'3','JDBC DriverManager is a class that manages a list of database drivers.','It matches connection requests from the java application with the proper database driver using communication subprotocol.','Both A and B','None of these.','Which is correct about DriverManager class of JDBC?',3),(296,'3','This method is used to register the database driver.','This static method is used in case you are using a non-JDK compliant JVM, such as the one provided by Microsoft.','Both A and B','None of these.','Which is correct about DriverManager.registerDriver() method call?',3),(297,'3','Auto loading of JDBC driver class. In the earlier versions we had to manually register and load drivers using class.forName.','Connection management enhancements. New methods added to javax.sql.PooledConnection.','Both A and B','None of these.','Which is correct about JDBC 4.0?',3),(298,'3','DataSet Implementation of SQL using annotations.','SQL XML support.','Both A and B','None of these.','Which is correct about JDBC 4.0?',3),(299,'3','The JDBC API provides the abstraction and the JDBC drivers provide the implementation.','New drivers can be plugged-in to the JDBC API without changing the client code.','Both A and B','None of these.','Which is correct about JDBC?',3),(300,'4','Prepared statements offer better performance, as they are pre-compiled.','Prepared statements reuse the same execution plan for different arguments rather than creating a new execution plan every time.','Prepared statements use bind arguments, which are sent to the database engine.','All of the above.','Which is correct about PreparedStatement?',3),(301,'4','ResultSet holds data retrieved from a database after you execute an SQL query using Statement objects.','It acts as an iterator to allow you to move through its data.','The java.sql.ResultSet interface represents the result set of a database query.','All of the above.','Which is correct about ResultSet class of JDBC?',3),(302,'3','A savepoint marks a point that the current transaction can roll back to.','Instead of rolling all of the changes back, a savepoint can be choosen to roll back only some of them.','Both A and B','None of these.','Which is correct about savepoint?',3),(303,'3','setFetchSize(int) defines the number of rows that will be read from the database when the ResultSet needs more rows.','setFetchSize(int) affects how the database returns the ResultSet data.','Both A and B','None of these.','Which is correct about setFetchSize(int)?',3),(304,'3','setMaxRows(int) method of the ResultSet specifies how many rows a ResultSet can contain at a time.','setMaxRows(int) affects the client side JDBC object.','Both A and B','None of these.','Which is correct about setMaxRows(int)?',3),(305,'3','SQLWarning objects are a subclass of SQLException that deal with database access warnings.','Warnings do not stop the execution of an application, as exceptions do.','Both A and B','None of these.','Which is correct about SQL Warning?',3),(306,'3','A warning can be reported on a Connection object, a Statement object (including PreparedStatement and CallableStatement objects), or a ResultSet object.','Connection, Statement and ResultSet has a getWarnings method.','Both A and B','None of these.','Which is correct about SQL Warning?',3),(307,'3','Statement encapsulates an SQL statement which is passed to the database to be parsed and compiled.','Statement encapsulates an SQL statement which is passed to the database to be planned and executed.','Both A and B','None of these.','Which is correct about Statement class of JDBC?',3),(308,'4','Used for general-purpose access to your database.','Useful when you are using static SQL statements at runtime.','The Statement interface cannot accept parameters.','All of the above.','Which is correct about Statement?',3),(309,'3','A stored procedure is a group of SQL statements that form a logical unit and perform a particular task.','Stored procedures can be called using CallableStatement class in JDBC API.','Both A and B','None of these.','Which is correct about stored procedures?',3),(310,'4','Statement','ResultSet','SQLException','ConnectionPool','Which is not a component/class of JDBC API?',3),(311,'4','DriverManager','Driver','Connection','Transaction','Which is not a component/class of JDBC API?',3),(312,'3','In typical database transactions, say one transaction reads and changes the value while the second transaction reads the value before committing or rolling back by the first transaction. This reading process is called as \'dirty read\'.','There is always a chance that the first transaction might rollback the change which causes the second transaction reads an invalid value.','Both A and B','None of these.','Which is true about \'dirty read\'?',3),(313,'3','JDBC API layer provides the application-to-JDBC Manager connection.','JDBC Driver API layer supports the JDBC Manager-to-Driver Connection.','Both A and B','None of these.','Which is true about JDBC architecture?',3),(314,'4','The JDBC API is an API to access different relational databases.','You use it to access relational databases without embedding a dependency on a specific database type in your code.','JDBC stands for Java DataBase Connectivity.','All of the above.','Which is true about JDBC?',3),(315,'4','The JNDI is an API to access different naming and directory services.','You use it to access something stored in a directory or naming service without haveing to code specifically to that naming or directory service.','JNDI stands for Java Naming and Directory Interface.','All of the above.','Which is true about JNDI?',3),(316,'3','boolean execute()','ResultSet executeQuery()','int executeUpdate()','None of these.','Which is used generally used for altering the databases?',3),(317,'3','Both Type 1 and Type 2','Both Type 1 and Type 3','Both Type 3 and Type 4','Type 4 only','Which JDBC driver Type(s) can be used in either applet or servlet code?',3),(318,'4','Type 1 only','Type 2 only','Both Type 3 and Type 4','All of Type 1, Type 2, Type 3 and Type 4','Which JDBC driver Type(s) can you use in a three-tier architecture and if the Web server and the DBMS are running on the same machine?',3),(319,'1','Type 1','Type 2','Type 3','Type 4','Which JDBC driver Type(s) is(are) the JDBC-ODBC bridge?',3),(320,'3','Type 3 only','Type 4 only','Both Type 3 and Type 4','Neither Type 3 nor Type 4','Which JDBC driver Types are for use over communications networks?',3),(321,'1','DriverManager','JDBC driver','Connection','Statement','Which manages a list of database drivers in JDBC?',3),(322,'1','boolean execute()','ResultSet executeQuery()','int executeUpdate()','None of these.','Which of the following executes the any kind of SQL statement?',3),(323,'1','rs.getString(0)','rs.getString(\"name\")','rs.getString(1)','All the above','Which one of the following will not get the data from the first column of ResultSet rs, returned from executing the following SQL statement: SELECT name, rank FROM employee.?',3),(324,'2','A RowSet has to be make scrollable and updatable at the time of creation.','Scrollability and Updatability of a RowSet is independent of the JDBC driver.','A connect RowSet can read data from a non relational database source also.','A RowSet is a JavaBeans component which has to programmatically notify all registered event listener.','Which statments is true?',3),(325,'2','Defining a set of Action Class','Defining a set of ActionMappings','Defining a set of ActionForm','None','A servlet of class ActionServlet is configured by',4),(326,'4','View','Model','Deployment','Controller','ActionServlet, RequestProcessor and Action classes are the components of',4),(327,'3','ActionServlet','ActionListener','RequestProcessor','All of the above','An instance of Action is invoked by',4),(328,'3','Action class','RequestProcessor','ActionServlet','All of the above','Application module selection is done by',4),(329,'4','Hides remote services complexity','Reduces coupling and increases manageability','Eases failure recovery','All of the above','Business delegate pattern',4),(330,'1','No','Yes','always present','None of these','Can there be multiple &lt;tiles-definitions&gt; tag in tiles-defs.xml?',4),(331,'1','Subclass of ActionServlet class','Subclass of Action classes','Subclass of ActionForm classes','None','Choose one of the following which must be have only single class for an application',4),(332,'1','Only property getter and property setter methods','Business logic','Specific methods to be implemented','All of the above','Choose true for ActionForm bean have',4),(333,'1','parameter=\"application_resource\"','file=\"application_resource\"','include=\"application_resource\"','None of these','Correct &lt;message-resources&gt; attribute format?',4),(334,'2','setter,reset','Initialization,setter,reset','setter,reset,Initialization','reset,Initialization,setter','Correct sequence of ActionForm execution?',4),(335,'1','public ActionErrors validate(ActionMapping mapping,HttpServletRequest request)','public ActionError validate(ActionMapping mapping, HttpServletRequest request)','public ActionError validate(HttpServletRequest request, HttpServletResponse response)','None of these','Correct validate() method?',4),(336,'3','ActionError','ActionMapping','ActionForward','ActionForm','execute() method of org.apache.struts.action.Action class returns?',4),(337,'1','org.springframework.web.context.ContextLoaderListener','org.apache.struts2.dispatcher.FilterDispatcher','Both A and B','None of these','Following class acts as Listener class in struts and spring integration?',4),(338,'4','application - application scoped variables.','session - session scoped variables.','oot / value stack - action variables.','All of the above.','Following components are available using ActionContext map?',4),(339,'1','Using bean:message tag','Using bean:include tag','Using bean:header tag','Using bean:error tag','How can we retrieve keyed values from a previously defined resource bundle?',4),(340,'1','1','2','3','4','How many Action class for a subclass of ActionForm',4),(341,'4','1','2','3','As Many as we wise','How many Action class for an application',4),(342,'1','1','2','3','4','How many ActionServlet class for an application',4),(343,'3','4','3','1','Uncountable instances','How many instances can be created per application module by the RequestProcessor class?',4),(344,'4','1','2','3','More than one','How many of struts-config.xml file for an application',4),(345,'2','1','2','3','4','How many of xml files must have use in validate framework',4),(346,'1','1','2','3','4','How many web.xml you can use file for an application',4),(347,'4','When the user presses the submit button, Struts 2 will automatically execute the validate method.','if any of the if statements listed inside the validate method are true, Struts 2 will call its addFieldError method.','If any errors have been added then Struts 2 will not proceed to call the execute method.','All of the above.','How Struts 2 validation works?',4),(348,'4','bean:error tag','html:error tag','error:error tag','html:errors tag','How to display errors in jsp page?',4),(349,'2','validate=\"yes\"','validate=\"true\"','validate=\"false\"','validate=\"1\"','How to triger validate() method of ActionForm?',4),(350,'3','Validate() method of ActionForm called automatically','Validate() method of Action called automatically','Validate() method of ActionForm Not Called automatically','None of these','If validate=\"false\" in struts-config.xml action tag?',4),(351,'3','Validate() method of ActionForm, if error return to error.jsp','Validate() method of ActionForm, execute() of Action, if error return to jsp mentioned in input tag.','Validate() method of ActionForm, if error return to jsp mentioned in input tag.','None of these','If validate=\"true\" in struts-config.xml action tag then what is the sequence of execution?',4),(352,'2','Validate() method of ActionForm Not Called automatically','Validate() method of ActionForm called automatically','Validate() method of Action called automatically','None of these','If validate=\"true\" in struts-config.xml action tag?',4),(353,'3','HttpServletRequest request, HttpServletResponse response','HttpServletRequest request,ActionMapping mapping','ActionMapping mapping,HttpServletRequest request','ActionMapping mapping,HttpServletResponse response','In validate method of ActionForm , Parameters are?',4),(354,'2','Web.xml','Struts-config.xml','Properties file','None of these','In which file you have to add TilesPlugin to use tiles in struts?',4),(355,'1','true','false','both 1 and 2','None of these','Is ActionForm serializable?',4),(356,'1','Object class','ActionServlet','HttpServlet','None of these','Org.apache.struts.action.Action class extends ?',4),(357,'3','ActionErrors','ActionError','void','ActionMapping','reset() method of ActionForm returns?',4),(358,'1','public void reset(ActionMapping mapping, HttpServletRequest request)','public ActionErrors reset(ActionMapping mapping, HttpServletRequest request)','public ActionError reset(ActionMapping mapping, HttpServletRequest request)','None of these','reset() method signature in ActionForm?',4),(359,'1','should always decouple the application from a specific model implementation','provides model components','does not support JavaBeans and EJB','has built-in support for the model','Struts framework',4),(360,'1','MVC','View Model','SmallTalk','Core page','Struts framework follows?',4),(361,'3','Servlet, JSP and Java','Servlet, HTML and Java','Servlet, JSP, XML and Java','Applet, XML and Java','Struts framework is based on',4),(362,'2','ActionServlet','RequestProcessor','Action','HttpRequest','The class instantiates ActionForm and puts it in appropriate scope based on scope tag?',4),(363,'1','RequestProcessor','ActionServlet','Action','Request','The class populates form data and set to ActionForm?',4),(364,'3','RequestProcessor','Action','ActionServlet','None of these','The class reads and loads the struts-config.xml file and put into in memory?',4),(365,'2','struts-configs.xml','struts-config.xml','struts-action-config.xml','struts-processor-conifg.xml','The dispatch from the controller to the Action class is based on a configuration that is provided by a',4),(366,'4','ActionMapping mapping, ActionForm form, ServletRequest request, ServletResponse response.','Mapping mapping, ActionForm form, ServletRequest request, ServletResponse response.','ActionMapping mapping, ActionForm form, ServletRequest request, Response response.','None','The parameters passed into execute() method in struts2 is?',4),(367,'1','tag add to web.xml','tag add to properties file.','tag add to Struts-config.xml','None of these','To Enable Message Resource in struts application?',4),(368,'2','org.apache.struts.validator.DynaValidationForm','org.apache.struts.validator.DynaValidatorForm','org.apache.struts.validator.DynaValidateForm','org.apache.struts.validator.DynaValidateForm','To specify a form-bean of dynamic validation form, which of the following is used in <form-bean> tag',4),(369,'4','expression validator','int validator','regex validator','All of the above.','Types of validators are available in xml based validation in struts2?',4),(370,'4','Only One','Only Two','Zero','As many we needed','We can create how many struts config file in an struts application?',4),(371,'3','This annotation is a collection of results.','This annotation have the name that correspond to the outcome of the execute method.','This annotation is used to decorate the execute() method.','This annotation marks a action method that needs to be called after the main action method.','What are the purpose of @Action annotation?',4),(372,'4','This annotation is a collection of results.','This annotation have the name that correspond to the outcome of the execute method.','This annotation is used to decorate the execute() method.','This annotation marks a action method that needs to be called after the main action method.','What are the purpose of @After annotation?',4),(373,'1','his annotation marks a action method that needs to be called before the main action method and the result was executed.','This annotation marks a action method that needs to be executed before the result.','This annotation checks if there are any conversion errors for a field and applies them if they exist.','This annotation checks that a date field has a value within a specified range.','What are the purpose of @Before annotation?',4),(374,'3','This annotation marks a action method that needs to be called before the main action method and the result was executed.','This annotation marks a action method that needs to be executed before the result.','This annotation checks if there are any conversion errors for a field and applies them if they exist.','This annotation checks that a date field has a value within a specified range.','What are the purpose of @ConversionErrorFieldValidator annotation?',4),(375,'4','This annotation marks a action method that needs to be called before the main action method and the result was executed.','This annotation marks a action method that needs to be executed before the result.','This annotation checks if there are any conversion errors for a field and applies them if they exist.','This annotation checks that a date field has a value within a specified range.','What are the purpose of @DateRangeFieldValidator annotation?',4),(376,'1','This annotation checks that a double field has a value within a specified range.','This annotation checks that a field is a valid e-mail address if it contains a non-empty String.','This annotation validates a supplied regular expression.','This annotation checks that a numeric field has a value within a specified range.','What are the purpose of @DoubleRangeFieldValidator annotation?',4),(377,'3','This annotation checks that a double field has a value within a specified range.','This annotation checks that a field is a valid e-mail address if it contains a non-empty String.','This annotation validates a supplied regular expression.','This annotation checks that a numeric field has a value within a specified range.','What are the purpose of @ExpressionValidator annotation?',4),(378,'3','This annotation sets the CreateIfNull for type conversion.','This annotation sets the Element for type conversion.','This annotation sets the Key for type conversion.','This annotation is a marker annotation for type conversions at Type level.','What are the purpose of @Key Annotation?',4),(379,'2','This annotation validates a string field using a regular expression.','This annotation checks that a field is non-null.','This annotation validates a supplied regular expression.','This annotation checks that a numeric field has a value within a specified range.','What are the purpose of @RequiredFieldValidator annotation?',4),(380,'3','This annotation validates a string field using a regular expression.','This annotation checks that a field is non-null.','This annotation checks that a String field is not empty','This annotation checks that a numeric field has a value within a specified range.','What are the purpose of @RequiredStringValidator annotation?',4),(381,'2','This annotation is a collection of results.','This annotation have the name that correspond to the outcome of the execute method.','This annotation is used to decorate the execute() method.','This annotation marks a action method that needs to be called after the main action method.','What are the purpose of @Result annotation?',4),(382,'1','This annotation is a collection of results.','This annotation have the name that correspond to the outcome of the execute method.','This annotation is used to decorate the execute() method.','This annotation marks a action method that needs to be called after the main action method.','What are the purpose of @Results annotation?',4),(383,'4','This annotation validates a string field using a regular expression.','This annotation checks that a field is non-null.','This annotation checks that a String field is not empty','This annotation checks that a String field is of the right length.','What are the purpose of @StringLengthFieldValidator annotation?',4),(384,'2','This annotation checks that a field is a valid URL.','This annotation is used to nest several annotations of same type.','This annotation checks that a String field is not empty','This annotation checks that a String field is of the right length.','What are the purpose of @Validations annotation?',4),(385,'1','Session , request','Page, request,session','Page, request,session,application','request,session,application','What are the scopes available in struts?',4),(386,'4','struts.multipart.maxSize','struts.multipart.parser','struts.multipart.saveDir','All of the above.','What are the Struts2 configuration properties that control file uploading process?',4),(387,'4','struts.messages.error.uploading','struts.messages.error.file.too.large','struts.messages.error.content.type.not.allowed','All of the above.','What are the Struts2 error message keys that can come during file uploading process?',4),(388,'1','ActionErrors','ActionForward','ActionMapping','ActionError','What does validate() method of ActionForm returns?',4),(389,'2','void','String','int','ActionForward','What is return type of execute() method in struts2?',4),(390,'2','A Technology','A Framework','A Java Development Tool Kit','A Language','What is struts?',4),(391,'4','Two','Three','Unlimited','One','What is the limitation of creating ActionServlet instances per web application?',4),(392,'1','In Action class','In ActionForm Class','In ActionMapping Class','In ActionServlet Class','Where key will generated?',4),(393,'2','Action Class','A servlet of class ActionServlet','A class of ActionForm','A class of ActionMapping','Which are primary components of controller?',4),(394,'1','ActionMapping','RequestProcessor','ActionServlet','Action','Which class instance contains all the mapping information?',4),(395,'1','StrutsTypeConverter','StringTypeConverter','Both A and B','None of these','Which class of struts is responsible to convert String to data types?',4),(396,'2','validation.xml','validator-rules.xml','both files','None','Which file contains java script for client side validation using validation framework in struts?',4),(397,'1','FileUpload','File','Upload','None of these','Which interceptor is responsible for file upload support?',4),(398,'1','It is used to forward to a servlet, JSP, HTML page, and so on, on the server. It uses the RequestDispatcher.forward() method.','It is used to generate output using predefined templates.','It calls the standard response.sendRedirect() method, causing the browser to create a new request to the given location.','None of these','Which is the correct about dispatcher result type?',4),(399,'2','The lowest level of the pattern which is responsible for maintaining data.','This is responsible for displaying all or a portion of the data to the user.','Software Code that controls the interactions between the Model and View.','None of these','Which is the correct definition of view in MVC architecture?',4),(400,'2','It is used to forward to a servlet, JSP, HTML page, and so on, on the server. It uses the RequestDispatcher.forward() method.','It is used to generate output using predefined templates.','It calls the standard response.sendRedirect() method, causing the browser to create a new request to the given location.','None of these','Which is the following is correct about FreeMaker result type?',4),(401,'2','There are various temporary objects which are created during execution of a page.','The current model object is placed before the action on the value stack.','These objects include #application, #session, #request, #attr and #parameters and refer to the corresponding servlet scopes.','None of these','Which is the following is correct about the Model Objects?',4),(402,'3','There are various temporary objects which are created during execution of a page.','The current model object is placed before the action on the value stack.','These objects include #application, #session, #request, #attr and #parameters and refer to the corresponding servlet scopes.','None of these','Which is the following is correct about the Named Objects?',4),(403,'3','We define action tags corresponds to every URL we want to access.','we define a class with execute() method which will be accessed whenever we will access corresponding URL.','Both A and B','None of these','Which is true about action tag in struts.xml?',4),(404,'4','Struts makes the exception handling easy by the use of the \"exception\" interceptor.','The \"exception\" interceptor is included as part of the default stack, so you don\'t have to do anything extra to configure it.','It is available out-of-the-box ready for you to use.','All of the above.','Which is true about exception handling in Structs?',4),(405,'3','Interceptors are conceptually the same as servlet filters or the JDKs Proxy class.','Interceptors allow for crosscutting functionality to be implemented separately from the action as well as the framework.','Both A and B','None of these','Which is true about Interceptors?',4),(406,'4','In action-mappings section, you declare form handlers and they are also known as action mappings.','In controller section, you can configure Struts internals.','In plug-in section you can tell Struts where to find your properties files, which contain prompts and error messages.','All of the above.','Which is true about struts-config.xml?',4),(407,'3','We need to tell tiles, where to find tiles configuration file tiles.xml.','We need to initialize the Tiles listener that comes with Struts2 download.','Both A and B','None of these','Which is true in Struts and Apache tiles integration?',4),(408,'3','The ContextLoaderListener is required to load the spring context file.','Spring\'s configuration file is called applicationContext.xml file and it must be placed at the same level as the web.xml file.','Both A and B','None of these','Which is true in struts and spring integration?',4),(409,'4','User sends a request to the server for requesting for some resource (i.e pages).','The FilterDispatcher looks at the request and then determines the appropriate Action.','Configured interceptors functionalities applies such as validation, file upload etc.','All of the above.','Which is true in the life cycle of a request in Struct2 application?',4),(410,'4','valuator()','findForward()','delete()','execute()','Which method is necessary for Action class?',4),(411,'3','HttpRequest','ActionServlet','Action class','RequestProcessor','Which of the following acts as a bridge between user-invoked URI and a business method?',4),(412,'3','RequestAction,SwitchAction,LookupRequestAction,ConfigAction,ContextAction','LookupDispatchAction,SwitchAction,RequestAction,ResponseAction','ForwardAction,DispatchAction,IncludeAction,LookupDispatchAction,SwitchAction','ForwardAction,SwitchAction,ResponseAction, ContextAction, ConfigAction','Which of the following are the struts pre-built Action classes',4),(413,'1','ActionServlet','Action class','Deployment descriptor','None of these','Which of the following delegates the request handling to the RequestProcessor instance?',4),(414,'4','Easy integration with Spring, Tiles and SiteMesh frameworks.','Support for generating views using templates.','Plugin Support','All of the above.','Which of the following feature is present in Struts 2?',4),(415,'1','1,2,4,5','2,3,4,5','3, 4, 5','1 and 4','Which of the following is performed by ActionServlet and RequestProcessor?<br/><br/>1.Receiving the HttpServletRequest<br/>2.Populating JavaBean from the request parameters<br/>3.Displaying response on the web page Issues<br/>4.Content type issues handlin',4),(416,'1','execute()','service()','run()','destroy()','Which of the following method is overridden by action class',4),(417,'4','HttpResponse object','ActionServlet','Action class','Request Processor','Which of the following should always forwards or redirect to a resource(view ) after completed',4),(418,'4','jsp-lib','struts-taglib','jsp-taglib','taglib','Which of the following tags in struts-config.xml file defines the availability of necessary Struts JSP custom tag libraries?',4),(419,'4','bean:define','bean:message','bean:show','bean:write','Which of the java bean tags is used to show the bean value on the web page?',4),(420,'3','logic:lessThan','logic:redirect','logic:iterate','logic:loop','Which of the logic tags is used for repetitive output generation',4),(421,'1','public ActionForward execute(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)','public ActionMapping execute(ActionForward forward, ActionForm form,HttpServletRequest request, HttpServletResponse response)','public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletResponse response ,HttpServletRequest request)','None of these','Which one is correct?',4),(422,'2','date tag','date tag','property tag','push tag','Which tag can be used to parameterize other tags?',4),(423,'1','generator tag','iterator tags','merge tag','append tag','Which tag generates an iterator based on the val attribute supplied?',4),(424,'4','generator tag','action tag','include tag','bean tag','Which tag instantiates a class that conforms to the JavaBeans specification?',4),(425,'3','generator tag','include tag','include tag','bean tag','Which tag is to be used to include a JSP file in another JSP page?',4),(426,'3','set tag','text tag','url tag','push tag','Which tag is used to create a URL?',4),(427,'3','date tag','param tag','property tag','push tag','Which tag is used to get the property of a value, which will default to the top of the stack if none is specified?',4),(428,'4','date tag','param tag','property tag','push tag','Which tag is used to push value on stack for simplified usage?',4),(429,'2','set tag','text tag','url tag','push tag','Which tag is used to render a I18n text message?',4),(430,'4','if and else tags.','iterator tags','merge tag','append tag','Which tag takes two or more lists as parameters and append them all together?',4),(431,'3','if and else tags.','iterator tags','merge tag','append tag','Which tag takes two or more lists as parameters and merge them all together?',4),(432,'1','date tag','param tag','property tag','push tag','Which tag will allow you to format a Date in a quick and easy way?',4),(433,'2','if and else tags.','iterator tags','merge tag','append tag','Which tag will iterate over a value?',4),(434,'2','simple theme','xhtml theme','xhtml theme','complex theme.','Which theme is the default theme used by Struts 2?',4),(435,'4','For DB2 org.hibernate.dialect.DB2Dialect','For MySQL org.hibernate.dialect.MySQLDialect','For Oracle 9i/10g org.hibernate.dialect.Oracle9Dialect','All of the above','Choose correct hibernate SQL Dialects (hibernate.dialect) combinations',5),(436,'4','transient','persistent','detached','All of Above','Choose correct Instance states of persistent classes?',5),(437,'4','Hibernate is an object-relational mapping (ORM) library for the Java language','Hibernate provides a mapping for object-oriented domain model to a traditional relational database.','Hibernate is a framework.','All of the above','Choose true',5),(438,'4','get() returns null if no data is present where as load throws ObjectNotFoundException exception in such case.','get() always hits the database whereas load() method doesn\'t hit the database.','get() returns actual object whereas load() returns proxy object.','All of the above.','Difference between get() and load() methods of session object?',5),(439,'3','There is no difference.','save saves the object and returns status whereas persist stores status in different variable.','save saves the object and returns the id of the instance whereas persist do not return anything after saving the instance.','None of these.','Difference between save() and persist() methods of session object?',5),(440,'1','By using the mutable=\"false\" attribute in the class mapping.','By using the ismutable=\"false\" attribute in the class mapping.','By using the ismutable=\"no\" attribute in the class mapping.','None of these','How can a whole class be mapped as immutable?',5),(441,'2','SessionFactory.getSession();','SessionFactory.openSession();','SessionFactory.get();','(session)SessionFactory.getObject();','How can get a session object?',5),(442,'1','By using the insert=\"false\" and update=\"false\" attributes.','By using the isinsert=\"false\" and isupdate=\"false\" attributes.','By using the isinsert=\"no\" and isupdate=\"no\" attributes.','None of these','How can you make a property be read from the database but not modified in anyway',5),(443,'2','session.getConnection();','session.connection();','session.createConnection();','None of these','How to get Connection object from session?',5),(444,'1','hibernate.cache.use_query_cache true/false','hibernate.cache.use_query_cache 0/1','hibernate.cache.use _cache true/false','hibernate.cache.use_ _cache 0/1','How you can enable the query cache? <br/>By setting Property name:-',5),(445,'1','Hibernate Query Language','High Query Language','Hybrid Query Language','None of these.','HQL stands for?',5),(446,'2','hit the database and get the result.','does not actually hit the database until you invoke a method of the proxy','hit the database until you invoke a method of the proxy','None of these.','If the class is mapped with a proxy then what does session.load() do?',5),(447,'2','Session.load();','Session.get();','Session.fetch();','None of these','If you are not certain that a matching row exists in the database then which method is the best?',5),(448,'1','Correct','Wrong','Configuration Exception','None of these','Is this correct Configuration?<br/>&lt;class name=\"com.abc.Example\" table=\"table\"&gt;',5),(449,'3','lazy=yes','lazy=fasle','lazy=true','lazy=no','Load child object automatically when parent object is loaded?',5),(450,'1','2nd','1st','3rd','4th','SessionFactory represent which level of cache?',5),(451,'1','hibernate.cfg.xml','hibernate.config.xml','hibernate.cg.xml','None of these','The Hibernate XML configuration file name is?',5),(452,'1','generate primary key','generate tables based on configuration','generate sql statement on configuration','None of these','What does \" &lt;generator class=\"native\"/&gt;\" means?',5),(453,'1','create tables automatically','create session object automatically','create Session Factory object automatically','None of these.','What does hibernate.hbm2ddl.auto create this means?',5),(454,'1','show sql statement on console.','show sql inputs on console.','show sql output on console.','None of these.','What does hibernate.show_sql true mean?',5),(455,'3','NULL','Empty Object','Unrecoverable exception','None of these','What does session.load() return if there is no matching database row?',5),(456,'2','The settings of the properties file will override the settings used in the XML configuration','The settings of the XML configuration file will override the settings used in the properties','The settings of the XML configuration file will override the settings used in the properties','None of these','What happens when both hibernate.properties and hibernate.cfg.xml are in the classpath?',5),(457,'1','object state changes in order to synchronize the updated state with the database','remove the dirty data from data base.','check the data when insert into data base.','None of these','What is dirty checking in Hibernate?',5),(458,'1','Lazy loading is a technique in which objects are loaded on demand basis.','Lazy loading is a technique in which objects are persisted on demand basis.','Both A and B.','None of these.','What is lazy loading?',5),(459,'1','The query-level cache is cache for query resultsets that integrates closely with the second-level cache.','The query-level cache is the Session based cache.','Both A and B.','None of these.','What is Query level cache in hibernate?',5),(460,'1','The second-level cache is the SessionFactory based cache and is mainly responsible for caching objects across sessions.','The second-level cache is the Session based cache.','Both A and B.','None of these.','What is second level cache in hibernate?',5),(461,'2','.hibernate.xml','.hbm.xml','.hibernate_data.xml','None of these.','What is the naming convention for Hibernate XML mapping file extensions?',5),(462,'2','OSCache','thread','EHCache','None of these','what is the value of yyy in the below configuration?<br/>&lt;property name=\"current_session_context_class\"&gt;yyy&lt;/property&gt;',5),(463,'2','Object Relation Map','Object Relational Mapping','Object Record Mapping','None of these.','What ORM stands for?',5),(464,'1','Use this strategy if data hardly ever changes and a small likelihood of stale data is not of critical concern.','Use this strategy for read-mostly data where it is critical to prevent stale data in concurrent transactions.','Use it for reference data only.','None of these.','When a Nonstrict-read-write concurrency strategy is to be used?',5),(465,'1','Use this strategy if data hardly ever changes and a small likelihood of stale data is not of critical concern.','Use this strategy for read-mostly data where it is critical to prevent stale data in concurrent transactions.','Use it for reference data only.','None of these.','When a Read-only concurrency strategy is to be used?',5),(466,'3','Use it for reference data only.','Use this strategy if data hardly ever changes and a small likelihood of stale data is not of critical concern.','Use this strategy for read-mostly data where it is critical to prevent stale data in concurrent transactions.','None of these.','When a Read-write concurrency strategy is to be used?',5),(467,'3','Use it for reference data only.','Use this strategy if data hardly ever changes and a small likelihood of stale data is not of critical concern.','Use this strategy for read-mostly data where it is critical to prevent stale data in concurrent transactions.','None of these.','When a Transactional concurrency strategy is to be used?',5),(468,'1','EHCache','GumoCache','DASCache','TestCache','Which 2nd level cache is better in hibernate?',5),(469,'2','Query.setCacheMode(CacheMode.READ).','Query.setCacheMode(CacheMode.REFRESH).','Query.setCacheMode(CacheMode.NONE).','Query.setCacheMode(CacheMode.REFRESHDATABASE).','Which Cache Strategy particularly useful in cases where underlying data may have been updated via a separate process (i.e., not modified through Hibernate)?',5),(470,'1','c3p0','p3c0','t3d0','t4d0','Which connection pool is best for Hibernate ?',5),(471,'3','Oracle','Microsoft SQL Server Database','FoundationDB','Informix Dynamic Server','Which database is not supported by Hibernate?',5),(472,'3','DB2/NT','MySQL','FoundationDB','PostgreSQL','Which database is not supported by Hibernate?',5),(473,'1','&lt;many-to-many&gt;','&lt;many-many&gt;','&lt;ManyToMany&gt;','None of these.','Which element is used to represent many-to-many relationship in hibernate?',5),(474,'1','&lt;one-to-many&gt;','&lt;one-many&gt;','&lt;OneToMany&gt;','None of these.','Which element is used to represent one-to-many relationship in hibernate?',5),(475,'3','&lt;set&gt;','&lt;list&gt;','&lt;bag&gt;','&lt;map&gt;','Which element maps java.util.Collection property in hibernate?',5),(476,'2','&lt;set&gt;','&lt;list&gt;','&lt;bag&gt;','&lt;map&gt;','Which element maps java.util.List property in hibernate?',5),(477,'1','&lt;set&gt;','&lt;list&gt;','&lt;bag&gt;','&lt;map&gt;','Which element maps java.util.Set property in hibernate?',5),(478,'4','&lt;set&gt;','&lt;list&gt;','&lt;bag&gt;','&lt;map&gt;','Which element maps java.util.SortedMap property in hibernate?',5),(479,'1','id','generator','primaryKey','None of these','Which element of hbm.xml defines maps the unique ID attribute in class to the primary key of the database table?',5),(480,'3','id','generator','property','class','Which element of hbm.xml is used to map a Java class property to a column in the database table?',5),(481,'3','property','hibernate-config','class','class-config','Which elements is used to define specific mappings from a Java classes to the database tables?',5),(482,'2','session.createQuery();','session.createCriteria();','session.createSQLQuery();','None of these','Which fetching strategy tuned query automatically?',5),(483,'4','Transactional','Read-write','Nonstrict-read-write.','All of the above.','Which is a concurrency strategies in hibernate?',5),(484,'4','Transaction','SessionFactory','Session','All of the above','Which is a core component of Hibernate?',5),(485,'1','The first-level cache is the Session based cache.','The first-level cache is the SessionFactory based cache.','Both A and B.','None of these.','Which is first level cache in hibernate?',5),(486,'1','JDBC','SessionFactory','Session','Configuration','Which is not a core component of Hibernate?',5),(487,'2','Transaction','Provider','Criteria','Query','Which is not a core component of Hibernate?',5),(488,'4','Castor','Spring DAO','Hibernate','NoSQL','Which is not an ORM framework?',5),(489,'1','hibernate-mapping','hibernate-config','class-mapping','class-config','Which is the root node of hbm.xml file?',5),(490,'1','The @Column annotation is used to specify the details of the column to which a field or property will be mapped.','The @Column annotation is applied on a class.','Both A and B.','None of these.','Which is true about @Column annotation?',5),(491,'3','@Entity annotation marks a class as an entity bean.','Class marked with @Entity annotation must have a no-argument constructor that is visible with at least protected scope.','Both A and B.','None of these.','Which is true about @Entity annotation?',5),(492,'3','@GeneratedValue annotation takes two parameters strategy and generator.','@GeneratedValue annotation provides the primary key generation strategy to be used.','Both A and B.','None of these.','Which is true about @GeneratedValue annotation?',5),(493,'3','Hibernate detects that the @Id annotation is on a field.','Hibernate assumes that it should access properties on an object directly through fields at runtime.','Both A and B.','None of these.','Which is true about @Id annotation?',5),(494,'3','The @Table annotation allows to specify the details of the table that will be used to persist the entity in the database.','The @Table annotation allows to override the name of the table, its catalogue, and its schema, and enforce unique constraints on columns in the table.','Both A and B.','None of these.','Which is true about @Table annotation?',5),(495,'3','The &lt;generator&gt; element within the id element is used to automatically generate the primary key values','Set the class attribute of the generator element is set to native to let hibernate pick up either identity, sequence or hilo algorithm to create primary key depending upon the capabilities of the underlying database.','Both A and B.','None of these.','Which is true about &lt;generator&gt; element?',5),(496,'4','The &lt;id&gt; element maps the unique ID attribute in class to the primary key of the database table.','The name attribute of the id element refers to the property in the class.','The column attribute of the id element refers to the column in the database table.','All of the above.','Which is true about &lt;id&gt; element?',5),(497,'4','The &lt;property&gt; element is used to map a Java class property to a column in the database table.','The name attribute of the element refers to the property in the class.','The column attribute of the element refers to the column in the database table.','All of the above.','Which is true about &lt;property&gt; element?',5),(498,'1','Once we close the Hibernate Session, the persistent instance will become a detached instance.','A new instance of a persistent class which is not associated with a Session.','You can make a transient instance detached by associating it with a Session.','None of these.','Which is true about detached state of a persistent entity?',5),(499,'3','Hibernate Annotations is the powerful way to provide the metadata for the Object and Relational Table mapping.','All the metadata is clubbed into the POJO java file along with the code this helps the user to understand the table structure and POJO simultaneously during the development.','Both A and B.','None of these.','Which is true about hibernate annotations?',5),(500,'1','This property makes Hibernate generate the appropriate SQL for the chosen database.','This property makes Hibernate generate the appropriate java code for the chosen database.','Both A and B.','None of these.','Which is true about hibernate.dialect property in hibernate configuration?',5),(501,'4','Hibernate does not require an application server to operate.','Hibernate manipulates Complex associations of objects of your database.','Hibernate minimize database access with smart fetching strategies.','All of the above.','Which is true about hibernate?',5),(502,'3','Hibernate Query Language (HQL) is an object-oriented query language.','Instead of operating on tables and columns, HQL works with persistent objects and their properties.','Both A and B.','None of these.','Which is true about HQL?',5),(503,'3','ORM stands for Object-Relational Mapping.','ORM is a programming technique for converting data between relational databases.','Both A and B.','None of these.','Which is true about ORM?',5),(504,'4','You can make a transient instance persistent by associating it with a Session.','A persistent instance has a representation in the database.','A persistent instance has an identifier value.','All of the above.','Which is true about persistent state of a persistent entity?',5),(505,'4','Query level cache is an optional feature.','Query level cache requires two additional physical cache regions that hold the cached query results and the timestamps when a table was last updated.','Query level cache is only useful for queries that are run frequently with the same parameters.','All of the above.','Which is true about query level cache in hibernate?',5),(506,'4','Query objects Hibernate Query Language (HQL) string to retrieve data from the database and create objects.','Query objects SQL string to retrieve data from the database and create objects.','A Query instance is used to bind query parameters, limit the number of results returned by the query, and finally to execute the query.','All of the above.','Which is true about Query object in hibernate?',5),(507,'4','A Session is used to get a physical connection with a database.','The Session object is lightweight.','Persistent objects are saved and retrieved through a Session object.','All of the above.','Which is true about Session object in hibernate?',5),(508,'4','The SessionFactory is heavyweight object.','SessionFactory object is created during application start up and kept for later use.','You would need one SessionFactory object per database using a separate configuration file.','All of the above.','Which is true about SessionFactory object in hibernate?',5),(509,'4','A Transaction represents a unit of work with the database.','Transactions in Hibernate are handled by an underlying transaction manager.','This is an optional object and Hibernate applications may choose not to use this interface, instead managing transactions in their own application code.','All of the above.','Which is true about Transaction object in hibernate?',5),(510,'4','A new instance of a persistent class which is not associated with a Session.','A new instance of a persistent class which has no representation in the database.','A new instance of a persistent class which has no identifier value.','All of the above.','Which is true about transient state of a persistent entity?',5),(511,'4','ORM system lets business code access objects rather than DB tables.','ORM system hides details of SQL queries from OO logic.','ORM system helps in Transaction management and automatic key generation.','All of the above.','Which is true with respect to ORM vs JDBC?',5),(512,'1','Session.delete()','Session.remove()','Session.del()','Session.rm()','Which is used to remove a persistent instance from the datastore?',5),(513,'1','Session.refresh()','Session.get()','Session.reload()','Session.retrieve()','Which is used to re-read the state of the given instance from the underlying database?',5),(514,'1','Session.saveOrUpdate()','Session.keep()','Session.update()','Session.load()','Which is used to save or update the state of the given instance from the underlying database?',5),(515,'3','Session.store()','Session.keep()','Session.save()','Session.load()','Which is used to save the state of the given instance from the underlying database?',5),(516,'3','Session.store()','Session.keep()','Session.update()','Session.load()','Which is used to update the state of the given instance from the underlying database?',5),(517,'1','Configuration','Session','SessionFactory','Transaction','Which object is used to create SessionFactory object in hibernate?',5),(518,'2','http.conf','XML Configuration hibernate.cfg.xml','web.config','persistence.xml','Which of the following are most common configuration methods of Hibernate Configuation?',5),(519,'2','Session is a light weight non-threadsafe object','You can share the session between threads','Session represents a single unit-of-work with the database','Session is the primary interface for the persistence service','Which of the following is FALSE about Session in hibernate?',5),(520,'2','SQL variant to generate','Size of the database','All of the above','None of these','Which of the following is tag of hibernate.cfg.xml?',5),(521,'1','hibernate.connection.driver_class','hibernate.connection.datasource','Both A and B','None of these','Which property are used to configure diver class in hibernate?',5),(522,'1','hibernate.jdbc.fetch_size','hibernate.jdbc.batch_size','Both A and B','None of these','Which property is used to determine the JDBC fetch size?',5),(523,'2','hibernate.hbm2ddl.auto','hibernate.connection.autocommit','Both A and B','None of these','Which property is used to enable auto commit for JDBC pooled connections?',5),(524,'1','An employee can have multiple certificates and same certificate can be conferred to many employees.','An employee can have multiple certificates.','A certificate can be conferred to many employees.','All of the above.','Which situation represents many-to-many relationship?',5),(525,'2','bag has index column','bag permits duplicate element values','bag does not permits duplicate element values','All of the above.','Which statement is correct?',5),(526,'4','XDoclet Spring','J2EE','Maven','All of the above.','Which tools/frameworks provides integration with Hibernate?',5),(527,'2','Prototype','Singleton','Both A and B','None of these','While creating SessionFactory in hibernate, which design pattern should be adopted?',5),(528,'3','1.0','2.0','3.0','4.0','In which version of spring framwork Expression Language/SpEL was introduced',6),(529,'1','Run advice before and after the advised method is invoked.','Run advice before and after a class is loaded.','Run advice before and after http response is returned.','Run advice before and after http request is processed.','How around advice works?',6),(530,'2','Run advice before a class loads.','Run advice before a method execution.','Run advice before http response is to be returned.','Run advice before http request is to be processed.','How before advice works?',6),(531,'4','Add &lt;annotation-context:config /&gt; to bean configuration.','Add &lt;annotation-config /&gt; to bean configuration.','Add &lt;annotation-context-config /&gt; to bean configuration.','Add &lt;context:annotation-config/&gt; to bean configuration.','How to turn on annotation wiring?',6),(532,'4','Using shutdownHook()','Using shutdownHandler()','Using registerHook()','Using registerShutdownHook()','How to handle IoC container shut down?',6),(533,'3','session','global-session','request','prototype','What is scope, if bean is scoped to HTTP Request.',6),(534,'2','Any Object Programming','Aspect Oriented Programming','Asset Oriented Protocol','Asset Oriented Programming','What AOP stands for?',6),(535,'4','Compile time, load time','Compile time, run time','Run time','Compile time, load Time, Run time','Which are different points where weaving can be applied?',6),(536,'2','then, after, after-returning, after-throwing, around','before, after, after-returning, after-throwing, around','where, after, after-returning, after-throwing, around','when, after, after-returning, around','What are the types of advice?',6),(537,'1','DispatcherServlet handles all the HTTP requests and responses.','DispatcherServlet is used for AOP.','DispatcherServlet is used for transaction management.','DispatcherServlet is used for Dependency injection.','What is DispatcherServlet?',6),(538,'2','Accurate, Controlled, Isolation, Durability','Atomicity, Consistency, Isolation, Durability','Atomicity, Consistency, Independent, Done','Accurate, Controlled, Independent, Done','What is ACID in transactional management?',6),(539,'4','Hibernate','JPA','iBatis','All the above.','Which ORM Spring supports?',6),(540,'3','Autowiring injects one bean into another.','Autowiring injects values in spring beans.','Autowiring lets Spring resolve collaborators (other beans) for your bean by inspecting the contents of the BeanFactory without using &lt;constructor-arg&gt; and &lt;property&gt; elements.','Autowiring helps in wiring a list of values, allowing duplicates.','What is bean autowiring?',6),(541,'4','This event is published when the Servlet Context is either initialized or refreshed.','This event is published when the HTTP Request is received.','This event is published when the HTTP Response is returned.','This event is published when the ApplicationContext is closed using the close() method on the ConfigurableApplicationContext interface.','What is ContextClosedEvent event?',6),(542,'1','This scopes a bean definition to an HTTP Application/Global session.','This scopes the bean definition to Spring IoC container.','This scopes the bean definition to HTTP request.','This scopes the bean definition to HTTP Session.','What is global-session scope?',6),(543,'4','An introduction represents a point in your application where you can plug-in AOP aspect.','This is used to inject values in objects.','This is not invoked during program execution by Spring AOP framework.','An introduction allows you to add new methods or attributes to existing classes.','What is Introduction?',6),(544,'1','This represents a point in your application where you can plug-in AOP aspect.','This represents a point in your object where you join values.','This represents a point in your object where you join injected values.','This represents a point in your application which joins two objects.','What is Join point?',6),(545,'2','In Beans configuration file.','Web.xml file','Meta-inf/dispatcher.xml','Web-inf/ dispatcher.xml','Where do you define DispatcherServlet?',6),(546,'1','Beans, Core, Context, SpEL','Core, Context, ORM, Web','Core, Context, Aspects, Test','Bean, Core, Context, Test','Which are the modules of core container?',6),(547,'2','JDBC, ORM, OXM, JMS','JDBC, ORM, OXM, JMS, Transactions','JDBC, ORM, Web, Beans','JDBC, ORM, OXM, JMS','Which are the modules of Data Access/integration layer?',6),(548,'3','ServletContext','DispatcherServlet','ApplicationContext','None of the above','Which class acts as IoC Container?',6),(549,'1','Spring is an open source development framework for enterprise Java.','Spring is a proprietary framework.','Spring is a development framework for .Net applications.','Spring is a development framework for PHP based applications.','What is spring?',6),(550,'2','Spring MVC framework is Model-Value-Class architecture and used to bind model data with values.','The Spring web MVC framework provides model-view-controller architecture and ready components that can be used to develop flexible and loosely coupled web applications.','Spring MVC framework is used for Transaction management for Web Applications.','Spring MVC framework is used for AOP for Web Applications.','What is Spring MVC framework?',6),(551,'4','This represents a point in your application where you can plug-in AOP aspect.','This is invoked during program execution by Spring AOP framework.','This is used to inject values in objects.','This is a set of one or more joinpoints where an advice should be executed.','What is Pointcut?',6),(552,'1','This scopes a bean definition to an HTTP request.','This scopes the bean definition to Spring IoC container.','This scopes the bean definition to HTTP Session.','This scopes the bean definition HTTP Application/ Global session.','What is request scope?',6),(553,'1','This scopes a bean definition to an HTTP session.','This scopes the bean definition to Spring IoC container.','This scopes the bean definition to HTTP request.','This scopes the bean definition to HTTP Application/ Global session.','What is session scope?',6),(554,'1','This scopes the bean definition to a single instance per Spring IoC container.','This scopes the bean definition to a single instance per HTTP Request.','This scopes the bean definition to a single instance per HTTP Session.','This scopes the bean definition to a single instance per HTTP Application/ Global session.','What is singleton scope?',6),(555,'1','The object being advised by one or more aspects, this object will always be a proxy object, also referred to as the advised object.','A represents a object in your application where you can plug-in AOP aspect.','This is used to inject values in objects.','This is not invoked during program execution by Spring AOP framework.','What is Target object?',6),(556,'3','session','global-session','prototype','request','What is the scope of stateful bean?',6),(557,'2','global-session','singleton','prototype','request','What is the scope of stateless bean?',6),(558,'1','This can be used to inject a collection of name-value pairs where name and value can be of any type.','This helps in wiring a list of values but without any duplicates.','This helps in wiring a list of values, allowing duplicates.','This tag is not supported.','What is true about &lt;map&gt; collection configuration elements?',6),(559,'1','This can be used to inject a collection of name-value pairs where the name and value are both Strings.','This helps in wiring a list of values but without any duplicates.','This can be used to inject a collection of name-value pairs where name and value can be of any type.','This helps in wiring a list of values, allowing duplicates.','What is true about &lt;props&gt; collection configuration elements?',6),(560,'3','It is a concrete class.','It is an abstract class.','It is an interface.','None of the above.','What is true about BeanPostProcessor?',6),(561,'4','Spring beans are simple POJOs.','Spring beans are managed by the Spring IoC container.','Spring beans are instantiated, assembled, and otherwise managed by a Spring IoC container.','All of the above.','Which of the following stands true for spring beans?',6),(562,'1','The functions that span multiple points of an application are called cross cutting concerns.','Cross-cutting concerns are conceptually separate from the application\'s business logic.','Logging is one of the examples of cross cutting concerns.','All of the above.','What is true about cross-cutting concerns?',6),(563,'1','Constructor based, Setter based','Constructor based, Setter based, Getter Based','Setter based, Getter based, Properties based','Constructor based, Setter based, Properties based','What types of Dependency injection does spring supports?',6),(564,'3','AdvancedApplicationContext, FileApplicationContext','FileSystemApplicationContext, ClassPathApplicationContext, WebApplicationContext','FileSystemXmlApplicationContext, ClassPathXmlApplicationContext, WebXmlApplicationContext','FileSystemApplicationContext, ClassPathApplicationContext','Which are the correct implementation classes of ApplicationContext?',6),(565,'4','Java based configuration.','Annotation based configuration.','XML Based configuration file.','All of the above.','Which is the way to provide configuration metadata to spring?',6),(566,'3','XML Schema based aspect implementation','@AspectJ based aspect implementation','Both of above.','None of above.','Which of the following aspect implementation spring supports?',6),(567,'1','It helps in decoupling application objects from each other.','It helps in deciding the dependencies of objects.','It stores objects states in database.','It stores object states in file system.','Which of the following is correct about dependency injection?',6),(568,'2','Context','JMS','Aspects','Beans','Which of the following is part of Data Access layer in Spring framework?',6),(569,'4','AOP','O/R Integration','Spring MVC','HTML/JSP','Which of the following is not a Spring Module?',6),(570,'2','The add() method executes code in a new transaction','The add() method uses the transaction of the transferMoney() method','When calling the add() method, an exception is thrown','Other behavior','Assuming @Transactional annotation support is enabled and the transferMoney method is called<br/>through a Spring AOP proxy, what is the behavior of the following code sample?<br/>@Transactional(propagation=Propagation.REQUIRED)<br/>public void transferMo',6),(571,'2','Abstract','Singleton','Final','initialized','Beans defined in spring framework are by default',6),(572,'4','Central to the Spring Framework is its IOC container','IOC provides a consistent means of configuring and managing Java objects using call-backs.','IOC container is responsible for managing object lifecycles','All the above','Choose which is not true:',6),(573,'1','Yes with the TransactionTemplate class','Yes with the TransactionService class','Yes using the @Transactional bean post processor','No','Does Spring provides programmatic transaction management? Select a unique answer.',6),(574,'1','@Configuration annotation is missing','@Bean name is ambiguous','@Bean scope is prototype','None of the above','Given the following configuration class, what are correct affirmations? Select one or more answers.<br/>public class ApplicationConfig {<br/>private DataSource dataSource;<br/>@Autowired<br/>public ApplicationConfig(DataSource dataSource) {<br/>this.dataS',6),(575,'1','The p namespace has to be declared','Bean id is bankServiceImpl','The BankServiceImpl references a NationalBank bean','Syntex Error','Given the Spring configuration file, which are the correct statements?<br/><br/>&lt;bean class=\"com.spring.service.BankServiceImpl\"&gt;<br/>&lt;bankName=\"NationalBank\"&gt;<br/>&lt;/bean&gt;',6),(576,'3','By using the util:constant tag','By declaring the ConstantPlaceholderConfigurer bean post processor','By using the context:property-placeholder tag','By using the c: namespace','How could you externalize constants from a Spring onfiguration file or a Spring annotation into a .properties file? Select one or more answers',6),(577,'2','One','Two','Three','None','How many type of Dynamic proxy is available in Spring?',6),(578,'1','AOP proxies are created by Spring in order to implement the aspect contracts','AOP proxies are always created with a JDK dynamic proxy','Only classes that implements a least one interface could be proxied','All methods could be proxied','Which one is the correct statement about AOP proxy?',6),(579,'2','One','Two','Three','Four','What is the Type of Proxy in Spring Framework?',6),(580,'2','One','Two','Three','Four','How many type of the injection method in Spring?',6),(581,'3','With the name attribute of the @Autowired annotation','By using the single @Qualifier annotation','By using both the @Autowired and the @Qualifier spring annotations','None','How to auto-inject into a field a bean by its name? Select one or more response.',6),(582,'1','Design Pattern','Framework','Java Module','ORM Framework','IOC or Dependenct injection is?',6),(583,'4','The method annoted with @PostConstruct is called after bean instantiation and before properties setting of the bean','The method @PreDestroy of a prototype bean is called when the bean is garbage collected','The init() method declared in the init-method attribute of a bean is called before the afterPropertiesSet callback method of the InitializingBean interface','The method annotated with @PostConstruct is called before before the afterPropertiesSet callback method of the InitializingBean interface','Select one correct answer about spring bean life cycle.',6),(584,'4','a abstract class','concrete class','final class','an interface','Spring Controller is?',6),(585,'2','1,2,3,4,5','1,2,3,4','1,2,4,5','None','Spring provides features:<br/><br/>1. Resource management<br/>2. Exception handling <br/>3. Transaction participation <br/>4. Resource unwrapping <br/>5. Abstraction for BLOB and CLOB handling',6),(586,'3','A new Spring context is created for each test class','To get a reference on the bean you want to test, you have to call the getBean() method of the Spring context','Spring context configuration could be inherits from the super class','The Spring context configuration file has to be provided to the @ContextConfiguration annotation','Select correct statement about developing integration test with Spring support.',6),(587,'1','Transaction manager could be set within the @TransactionConfiguration annotation','Method annotated with @Before is executed outside of the test\'s transaction','Spring test may rollback the transaction of a service configured with the REQUIRES_NEW propagation','All of the above','Select correct statement about transactional support of the spring test module.',6),(588,'1','constructor and setter','constructor and getter','getter and setter','setter, getter and constructor','What are different types of Bean Injections?',6),(589,'4','It provides an abstraction layer for the main open source mock frameworks','Provides the @Mock annotation','It dynamically generates mock objects','None of the above','What is right about the spring test module?',6),(590,'2','JDBC','NoSQL','Hibernate','JPA','What data access technology is not supported by the Spring framework?',6),(591,'3','RowMapper','RowCallbackHandler','ResultSetExtractor','ResultSetMapper','Using JdbcTemplate, what is the Spring provided class you will use for result set parsing and merging rows into a single object? Select a unique answer.',6),(592,'1','The execution of all public method','The execution of all public method returning a value','The execution of all public method having at least one parameter','The execution of all public method in class belonging to the default java package','Using the Spring AOP framework, what are the joinpoint methods of the following pointcut expressions?<br/><br/>execution(public * *(..))',6),(593,'4','All methods, whereas there visibility','All methods, except private method','Protected and public methods','Public methods','Using the Spring AOP framework, what is the visibility of the method matches by the following join<br/>point?<br/>@Pointcut(\"execution(* *(..))\")<br/>private void anyOperation() {};',6),(594,'4','byName , byType, destructor and autodetect','byName , byMethod, constructor and autodetect','byName , byType, constructor and autocorrect','byName , byType, constructor and autodetect','What are Different Autowire types?',6),(595,'4','Advice to be executed regardless of the means by which a join point exits','Advice that surrounds a method invocation and can perform custom behavior before and after the method invocation','Advice to be executed before method invocation','Advice to be executed after a join point completes without throwing an exception','What is an after returning advice? Select a unique answer.',6),(596,'2','Advice that could throw an exception','Advice to be executed if a method exits by throwing an exception','Advice that executes before a join point','Spring does not provide this type of advice','What is an after throwing advice? Select a unique answer.',6),(597,'1','Data source access','Open/close data source connection','JDBC exception wrapping into DataAccess Exception','JDBC statement execution','What is not provided by the JdbcTemplate? Select a unique answer.',6),(598,'2','Rollback for any Exception','Rollback for RuntimeException','Rollback for checked exceptions','Always commit','What is the default rollback policy in transaction management?',6),(599,'2','ApplicationContext implements BeanFactory','ApplicationContext extends BeanFactory','BeanFactory extends ApplicationContext','BeanFactory implements ApplicationContext','Which of the following is true?',6),(600,'3','@Transactional annotation scanning','@Aspect annotation detection enabling','@Autowired annotation enabling','None of the above','What are the features of the XML &lt;context: namespace?&gt; Select correct option',6),(601,'3','Reuse Spring configuration files of the application','Use dependency injection','Provide some mocks for servlet classes','All of the above','What are the main advantage(s) for using Spring when writing unit tests?',6),(602,'1','Mocking or stubbing the service','Be able to use the Spring auto-injection','Can do dependency checking','All of the above','What are the main advantages of using interfaces when designing business services? Select answer.',6),(603,'3','Listing entity classes annoted with @Entity','Scanning a package to detect annoted entity classes (with @Entity)','Listing hibernate XML mapping configuration file (.hbm.xml)','All of the above','What configuration is supported by the LocalSessionFactoryBean? Select a unique answer.',6),(604,'2','An advice could proxied a constructor?s class','A point cut could select methods that have a custom annotation','Static initialization code could be targeted by a point cut','Combination of pointcuts by &&, || and the ! operators is not supported','What are the unique correct answers about Spring AOP support?',6),(605,'3','If a transaction exists, the current method should run within this transaction. Otherwise, it should start a new transaction and run within its own transaction.','If a transaction is in progress, the current method should run within the nested transaction of the existing transaction. Otherwise, a new transaction has to be started and run within its own transaction.','The current method must start a new transaction and run within its own transaction. If there is an existing transaction in progress, it is suspended.','None of the above','What is the transaction behavior of the PROPAGATION_REQUIRES_NEW mode? Select a unique answer',6),(606,'2','The tx namespace provides JTA transaction manager declaration shortcut syntax','Id of the bean has to be transactionManager','Depending the application persistence technology, the HibernateTransactionManager or the DataSourceTransactionManager could be used as bean class','Default transaction timeout could be given','What is/are incorrect statements about XML declaration of the transaction manager bean? Select correct option',6),(607,'1','DataAccessException','NullPointerException','SpringException','ArrayIndexOutofBound','Which exception class is related to all the exceptions that are thrown in spring applications ?',6),(608,'3','In a web application','In an integration test running with the SpringJUnit4ClassRunner','In a standalone application started with a main method','None of the above','What are typically case\'s where you usually need to manually instanciated an ApplicationContext?',6),(609,'3','Those annotations are specified in the JSR-250','The context:component-scan tag enable them','The Spring Framework embedded those annotation','The context:annotation-config tag enable them','What one is not the right affirmations about the @PostConstruct, @Resource and the @PreDestroy annotations?',6),(610,'4','Constuctor and properties autowiring in the same bean are not compatible','A bean should have a default or a no-args constructor','The constructor-arg tag could take type, name and index to reduce ambiguity','All of the above','What statement is not correct in live environment? Select a unique answer.',6),(611,'2','Reuse Spring configuration files of the application','Create mock or stub','Be able to use the rollback after the test pattern','Use dependency injection','Which one is not correct about the advantages for using Spring when writing integration tests?',6),(612,'2','It is mandatory for using Spring exception translation mechanism','May be improve performance when using Hibernate','Spring optimizes its transaction interceptor','None of the above','Why is it a best practice to mark transaction as read-only when code does not write anything to the database? Select one.',6);

/*Table structure for table `role` */

DROP TABLE IF EXISTS `role`;

CREATE TABLE `role` (
  `role_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`role_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;

/*Data for the table `role` */

insert  into `role`(`role_id`,`name`) values (1,'ROLE_ADMIN'),(2,'ROLE_USER');

/*Table structure for table `topics` */

DROP TABLE IF EXISTS `topics`;

CREATE TABLE `topics` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `description` varchar(255) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=latin1;

/*Data for the table `topics` */

insert  into `topics`(`id`,`description`,`name`) values (1,'Servlets quiz contains 150+ multiple choice questions, take and clear the quiz to check your servlet skills.','Servlet'),(2,'JSP quiz contains 100+ multiple choice questions, take and clear the quiz to check your JSP skills.','JSP'),(3,'JDBC quiz contains 100+ multiple choice questions, take and clear the quiz to check your JDBC skills.','JDBC'),(4,'Struts quiz contains 120+ multiple choice questions, take and clear the quiz to check your Struts skills.','Struts'),(5,'Hibernate quiz contains 100+ multiple choice questions, take and clear the quiz to check your Hibernate skills.','Hibernate'),(6,'Spring quiz contains 100+ multiple choice questions, take and clear the quiz to check your Spring skills.','Spring'),(7,'Angular quiz contains 100+ multiple choice questions, take and clear the quiz to check your Angular skills.','Angular'),(8,'Core java quiz contains 100+ multiple choice questions, take and clear the quiz to check your Core java skills.','Core java');

/*Table structure for table `user` */

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `user_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `account_non_expired` bit(1) DEFAULT NULL,
  `credentials_non_expired` bit(1) DEFAULT NULL,
  `deleted` bit(1) DEFAULT NULL,
  `enabled` bit(1) DEFAULT NULL,
  `first_name` varchar(255) DEFAULT NULL,
  `last_name` varchar(255) DEFAULT NULL,
  `locked` bit(1) DEFAULT NULL,
  `mobile` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `username` varchar(255) DEFAULT NULL,
  `activation_detail_id` bigint(20) DEFAULT NULL,
  `address` bigint(20) DEFAULT NULL,
  `profile_image` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`user_id`),
  KEY `FK8fhjtuea6ku6ytpf598jt96vs` (`activation_detail_id`),
  KEY `FKi371i1vdmyh0slejk03x1ihe7` (`address`),
  KEY `FKgfwtgpk7nsy7l6tcp7c9sa5dq` (`profile_image`),
  CONSTRAINT `FK8fhjtuea6ku6ytpf598jt96vs` FOREIGN KEY (`activation_detail_id`) REFERENCES `user_activation_detail` (`uad_id`),
  CONSTRAINT `FKgfwtgpk7nsy7l6tcp7c9sa5dq` FOREIGN KEY (`profile_image`) REFERENCES `file_upload` (`id`),
  CONSTRAINT `FKi371i1vdmyh0slejk03x1ihe7` FOREIGN KEY (`address`) REFERENCES `address` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;

/*Data for the table `user` */

/*Table structure for table `user_activation_detail` */

DROP TABLE IF EXISTS `user_activation_detail`;

CREATE TABLE `user_activation_detail` (
  `uad_id` bigint(20) NOT NULL,
  `activation_token` varchar(255) DEFAULT NULL,
  `token_expire_on` datetime DEFAULT NULL,
  `used_on` datetime DEFAULT NULL,
  `user_id` bigint(20) DEFAULT NULL,
  `valid` bit(1) DEFAULT NULL,
  PRIMARY KEY (`uad_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `user_activation_detail` */

/*Table structure for table `user_role` */

DROP TABLE IF EXISTS `user_role`;

CREATE TABLE `user_role` (
  `user_id` bigint(20) NOT NULL,
  `role_id` bigint(20) NOT NULL,
  PRIMARY KEY (`user_id`,`role_id`),
  KEY `FKa68196081fvovjhkek5m97n3y` (`role_id`),
  CONSTRAINT `FK859n2jvi8ivhui0rl0esws6o` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`),
  CONSTRAINT `FKa68196081fvovjhkek5m97n3y` FOREIGN KEY (`role_id`) REFERENCES `role` (`role_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `user_role` */

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
